/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateClusterPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateClusterPayload{}

// CreateClusterPayload struct for CreateClusterPayload
type CreateClusterPayload struct {
	DeploymentMode    *string                         `json:"deployment_mode,omitempty"`
	EnvironmentName   string                          `json:"environment_name"`
	ImageName         string                          `json:"image_name"`
	KeypairName       string                          `json:"keypair_name"`
	KubernetesVersion string                          `json:"kubernetes_version"`
	MasterFlavorName  string                          `json:"master_flavor_name"`
	Name              string                          `json:"name"`
	NodeCount         *int32                          `json:"node_count,omitempty"`
	NodeFlavorName    *string                         `json:"node_flavor_name,omitempty"`
	NodeGroups        []CreateClusterNodeGroupPayload `json:"node_groups,omitempty"`
}

type _CreateClusterPayload CreateClusterPayload

// NewCreateClusterPayload instantiates a new CreateClusterPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateClusterPayload(environmentName string, imageName string, keypairName string, kubernetesVersion string, masterFlavorName string, name string) *CreateClusterPayload {
	this := CreateClusterPayload{}
	var deploymentMode string = "full"
	this.DeploymentMode = &deploymentMode
	this.EnvironmentName = environmentName
	this.ImageName = imageName
	this.KeypairName = keypairName
	this.KubernetesVersion = kubernetesVersion
	this.MasterFlavorName = masterFlavorName
	this.Name = name
	return &this
}

// NewCreateClusterPayloadWithDefaults instantiates a new CreateClusterPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClusterPayloadWithDefaults() *CreateClusterPayload {
	this := CreateClusterPayload{}
	var deploymentMode string = "full"
	this.DeploymentMode = &deploymentMode
	return &this
}

// GetDeploymentMode returns the DeploymentMode field value if set, zero value otherwise.
func (o *CreateClusterPayload) GetDeploymentMode() string {
	if o == nil || IsNil(o.DeploymentMode) {
		var ret string
		return ret
	}
	return *o.DeploymentMode
}

// GetDeploymentModeOk returns a tuple with the DeploymentMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetDeploymentModeOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentMode) {
		return nil, false
	}
	return o.DeploymentMode, true
}

// HasDeploymentMode returns a boolean if a field has been set.
func (o *CreateClusterPayload) HasDeploymentMode() bool {
	if o != nil && !IsNil(o.DeploymentMode) {
		return true
	}

	return false
}

// SetDeploymentMode gets a reference to the given string and assigns it to the DeploymentMode field.
func (o *CreateClusterPayload) SetDeploymentMode(v string) {
	o.DeploymentMode = &v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *CreateClusterPayload) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *CreateClusterPayload) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

// GetImageName returns the ImageName field value
func (o *CreateClusterPayload) GetImageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageName, true
}

// SetImageName sets field value
func (o *CreateClusterPayload) SetImageName(v string) {
	o.ImageName = v
}

// GetKeypairName returns the KeypairName field value
func (o *CreateClusterPayload) GetKeypairName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeypairName
}

// GetKeypairNameOk returns a tuple with the KeypairName field value
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetKeypairNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeypairName, true
}

// SetKeypairName sets field value
func (o *CreateClusterPayload) SetKeypairName(v string) {
	o.KeypairName = v
}

// GetKubernetesVersion returns the KubernetesVersion field value
func (o *CreateClusterPayload) GetKubernetesVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubernetesVersion
}

// GetKubernetesVersionOk returns a tuple with the KubernetesVersion field value
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetKubernetesVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubernetesVersion, true
}

// SetKubernetesVersion sets field value
func (o *CreateClusterPayload) SetKubernetesVersion(v string) {
	o.KubernetesVersion = v
}

// GetMasterFlavorName returns the MasterFlavorName field value
func (o *CreateClusterPayload) GetMasterFlavorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MasterFlavorName
}

// GetMasterFlavorNameOk returns a tuple with the MasterFlavorName field value
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetMasterFlavorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MasterFlavorName, true
}

// SetMasterFlavorName sets field value
func (o *CreateClusterPayload) SetMasterFlavorName(v string) {
	o.MasterFlavorName = v
}

// GetName returns the Name field value
func (o *CreateClusterPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateClusterPayload) SetName(v string) {
	o.Name = v
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise.
func (o *CreateClusterPayload) GetNodeCount() int32 {
	if o == nil || IsNil(o.NodeCount) {
		var ret int32
		return ret
	}
	return *o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NodeCount) {
		return nil, false
	}
	return o.NodeCount, true
}

// HasNodeCount returns a boolean if a field has been set.
func (o *CreateClusterPayload) HasNodeCount() bool {
	if o != nil && !IsNil(o.NodeCount) {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given int32 and assigns it to the NodeCount field.
func (o *CreateClusterPayload) SetNodeCount(v int32) {
	o.NodeCount = &v
}

// GetNodeFlavorName returns the NodeFlavorName field value if set, zero value otherwise.
func (o *CreateClusterPayload) GetNodeFlavorName() string {
	if o == nil || IsNil(o.NodeFlavorName) {
		var ret string
		return ret
	}
	return *o.NodeFlavorName
}

// GetNodeFlavorNameOk returns a tuple with the NodeFlavorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetNodeFlavorNameOk() (*string, bool) {
	if o == nil || IsNil(o.NodeFlavorName) {
		return nil, false
	}
	return o.NodeFlavorName, true
}

// HasNodeFlavorName returns a boolean if a field has been set.
func (o *CreateClusterPayload) HasNodeFlavorName() bool {
	if o != nil && !IsNil(o.NodeFlavorName) {
		return true
	}

	return false
}

// SetNodeFlavorName gets a reference to the given string and assigns it to the NodeFlavorName field.
func (o *CreateClusterPayload) SetNodeFlavorName(v string) {
	o.NodeFlavorName = &v
}

// GetNodeGroups returns the NodeGroups field value if set, zero value otherwise.
func (o *CreateClusterPayload) GetNodeGroups() []CreateClusterNodeGroupPayload {
	if o == nil || IsNil(o.NodeGroups) {
		var ret []CreateClusterNodeGroupPayload
		return ret
	}
	return o.NodeGroups
}

// GetNodeGroupsOk returns a tuple with the NodeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterPayload) GetNodeGroupsOk() ([]CreateClusterNodeGroupPayload, bool) {
	if o == nil || IsNil(o.NodeGroups) {
		return nil, false
	}
	return o.NodeGroups, true
}

// HasNodeGroups returns a boolean if a field has been set.
func (o *CreateClusterPayload) HasNodeGroups() bool {
	if o != nil && !IsNil(o.NodeGroups) {
		return true
	}

	return false
}

// SetNodeGroups gets a reference to the given []CreateClusterNodeGroupPayload and assigns it to the NodeGroups field.
func (o *CreateClusterPayload) SetNodeGroups(v []CreateClusterNodeGroupPayload) {
	o.NodeGroups = v
}

func (o CreateClusterPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateClusterPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeploymentMode) {
		toSerialize["deployment_mode"] = o.DeploymentMode
	}
	toSerialize["environment_name"] = o.EnvironmentName
	toSerialize["image_name"] = o.ImageName
	toSerialize["keypair_name"] = o.KeypairName
	toSerialize["kubernetes_version"] = o.KubernetesVersion
	toSerialize["master_flavor_name"] = o.MasterFlavorName
	toSerialize["name"] = o.Name
	if !IsNil(o.NodeCount) {
		toSerialize["node_count"] = o.NodeCount
	}
	if !IsNil(o.NodeFlavorName) {
		toSerialize["node_flavor_name"] = o.NodeFlavorName
	}
	if !IsNil(o.NodeGroups) {
		toSerialize["node_groups"] = o.NodeGroups
	}
	return toSerialize, nil
}

func (o *CreateClusterPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment_name",
		"image_name",
		"keypair_name",
		"kubernetes_version",
		"master_flavor_name",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateClusterPayload := _CreateClusterPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateClusterPayload)

	if err != nil {
		return err
	}

	*o = CreateClusterPayload(varCreateClusterPayload)

	return err
}

type NullableCreateClusterPayload struct {
	value *CreateClusterPayload
	isSet bool
}

func (v NullableCreateClusterPayload) Get() *CreateClusterPayload {
	return v.value
}

func (v *NullableCreateClusterPayload) Set(val *CreateClusterPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateClusterPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateClusterPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateClusterPayload(val *CreateClusterPayload) *NullableCreateClusterPayload {
	return &NullableCreateClusterPayload{value: val, isSet: true}
}

func (v NullableCreateClusterPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateClusterPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
