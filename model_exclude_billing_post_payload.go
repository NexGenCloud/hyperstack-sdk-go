/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ExcludeBillingPostPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExcludeBillingPostPayload{}

// ExcludeBillingPostPayload struct for ExcludeBillingPostPayload
type ExcludeBillingPostPayload struct {
	// `true` excludes the resource from billing while `false` does not.
	Exclude bool `json:"exclude"`
	// The ID of the resource which is being excluded from billing.
	ResourceId int32 `json:"resource_id"`
	// The type of the resource which is being excluded from billing.
	ResourceType string `json:"resource_type"`
}

type _ExcludeBillingPostPayload ExcludeBillingPostPayload

// NewExcludeBillingPostPayload instantiates a new ExcludeBillingPostPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExcludeBillingPostPayload(exclude bool, resourceId int32, resourceType string) *ExcludeBillingPostPayload {
	this := ExcludeBillingPostPayload{}
	this.Exclude = exclude
	this.ResourceId = resourceId
	this.ResourceType = resourceType
	return &this
}

// NewExcludeBillingPostPayloadWithDefaults instantiates a new ExcludeBillingPostPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExcludeBillingPostPayloadWithDefaults() *ExcludeBillingPostPayload {
	this := ExcludeBillingPostPayload{}
	return &this
}

// GetExclude returns the Exclude field value
func (o *ExcludeBillingPostPayload) GetExclude() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value
// and a boolean to check if the value has been set.
func (o *ExcludeBillingPostPayload) GetExcludeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclude, true
}

// SetExclude sets field value
func (o *ExcludeBillingPostPayload) SetExclude(v bool) {
	o.Exclude = v
}

// GetResourceId returns the ResourceId field value
func (o *ExcludeBillingPostPayload) GetResourceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *ExcludeBillingPostPayload) GetResourceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *ExcludeBillingPostPayload) SetResourceId(v int32) {
	o.ResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *ExcludeBillingPostPayload) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ExcludeBillingPostPayload) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ExcludeBillingPostPayload) SetResourceType(v string) {
	o.ResourceType = v
}

func (o ExcludeBillingPostPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExcludeBillingPostPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exclude"] = o.Exclude
	toSerialize["resource_id"] = o.ResourceId
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

func (o *ExcludeBillingPostPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exclude",
		"resource_id",
		"resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExcludeBillingPostPayload := _ExcludeBillingPostPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExcludeBillingPostPayload)

	if err != nil {
		return err
	}

	*o = ExcludeBillingPostPayload(varExcludeBillingPostPayload)

	return err
}

type NullableExcludeBillingPostPayload struct {
	value *ExcludeBillingPostPayload
	isSet bool
}

func (v NullableExcludeBillingPostPayload) Get() *ExcludeBillingPostPayload {
	return v.value
}

func (v *NullableExcludeBillingPostPayload) Set(val *ExcludeBillingPostPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableExcludeBillingPostPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableExcludeBillingPostPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExcludeBillingPostPayload(val *ExcludeBillingPostPayload) *NullableExcludeBillingPostPayload {
	return &NullableExcludeBillingPostPayload{value: val, isSet: true}
}

func (v NullableExcludeBillingPostPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExcludeBillingPostPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
