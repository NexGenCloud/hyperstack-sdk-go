/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogoutPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogoutPayload{}

// LogoutPayload struct for LogoutPayload
type LogoutPayload struct {
	RefreshToken string `json:"refresh_token"`
}

type _LogoutPayload LogoutPayload

// NewLogoutPayload instantiates a new LogoutPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogoutPayload(refreshToken string) *LogoutPayload {
	this := LogoutPayload{}
	this.RefreshToken = refreshToken
	return &this
}

// NewLogoutPayloadWithDefaults instantiates a new LogoutPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogoutPayloadWithDefaults() *LogoutPayload {
	this := LogoutPayload{}
	return &this
}

// GetRefreshToken returns the RefreshToken field value
func (o *LogoutPayload) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *LogoutPayload) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *LogoutPayload) SetRefreshToken(v string) {
	o.RefreshToken = v
}

func (o LogoutPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogoutPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["refresh_token"] = o.RefreshToken
	return toSerialize, nil
}

func (o *LogoutPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"refresh_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogoutPayload := _LogoutPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogoutPayload)

	if err != nil {
		return err
	}

	*o = LogoutPayload(varLogoutPayload)

	return err
}

type NullableLogoutPayload struct {
	value *LogoutPayload
	isSet bool
}

func (v NullableLogoutPayload) Get() *LogoutPayload {
	return v.value
}

func (v *NullableLogoutPayload) Set(val *LogoutPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableLogoutPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableLogoutPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogoutPayload(val *LogoutPayload) *NullableLogoutPayload {
	return &NullableLogoutPayload{value: val, isSet: true}
}

func (v NullableLogoutPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogoutPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
