/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateImagePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateImagePayload{}

// CreateImagePayload struct for CreateImagePayload
type CreateImagePayload struct {
	// List of labels to attach to the image
	Labels []string `json:"labels,omitempty"`
	// Name for the new custom image
	Name string `json:"name"`
}

type _CreateImagePayload CreateImagePayload

// NewCreateImagePayload instantiates a new CreateImagePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateImagePayload(name string) *CreateImagePayload {
	this := CreateImagePayload{}
	this.Name = name
	return &this
}

// NewCreateImagePayloadWithDefaults instantiates a new CreateImagePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateImagePayloadWithDefaults() *CreateImagePayload {
	this := CreateImagePayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateImagePayload) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateImagePayload) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateImagePayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CreateImagePayload) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *CreateImagePayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateImagePayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateImagePayload) SetName(v string) {
	o.Name = v
}

func (o CreateImagePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateImagePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CreateImagePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateImagePayload := _CreateImagePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateImagePayload)

	if err != nil {
		return err
	}

	*o = CreateImagePayload(varCreateImagePayload)

	return err
}

type NullableCreateImagePayload struct {
	value *CreateImagePayload
	isSet bool
}

func (v NullableCreateImagePayload) Get() *CreateImagePayload {
	return v.value
}

func (v *NullableCreateImagePayload) Set(val *CreateImagePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateImagePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateImagePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateImagePayload(val *CreateImagePayload) *NullableCreateImagePayload {
	return &NullableCreateImagePayload{value: val, isSet: true}
}

func (v NullableCreateImagePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateImagePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
