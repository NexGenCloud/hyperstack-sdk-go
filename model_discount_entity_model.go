/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the DiscountEntityModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscountEntityModel{}

// DiscountEntityModel struct for DiscountEntityModel
type DiscountEntityModel struct {
	Data   []DiscountPlanFields `json:"data,omitempty"`
	Entity *string              `json:"entity,omitempty"`
}

// NewDiscountEntityModel instantiates a new DiscountEntityModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscountEntityModel() *DiscountEntityModel {
	this := DiscountEntityModel{}
	return &this
}

// NewDiscountEntityModelWithDefaults instantiates a new DiscountEntityModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscountEntityModelWithDefaults() *DiscountEntityModel {
	this := DiscountEntityModel{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *DiscountEntityModel) GetData() []DiscountPlanFields {
	if o == nil || IsNil(o.Data) {
		var ret []DiscountPlanFields
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscountEntityModel) GetDataOk() ([]DiscountPlanFields, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *DiscountEntityModel) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []DiscountPlanFields and assigns it to the Data field.
func (o *DiscountEntityModel) SetData(v []DiscountPlanFields) {
	o.Data = v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *DiscountEntityModel) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscountEntityModel) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *DiscountEntityModel) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *DiscountEntityModel) SetEntity(v string) {
	o.Entity = &v
}

func (o DiscountEntityModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscountEntityModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	return toSerialize, nil
}

type NullableDiscountEntityModel struct {
	value *DiscountEntityModel
	isSet bool
}

func (v NullableDiscountEntityModel) Get() *DiscountEntityModel {
	return v.value
}

func (v *NullableDiscountEntityModel) Set(val *DiscountEntityModel) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscountEntityModel) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscountEntityModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscountEntityModel(val *DiscountEntityModel) *NullableDiscountEntityModel {
	return &NullableDiscountEntityModel{value: val, isSet: true}
}

func (v NullableDiscountEntityModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscountEntityModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
