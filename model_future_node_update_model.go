/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FutureNodeUpdateModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FutureNodeUpdateModel{}

// FutureNodeUpdateModel struct for FutureNodeUpdateModel
type FutureNodeUpdateModel struct {
	ExpectedProvisionDate CustomTime `json:"expected_provision_date"`
	Id                    *int32     `json:"id,omitempty"`
	NexgenName            string     `json:"nexgen_name"`
	OpenstackName         string     `json:"openstack_name"`
	RegionId              *int32     `json:"region_id,omitempty"`
}

type _FutureNodeUpdateModel FutureNodeUpdateModel

// NewFutureNodeUpdateModel instantiates a new FutureNodeUpdateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFutureNodeUpdateModel(expectedProvisionDate CustomTime, nexgenName string, openstackName string) *FutureNodeUpdateModel {
	this := FutureNodeUpdateModel{}
	this.ExpectedProvisionDate = expectedProvisionDate
	this.NexgenName = nexgenName
	this.OpenstackName = openstackName
	return &this
}

// NewFutureNodeUpdateModelWithDefaults instantiates a new FutureNodeUpdateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFutureNodeUpdateModelWithDefaults() *FutureNodeUpdateModel {
	this := FutureNodeUpdateModel{}
	return &this
}

// GetExpectedProvisionDate returns the ExpectedProvisionDate field value
func (o *FutureNodeUpdateModel) GetExpectedProvisionDate() CustomTime {
	if o == nil {
		var ret CustomTime
		return ret
	}

	return o.ExpectedProvisionDate
}

// GetExpectedProvisionDateOk returns a tuple with the ExpectedProvisionDate field value
// and a boolean to check if the value has been set.
func (o *FutureNodeUpdateModel) GetExpectedProvisionDateOk() (*CustomTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpectedProvisionDate, true
}

// SetExpectedProvisionDate sets field value
func (o *FutureNodeUpdateModel) SetExpectedProvisionDate(v CustomTime) {
	o.ExpectedProvisionDate = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FutureNodeUpdateModel) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureNodeUpdateModel) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FutureNodeUpdateModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FutureNodeUpdateModel) SetId(v int32) {
	o.Id = &v
}

// GetNexgenName returns the NexgenName field value
func (o *FutureNodeUpdateModel) GetNexgenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NexgenName
}

// GetNexgenNameOk returns a tuple with the NexgenName field value
// and a boolean to check if the value has been set.
func (o *FutureNodeUpdateModel) GetNexgenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NexgenName, true
}

// SetNexgenName sets field value
func (o *FutureNodeUpdateModel) SetNexgenName(v string) {
	o.NexgenName = v
}

// GetOpenstackName returns the OpenstackName field value
func (o *FutureNodeUpdateModel) GetOpenstackName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OpenstackName
}

// GetOpenstackNameOk returns a tuple with the OpenstackName field value
// and a boolean to check if the value has been set.
func (o *FutureNodeUpdateModel) GetOpenstackNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenstackName, true
}

// SetOpenstackName sets field value
func (o *FutureNodeUpdateModel) SetOpenstackName(v string) {
	o.OpenstackName = v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *FutureNodeUpdateModel) GetRegionId() int32 {
	if o == nil || IsNil(o.RegionId) {
		var ret int32
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FutureNodeUpdateModel) GetRegionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *FutureNodeUpdateModel) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given int32 and assigns it to the RegionId field.
func (o *FutureNodeUpdateModel) SetRegionId(v int32) {
	o.RegionId = &v
}

func (o FutureNodeUpdateModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FutureNodeUpdateModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expected_provision_date"] = o.ExpectedProvisionDate
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["nexgen_name"] = o.NexgenName
	toSerialize["openstack_name"] = o.OpenstackName
	if !IsNil(o.RegionId) {
		toSerialize["region_id"] = o.RegionId
	}
	return toSerialize, nil
}

func (o *FutureNodeUpdateModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expected_provision_date",
		"nexgen_name",
		"openstack_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFutureNodeUpdateModel := _FutureNodeUpdateModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFutureNodeUpdateModel)

	if err != nil {
		return err
	}

	*o = FutureNodeUpdateModel(varFutureNodeUpdateModel)

	return err
}

type NullableFutureNodeUpdateModel struct {
	value *FutureNodeUpdateModel
	isSet bool
}

func (v NullableFutureNodeUpdateModel) Get() *FutureNodeUpdateModel {
	return v.value
}

func (v *NullableFutureNodeUpdateModel) Set(val *FutureNodeUpdateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableFutureNodeUpdateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableFutureNodeUpdateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFutureNodeUpdateModel(val *FutureNodeUpdateModel) *NullableFutureNodeUpdateModel {
	return &NullableFutureNodeUpdateModel{value: val, isSet: true}
}

func (v NullableFutureNodeUpdateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFutureNodeUpdateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
