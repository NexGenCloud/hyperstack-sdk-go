/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SnapshotRestoreRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotRestoreRequest{}

// SnapshotRestoreRequest struct for SnapshotRestoreRequest
type SnapshotRestoreRequest struct {
	// Contract ID to assign to the newly restored VM
	ContractId *int32 `json:"contract_id,omitempty"`
	// The name of the newly restored VM
	NewVmName string `json:"new_vm_name"`
}

type _SnapshotRestoreRequest SnapshotRestoreRequest

// NewSnapshotRestoreRequest instantiates a new SnapshotRestoreRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotRestoreRequest(newVmName string) *SnapshotRestoreRequest {
	this := SnapshotRestoreRequest{}
	this.NewVmName = newVmName
	return &this
}

// NewSnapshotRestoreRequestWithDefaults instantiates a new SnapshotRestoreRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotRestoreRequestWithDefaults() *SnapshotRestoreRequest {
	this := SnapshotRestoreRequest{}
	return &this
}

// GetContractId returns the ContractId field value if set, zero value otherwise.
func (o *SnapshotRestoreRequest) GetContractId() int32 {
	if o == nil || IsNil(o.ContractId) {
		var ret int32
		return ret
	}
	return *o.ContractId
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotRestoreRequest) GetContractIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ContractId) {
		return nil, false
	}
	return o.ContractId, true
}

// HasContractId returns a boolean if a field has been set.
func (o *SnapshotRestoreRequest) HasContractId() bool {
	if o != nil && !IsNil(o.ContractId) {
		return true
	}

	return false
}

// SetContractId gets a reference to the given int32 and assigns it to the ContractId field.
func (o *SnapshotRestoreRequest) SetContractId(v int32) {
	o.ContractId = &v
}

// GetNewVmName returns the NewVmName field value
func (o *SnapshotRestoreRequest) GetNewVmName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewVmName
}

// GetNewVmNameOk returns a tuple with the NewVmName field value
// and a boolean to check if the value has been set.
func (o *SnapshotRestoreRequest) GetNewVmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewVmName, true
}

// SetNewVmName sets field value
func (o *SnapshotRestoreRequest) SetNewVmName(v string) {
	o.NewVmName = v
}

func (o SnapshotRestoreRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotRestoreRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractId) {
		toSerialize["contract_id"] = o.ContractId
	}
	toSerialize["new_vm_name"] = o.NewVmName
	return toSerialize, nil
}

func (o *SnapshotRestoreRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"new_vm_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotRestoreRequest := _SnapshotRestoreRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotRestoreRequest)

	if err != nil {
		return err
	}

	*o = SnapshotRestoreRequest(varSnapshotRestoreRequest)

	return err
}

type NullableSnapshotRestoreRequest struct {
	value *SnapshotRestoreRequest
	isSet bool
}

func (v NullableSnapshotRestoreRequest) Get() *SnapshotRestoreRequest {
	return v.value
}

func (v *NullableSnapshotRestoreRequest) Set(val *SnapshotRestoreRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotRestoreRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotRestoreRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotRestoreRequest(val *SnapshotRestoreRequest) *NullableSnapshotRestoreRequest {
	return &NullableSnapshotRestoreRequest{value: val, isSet: true}
}

func (v NullableSnapshotRestoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotRestoreRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
