/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CustomerPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerPayload{}

// CustomerPayload struct for CustomerPayload
type CustomerPayload struct {
	Id       int32  `json:"id"`
	PlanType string `json:"plan_type"`
}

type _CustomerPayload CustomerPayload

// NewCustomerPayload instantiates a new CustomerPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerPayload(id int32, planType string) *CustomerPayload {
	this := CustomerPayload{}
	this.Id = id
	this.PlanType = planType
	return &this
}

// NewCustomerPayloadWithDefaults instantiates a new CustomerPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerPayloadWithDefaults() *CustomerPayload {
	this := CustomerPayload{}
	return &this
}

// GetId returns the Id field value
func (o *CustomerPayload) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomerPayload) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomerPayload) SetId(v int32) {
	o.Id = v
}

// GetPlanType returns the PlanType field value
func (o *CustomerPayload) GetPlanType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value
// and a boolean to check if the value has been set.
func (o *CustomerPayload) GetPlanTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanType, true
}

// SetPlanType sets field value
func (o *CustomerPayload) SetPlanType(v string) {
	o.PlanType = v
}

func (o CustomerPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["plan_type"] = o.PlanType
	return toSerialize, nil
}

func (o *CustomerPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"plan_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerPayload := _CustomerPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerPayload)

	if err != nil {
		return err
	}

	*o = CustomerPayload(varCustomerPayload)

	return err
}

type NullableCustomerPayload struct {
	value *CustomerPayload
	isSet bool
}

func (v NullableCustomerPayload) Get() *CustomerPayload {
	return v.value
}

func (v *NullableCustomerPayload) Set(val *CustomerPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerPayload(val *CustomerPayload) *NullableCustomerPayload {
	return &NullableCustomerPayload{value: val, isSet: true}
}

func (v NullableCustomerPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
