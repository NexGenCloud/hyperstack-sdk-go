/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateProfilePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProfilePayload{}

// CreateProfilePayload struct for CreateProfilePayload
type CreateProfilePayload struct {
	// The data object which contains the configuration of the virtual machine profile being created.
	Data map[string]string `json:"data"`
	// The optional description for the profile being created.
	Description *string `json:"description,omitempty"`
	// The name of the profile being created.
	Name string `json:"name"`
}

type _CreateProfilePayload CreateProfilePayload

// NewCreateProfilePayload instantiates a new CreateProfilePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProfilePayload(data map[string]string, name string) *CreateProfilePayload {
	this := CreateProfilePayload{}
	this.Data = data
	this.Name = name
	return &this
}

// NewCreateProfilePayloadWithDefaults instantiates a new CreateProfilePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProfilePayloadWithDefaults() *CreateProfilePayload {
	this := CreateProfilePayload{}
	return &this
}

// GetData returns the Data field value
func (o *CreateProfilePayload) GetData() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateProfilePayload) GetDataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateProfilePayload) SetData(v map[string]string) {
	o.Data = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateProfilePayload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProfilePayload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateProfilePayload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateProfilePayload) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *CreateProfilePayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateProfilePayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateProfilePayload) SetName(v string) {
	o.Name = v
}

func (o CreateProfilePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProfilePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CreateProfilePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProfilePayload := _CreateProfilePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateProfilePayload)

	if err != nil {
		return err
	}

	*o = CreateProfilePayload(varCreateProfilePayload)

	return err
}

type NullableCreateProfilePayload struct {
	value *CreateProfilePayload
	isSet bool
}

func (v NullableCreateProfilePayload) Get() *CreateProfilePayload {
	return v.value
}

func (v *NullableCreateProfilePayload) Set(val *CreateProfilePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProfilePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProfilePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProfilePayload(val *CreateProfilePayload) *NullableCreateProfilePayload {
	return &NullableCreateProfilePayload{value: val, isSet: true}
}

func (v NullableCreateProfilePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProfilePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
