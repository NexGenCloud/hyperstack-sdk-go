/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RefreshTokenPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefreshTokenPayload{}

// RefreshTokenPayload struct for RefreshTokenPayload
type RefreshTokenPayload struct {
	IdToken      string `json:"id_token"`
	RefreshToken string `json:"refresh_token"`
}

type _RefreshTokenPayload RefreshTokenPayload

// NewRefreshTokenPayload instantiates a new RefreshTokenPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefreshTokenPayload(idToken string, refreshToken string) *RefreshTokenPayload {
	this := RefreshTokenPayload{}
	this.IdToken = idToken
	this.RefreshToken = refreshToken
	return &this
}

// NewRefreshTokenPayloadWithDefaults instantiates a new RefreshTokenPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefreshTokenPayloadWithDefaults() *RefreshTokenPayload {
	this := RefreshTokenPayload{}
	return &this
}

// GetIdToken returns the IdToken field value
func (o *RefreshTokenPayload) GetIdToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdToken
}

// GetIdTokenOk returns a tuple with the IdToken field value
// and a boolean to check if the value has been set.
func (o *RefreshTokenPayload) GetIdTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdToken, true
}

// SetIdToken sets field value
func (o *RefreshTokenPayload) SetIdToken(v string) {
	o.IdToken = v
}

// GetRefreshToken returns the RefreshToken field value
func (o *RefreshTokenPayload) GetRefreshToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value
// and a boolean to check if the value has been set.
func (o *RefreshTokenPayload) GetRefreshTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshToken, true
}

// SetRefreshToken sets field value
func (o *RefreshTokenPayload) SetRefreshToken(v string) {
	o.RefreshToken = v
}

func (o RefreshTokenPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefreshTokenPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id_token"] = o.IdToken
	toSerialize["refresh_token"] = o.RefreshToken
	return toSerialize, nil
}

func (o *RefreshTokenPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id_token",
		"refresh_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRefreshTokenPayload := _RefreshTokenPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRefreshTokenPayload)

	if err != nil {
		return err
	}

	*o = RefreshTokenPayload(varRefreshTokenPayload)

	return err
}

type NullableRefreshTokenPayload struct {
	value *RefreshTokenPayload
	isSet bool
}

func (v NullableRefreshTokenPayload) Get() *RefreshTokenPayload {
	return v.value
}

func (v *NullableRefreshTokenPayload) Set(val *RefreshTokenPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshTokenPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshTokenPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshTokenPayload(val *RefreshTokenPayload) *NullableRefreshTokenPayload {
	return &NullableRefreshTokenPayload{value: val, isSet: true}
}

func (v NullableRefreshTokenPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshTokenPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
