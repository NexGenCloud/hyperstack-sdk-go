/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the EditlabelofanexistingVMPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditlabelofanexistingVMPayload{}

// EditlabelofanexistingVMPayload struct for EditlabelofanexistingVMPayload
type EditlabelofanexistingVMPayload struct {
	// Multiple labels can be added by separating with spaces
	Labels []string `json:"labels,omitempty"`
}

// NewEditlabelofanexistingVMPayload instantiates a new EditlabelofanexistingVMPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditlabelofanexistingVMPayload() *EditlabelofanexistingVMPayload {
	this := EditlabelofanexistingVMPayload{}
	return &this
}

// NewEditlabelofanexistingVMPayloadWithDefaults instantiates a new EditlabelofanexistingVMPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditlabelofanexistingVMPayloadWithDefaults() *EditlabelofanexistingVMPayload {
	this := EditlabelofanexistingVMPayload{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *EditlabelofanexistingVMPayload) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditlabelofanexistingVMPayload) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *EditlabelofanexistingVMPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *EditlabelofanexistingVMPayload) SetLabels(v []string) {
	o.Labels = v
}

func (o EditlabelofanexistingVMPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditlabelofanexistingVMPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableEditlabelofanexistingVMPayload struct {
	value *EditlabelofanexistingVMPayload
	isSet bool
}

func (v NullableEditlabelofanexistingVMPayload) Get() *EditlabelofanexistingVMPayload {
	return v.value
}

func (v *NullableEditlabelofanexistingVMPayload) Set(val *EditlabelofanexistingVMPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEditlabelofanexistingVMPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEditlabelofanexistingVMPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditlabelofanexistingVMPayload(val *EditlabelofanexistingVMPayload) *NullableEditlabelofanexistingVMPayload {
	return &NullableEditlabelofanexistingVMPayload{value: val, isSet: true}
}

func (v NullableEditlabelofanexistingVMPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditlabelofanexistingVMPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
