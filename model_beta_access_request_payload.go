/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BetaAccessRequestPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BetaAccessRequestPayload{}

// BetaAccessRequestPayload struct for BetaAccessRequestPayload
type BetaAccessRequestPayload struct {
	// Optional metadata for the request
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Name of the beta program
	Program string `json:"program"`
}

type _BetaAccessRequestPayload BetaAccessRequestPayload

// NewBetaAccessRequestPayload instantiates a new BetaAccessRequestPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBetaAccessRequestPayload(program string) *BetaAccessRequestPayload {
	this := BetaAccessRequestPayload{}
	this.Program = program
	return &this
}

// NewBetaAccessRequestPayloadWithDefaults instantiates a new BetaAccessRequestPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBetaAccessRequestPayloadWithDefaults() *BetaAccessRequestPayload {
	this := BetaAccessRequestPayload{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *BetaAccessRequestPayload) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetaAccessRequestPayload) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *BetaAccessRequestPayload) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *BetaAccessRequestPayload) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetProgram returns the Program field value
func (o *BetaAccessRequestPayload) GetProgram() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Program
}

// GetProgramOk returns a tuple with the Program field value
// and a boolean to check if the value has been set.
func (o *BetaAccessRequestPayload) GetProgramOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Program, true
}

// SetProgram sets field value
func (o *BetaAccessRequestPayload) SetProgram(v string) {
	o.Program = v
}

func (o BetaAccessRequestPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BetaAccessRequestPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["program"] = o.Program
	return toSerialize, nil
}

func (o *BetaAccessRequestPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"program",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBetaAccessRequestPayload := _BetaAccessRequestPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBetaAccessRequestPayload)

	if err != nil {
		return err
	}

	*o = BetaAccessRequestPayload(varBetaAccessRequestPayload)

	return err
}

type NullableBetaAccessRequestPayload struct {
	value *BetaAccessRequestPayload
	isSet bool
}

func (v NullableBetaAccessRequestPayload) Get() *BetaAccessRequestPayload {
	return v.value
}

func (v *NullableBetaAccessRequestPayload) Set(val *BetaAccessRequestPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableBetaAccessRequestPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableBetaAccessRequestPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetaAccessRequestPayload(val *BetaAccessRequestPayload) *NullableBetaAccessRequestPayload {
	return &NullableBetaAccessRequestPayload{value: val, isSet: true}
}

func (v NullableBetaAccessRequestPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetaAccessRequestPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
