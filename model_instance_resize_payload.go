/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the InstanceResizePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceResizePayload{}

// InstanceResizePayload struct for InstanceResizePayload
type InstanceResizePayload struct {
	Flavor     *FlavorObjectFields `json:"flavor,omitempty"`
	FlavorName *string             `json:"flavor_name,omitempty"`
}

// NewInstanceResizePayload instantiates a new InstanceResizePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceResizePayload() *InstanceResizePayload {
	this := InstanceResizePayload{}
	return &this
}

// NewInstanceResizePayloadWithDefaults instantiates a new InstanceResizePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceResizePayloadWithDefaults() *InstanceResizePayload {
	this := InstanceResizePayload{}
	return &this
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *InstanceResizePayload) GetFlavor() FlavorObjectFields {
	if o == nil || IsNil(o.Flavor) {
		var ret FlavorObjectFields
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResizePayload) GetFlavorOk() (*FlavorObjectFields, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *InstanceResizePayload) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given FlavorObjectFields and assigns it to the Flavor field.
func (o *InstanceResizePayload) SetFlavor(v FlavorObjectFields) {
	o.Flavor = &v
}

// GetFlavorName returns the FlavorName field value if set, zero value otherwise.
func (o *InstanceResizePayload) GetFlavorName() string {
	if o == nil || IsNil(o.FlavorName) {
		var ret string
		return ret
	}
	return *o.FlavorName
}

// GetFlavorNameOk returns a tuple with the FlavorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceResizePayload) GetFlavorNameOk() (*string, bool) {
	if o == nil || IsNil(o.FlavorName) {
		return nil, false
	}
	return o.FlavorName, true
}

// HasFlavorName returns a boolean if a field has been set.
func (o *InstanceResizePayload) HasFlavorName() bool {
	if o != nil && !IsNil(o.FlavorName) {
		return true
	}

	return false
}

// SetFlavorName gets a reference to the given string and assigns it to the FlavorName field.
func (o *InstanceResizePayload) SetFlavorName(v string) {
	o.FlavorName = &v
}

func (o InstanceResizePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceResizePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	if !IsNil(o.FlavorName) {
		toSerialize["flavor_name"] = o.FlavorName
	}
	return toSerialize, nil
}

type NullableInstanceResizePayload struct {
	value *InstanceResizePayload
	isSet bool
}

func (v NullableInstanceResizePayload) Get() *InstanceResizePayload {
	return v.value
}

func (v *NullableInstanceResizePayload) Set(val *InstanceResizePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceResizePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceResizePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceResizePayload(val *InstanceResizePayload) *NullableInstanceResizePayload {
	return &NullableInstanceResizePayload{value: val, isSet: true}
}

func (v NullableInstanceResizePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceResizePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
