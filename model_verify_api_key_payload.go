/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VerifyApiKeyPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyApiKeyPayload{}

// VerifyApiKeyPayload struct for VerifyApiKeyPayload
type VerifyApiKeyPayload struct {
	// The direction of traffic that the firewall rule applies to.
	ApiKey string `json:"api_key"`
}

type _VerifyApiKeyPayload VerifyApiKeyPayload

// NewVerifyApiKeyPayload instantiates a new VerifyApiKeyPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyApiKeyPayload(apiKey string) *VerifyApiKeyPayload {
	this := VerifyApiKeyPayload{}
	this.ApiKey = apiKey
	return &this
}

// NewVerifyApiKeyPayloadWithDefaults instantiates a new VerifyApiKeyPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyApiKeyPayloadWithDefaults() *VerifyApiKeyPayload {
	this := VerifyApiKeyPayload{}
	return &this
}

// GetApiKey returns the ApiKey field value
func (o *VerifyApiKeyPayload) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *VerifyApiKeyPayload) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *VerifyApiKeyPayload) SetApiKey(v string) {
	o.ApiKey = v
}

func (o VerifyApiKeyPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyApiKeyPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_key"] = o.ApiKey
	return toSerialize, nil
}

func (o *VerifyApiKeyPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerifyApiKeyPayload := _VerifyApiKeyPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerifyApiKeyPayload)

	if err != nil {
		return err
	}

	*o = VerifyApiKeyPayload(varVerifyApiKeyPayload)

	return err
}

type NullableVerifyApiKeyPayload struct {
	value *VerifyApiKeyPayload
	isSet bool
}

func (v NullableVerifyApiKeyPayload) Get() *VerifyApiKeyPayload {
	return v.value
}

func (v *NullableVerifyApiKeyPayload) Set(val *VerifyApiKeyPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyApiKeyPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyApiKeyPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyApiKeyPayload(val *VerifyApiKeyPayload) *NullableVerifyApiKeyPayload {
	return &NullableVerifyApiKeyPayload{value: val, isSet: true}
}

func (v NullableVerifyApiKeyPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyApiKeyPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
