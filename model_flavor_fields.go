/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the FlavorFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlavorFields{}

// FlavorFields struct for FlavorFields
type FlavorFields struct {
	Cpu            *int32         `json:"cpu,omitempty"`
	CreatedAt      *CustomTime    `json:"created_at,omitempty"`
	Disk           *int32         `json:"disk,omitempty"`
	DisplayName    *string        `json:"display_name,omitempty"`
	Ephemeral      *int32         `json:"ephemeral,omitempty"`
	Gpu            *string        `json:"gpu,omitempty"`
	GpuCount       *int32         `json:"gpu_count,omitempty"`
	Id             *int32         `json:"id,omitempty"`
	Labels         []LableResonse `json:"labels,omitempty"`
	Name           *string        `json:"name,omitempty"`
	Ram            *float32       `json:"ram,omitempty"`
	RegionName     *string        `json:"region_name,omitempty"`
	StockAvailable *bool          `json:"stock_available,omitempty"`
}

// NewFlavorFields instantiates a new FlavorFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlavorFields() *FlavorFields {
	this := FlavorFields{}
	return &this
}

// NewFlavorFieldsWithDefaults instantiates a new FlavorFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlavorFieldsWithDefaults() *FlavorFields {
	this := FlavorFields{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *FlavorFields) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *FlavorFields) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *FlavorFields) SetCpu(v int32) {
	o.Cpu = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FlavorFields) GetCreatedAt() CustomTime {
	if o == nil || IsNil(o.CreatedAt) {
		var ret CustomTime
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetCreatedAtOk() (*CustomTime, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FlavorFields) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given CustomTime and assigns it to the CreatedAt field.
func (o *FlavorFields) SetCreatedAt(v CustomTime) {
	o.CreatedAt = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *FlavorFields) GetDisk() int32 {
	if o == nil || IsNil(o.Disk) {
		var ret int32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetDiskOk() (*int32, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *FlavorFields) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given int32 and assigns it to the Disk field.
func (o *FlavorFields) SetDisk(v int32) {
	o.Disk = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FlavorFields) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FlavorFields) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FlavorFields) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *FlavorFields) GetEphemeral() int32 {
	if o == nil || IsNil(o.Ephemeral) {
		var ret int32
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetEphemeralOk() (*int32, bool) {
	if o == nil || IsNil(o.Ephemeral) {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *FlavorFields) HasEphemeral() bool {
	if o != nil && !IsNil(o.Ephemeral) {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given int32 and assigns it to the Ephemeral field.
func (o *FlavorFields) SetEphemeral(v int32) {
	o.Ephemeral = &v
}

// GetGpu returns the Gpu field value if set, zero value otherwise.
func (o *FlavorFields) GetGpu() string {
	if o == nil || IsNil(o.Gpu) {
		var ret string
		return ret
	}
	return *o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetGpuOk() (*string, bool) {
	if o == nil || IsNil(o.Gpu) {
		return nil, false
	}
	return o.Gpu, true
}

// HasGpu returns a boolean if a field has been set.
func (o *FlavorFields) HasGpu() bool {
	if o != nil && !IsNil(o.Gpu) {
		return true
	}

	return false
}

// SetGpu gets a reference to the given string and assigns it to the Gpu field.
func (o *FlavorFields) SetGpu(v string) {
	o.Gpu = &v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *FlavorFields) GetGpuCount() int32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret int32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetGpuCountOk() (*int32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *FlavorFields) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given int32 and assigns it to the GpuCount field.
func (o *FlavorFields) SetGpuCount(v int32) {
	o.GpuCount = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FlavorFields) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FlavorFields) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *FlavorFields) SetId(v int32) {
	o.Id = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *FlavorFields) GetLabels() []LableResonse {
	if o == nil || IsNil(o.Labels) {
		var ret []LableResonse
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetLabelsOk() ([]LableResonse, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *FlavorFields) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []LableResonse and assigns it to the Labels field.
func (o *FlavorFields) SetLabels(v []LableResonse) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FlavorFields) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FlavorFields) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FlavorFields) SetName(v string) {
	o.Name = &v
}

// GetRam returns the Ram field value if set, zero value otherwise.
func (o *FlavorFields) GetRam() float32 {
	if o == nil || IsNil(o.Ram) {
		var ret float32
		return ret
	}
	return *o.Ram
}

// GetRamOk returns a tuple with the Ram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetRamOk() (*float32, bool) {
	if o == nil || IsNil(o.Ram) {
		return nil, false
	}
	return o.Ram, true
}

// HasRam returns a boolean if a field has been set.
func (o *FlavorFields) HasRam() bool {
	if o != nil && !IsNil(o.Ram) {
		return true
	}

	return false
}

// SetRam gets a reference to the given float32 and assigns it to the Ram field.
func (o *FlavorFields) SetRam(v float32) {
	o.Ram = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *FlavorFields) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *FlavorFields) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *FlavorFields) SetRegionName(v string) {
	o.RegionName = &v
}

// GetStockAvailable returns the StockAvailable field value if set, zero value otherwise.
func (o *FlavorFields) GetStockAvailable() bool {
	if o == nil || IsNil(o.StockAvailable) {
		var ret bool
		return ret
	}
	return *o.StockAvailable
}

// GetStockAvailableOk returns a tuple with the StockAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlavorFields) GetStockAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.StockAvailable) {
		return nil, false
	}
	return o.StockAvailable, true
}

// HasStockAvailable returns a boolean if a field has been set.
func (o *FlavorFields) HasStockAvailable() bool {
	if o != nil && !IsNil(o.StockAvailable) {
		return true
	}

	return false
}

// SetStockAvailable gets a reference to the given bool and assigns it to the StockAvailable field.
func (o *FlavorFields) SetStockAvailable(v bool) {
	o.StockAvailable = &v
}

func (o FlavorFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlavorFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Ephemeral) {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	if !IsNil(o.Gpu) {
		toSerialize["gpu"] = o.Gpu
	}
	if !IsNil(o.GpuCount) {
		toSerialize["gpu_count"] = o.GpuCount
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ram) {
		toSerialize["ram"] = o.Ram
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.StockAvailable) {
		toSerialize["stock_available"] = o.StockAvailable
	}
	return toSerialize, nil
}

type NullableFlavorFields struct {
	value *FlavorFields
	isSet bool
}

func (v NullableFlavorFields) Get() *FlavorFields {
	return v.value
}

func (v *NullableFlavorFields) Set(val *FlavorFields) {
	v.value = val
	v.isSet = true
}

func (v NullableFlavorFields) IsSet() bool {
	return v.isSet
}

func (v *NullableFlavorFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlavorFields(val *FlavorFields) *NullableFlavorFields {
	return &NullableFlavorFields{value: val, isSet: true}
}

func (v NullableFlavorFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlavorFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
