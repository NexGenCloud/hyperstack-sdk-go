/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the FieldChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldChange{}

// FieldChange struct for FieldChange
type FieldChange struct {
	// The name of the field that was changed
	FieldName *string `json:"field_name,omitempty"`
	// The new value of the field
	NewValue *string `json:"new_value,omitempty"`
	// The old value of the field
	OldValue *string `json:"old_value,omitempty"`
}

// NewFieldChange instantiates a new FieldChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldChange() *FieldChange {
	this := FieldChange{}
	return &this
}

// NewFieldChangeWithDefaults instantiates a new FieldChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldChangeWithDefaults() *FieldChange {
	this := FieldChange{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *FieldChange) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldChange) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *FieldChange) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *FieldChange) SetFieldName(v string) {
	o.FieldName = &v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise.
func (o *FieldChange) GetNewValue() string {
	if o == nil || IsNil(o.NewValue) {
		var ret string
		return ret
	}
	return *o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldChange) GetNewValueOk() (*string, bool) {
	if o == nil || IsNil(o.NewValue) {
		return nil, false
	}
	return o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *FieldChange) HasNewValue() bool {
	if o != nil && !IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given string and assigns it to the NewValue field.
func (o *FieldChange) SetNewValue(v string) {
	o.NewValue = &v
}

// GetOldValue returns the OldValue field value if set, zero value otherwise.
func (o *FieldChange) GetOldValue() string {
	if o == nil || IsNil(o.OldValue) {
		var ret string
		return ret
	}
	return *o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldChange) GetOldValueOk() (*string, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *FieldChange) HasOldValue() bool {
	if o != nil && !IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given string and assigns it to the OldValue field.
func (o *FieldChange) SetOldValue(v string) {
	o.OldValue = &v
}

func (o FieldChange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["field_name"] = o.FieldName
	}
	if !IsNil(o.NewValue) {
		toSerialize["new_value"] = o.NewValue
	}
	if !IsNil(o.OldValue) {
		toSerialize["old_value"] = o.OldValue
	}
	return toSerialize, nil
}

type NullableFieldChange struct {
	value *FieldChange
	isSet bool
}

func (v NullableFieldChange) Get() *FieldChange {
	return v.value
}

func (v *NullableFieldChange) Set(val *FieldChange) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldChange) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldChange(val *FieldChange) *NullableFieldChange {
	return &NullableFieldChange{value: val, isSet: true}
}

func (v NullableFieldChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
