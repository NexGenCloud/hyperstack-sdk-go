/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the ImageFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageFields{}

// ImageFields struct for ImageFields
type ImageFields struct {
	Description *string        `json:"description,omitempty"`
	DisplaySize *string        `json:"display_size,omitempty"`
	Id          *int32         `json:"id,omitempty"`
	IsPublic    *bool          `json:"is_public,omitempty"`
	Labels      []LableResonse `json:"labels,omitempty"`
	Name        *string        `json:"name,omitempty"`
	RegionName  *string        `json:"region_name,omitempty"`
	Size        *int32         `json:"size,omitempty"`
	Type        *string        `json:"type,omitempty"`
	Version     *string        `json:"version,omitempty"`
}

// NewImageFields instantiates a new ImageFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageFields() *ImageFields {
	this := ImageFields{}
	return &this
}

// NewImageFieldsWithDefaults instantiates a new ImageFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageFieldsWithDefaults() *ImageFields {
	this := ImageFields{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImageFields) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImageFields) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImageFields) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySize returns the DisplaySize field value if set, zero value otherwise.
func (o *ImageFields) GetDisplaySize() string {
	if o == nil || IsNil(o.DisplaySize) {
		var ret string
		return ret
	}
	return *o.DisplaySize
}

// GetDisplaySizeOk returns a tuple with the DisplaySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetDisplaySizeOk() (*string, bool) {
	if o == nil || IsNil(o.DisplaySize) {
		return nil, false
	}
	return o.DisplaySize, true
}

// HasDisplaySize returns a boolean if a field has been set.
func (o *ImageFields) HasDisplaySize() bool {
	if o != nil && !IsNil(o.DisplaySize) {
		return true
	}

	return false
}

// SetDisplaySize gets a reference to the given string and assigns it to the DisplaySize field.
func (o *ImageFields) SetDisplaySize(v string) {
	o.DisplaySize = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImageFields) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImageFields) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ImageFields) SetId(v int32) {
	o.Id = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *ImageFields) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *ImageFields) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *ImageFields) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ImageFields) GetLabels() []LableResonse {
	if o == nil || IsNil(o.Labels) {
		var ret []LableResonse
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetLabelsOk() ([]LableResonse, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ImageFields) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []LableResonse and assigns it to the Labels field.
func (o *ImageFields) SetLabels(v []LableResonse) {
	o.Labels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImageFields) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImageFields) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImageFields) SetName(v string) {
	o.Name = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *ImageFields) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *ImageFields) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *ImageFields) SetRegionName(v string) {
	o.RegionName = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *ImageFields) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *ImageFields) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *ImageFields) SetSize(v int32) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ImageFields) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ImageFields) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ImageFields) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ImageFields) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageFields) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ImageFields) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ImageFields) SetVersion(v string) {
	o.Version = &v
}

func (o ImageFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySize) {
		toSerialize["display_size"] = o.DisplaySize
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableImageFields struct {
	value *ImageFields
	isSet bool
}

func (v NullableImageFields) Get() *ImageFields {
	return v.value
}

func (v *NullableImageFields) Set(val *ImageFields) {
	v.value = val
	v.isSet = true
}

func (v NullableImageFields) IsSet() bool {
	return v.isSet
}

func (v *NullableImageFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageFields(val *ImageFields) *NullableImageFields {
	return &NullableImageFields{value: val, isSet: true}
}

func (v NullableImageFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
