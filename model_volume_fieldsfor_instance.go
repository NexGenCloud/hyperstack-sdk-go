/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the VolumeFieldsforInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeFieldsforInstance{}

// VolumeFieldsforInstance struct for VolumeFieldsforInstance
type VolumeFieldsforInstance struct {
	Bootable    *bool   `json:"bootable,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *int32  `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Size        *int32  `json:"size,omitempty"`
	VolumeType  *string `json:"volume_type,omitempty"`
}

// NewVolumeFieldsforInstance instantiates a new VolumeFieldsforInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeFieldsforInstance() *VolumeFieldsforInstance {
	this := VolumeFieldsforInstance{}
	return &this
}

// NewVolumeFieldsforInstanceWithDefaults instantiates a new VolumeFieldsforInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeFieldsforInstanceWithDefaults() *VolumeFieldsforInstance {
	this := VolumeFieldsforInstance{}
	return &this
}

// GetBootable returns the Bootable field value if set, zero value otherwise.
func (o *VolumeFieldsforInstance) GetBootable() bool {
	if o == nil || IsNil(o.Bootable) {
		var ret bool
		return ret
	}
	return *o.Bootable
}

// GetBootableOk returns a tuple with the Bootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFieldsforInstance) GetBootableOk() (*bool, bool) {
	if o == nil || IsNil(o.Bootable) {
		return nil, false
	}
	return o.Bootable, true
}

// HasBootable returns a boolean if a field has been set.
func (o *VolumeFieldsforInstance) HasBootable() bool {
	if o != nil && !IsNil(o.Bootable) {
		return true
	}

	return false
}

// SetBootable gets a reference to the given bool and assigns it to the Bootable field.
func (o *VolumeFieldsforInstance) SetBootable(v bool) {
	o.Bootable = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VolumeFieldsforInstance) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFieldsforInstance) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VolumeFieldsforInstance) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VolumeFieldsforInstance) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VolumeFieldsforInstance) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFieldsforInstance) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VolumeFieldsforInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *VolumeFieldsforInstance) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VolumeFieldsforInstance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFieldsforInstance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VolumeFieldsforInstance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VolumeFieldsforInstance) SetName(v string) {
	o.Name = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *VolumeFieldsforInstance) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFieldsforInstance) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *VolumeFieldsforInstance) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *VolumeFieldsforInstance) SetSize(v int32) {
	o.Size = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *VolumeFieldsforInstance) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType) {
		var ret string
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeFieldsforInstance) GetVolumeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *VolumeFieldsforInstance) HasVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given string and assigns it to the VolumeType field.
func (o *VolumeFieldsforInstance) SetVolumeType(v string) {
	o.VolumeType = &v
}

func (o VolumeFieldsforInstance) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeFieldsforInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bootable) {
		toSerialize["bootable"] = o.Bootable
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.VolumeType) {
		toSerialize["volume_type"] = o.VolumeType
	}
	return toSerialize, nil
}

type NullableVolumeFieldsforInstance struct {
	value *VolumeFieldsforInstance
	isSet bool
}

func (v NullableVolumeFieldsforInstance) Get() *VolumeFieldsforInstance {
	return v.value
}

func (v *NullableVolumeFieldsforInstance) Set(val *VolumeFieldsforInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeFieldsforInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeFieldsforInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeFieldsforInstance(val *VolumeFieldsforInstance) *NullableVolumeFieldsforInstance {
	return &NullableVolumeFieldsforInstance{value: val, isSet: true}
}

func (v NullableVolumeFieldsforInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeFieldsforInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
