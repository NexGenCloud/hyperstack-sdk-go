/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ContractEventCreateModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractEventCreateModel{}

// ContractEventCreateModel struct for ContractEventCreateModel
type ContractEventCreateModel struct {
	// Message for the event
	Message string `json:"message"`
	// Reason for the event
	Reason string `json:"reason"`
	// Event type
	Type string `json:"type"`
}

type _ContractEventCreateModel ContractEventCreateModel

// NewContractEventCreateModel instantiates a new ContractEventCreateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractEventCreateModel(message string, reason string, type_ string) *ContractEventCreateModel {
	this := ContractEventCreateModel{}
	this.Message = message
	this.Reason = reason
	this.Type = type_
	return &this
}

// NewContractEventCreateModelWithDefaults instantiates a new ContractEventCreateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractEventCreateModelWithDefaults() *ContractEventCreateModel {
	this := ContractEventCreateModel{}
	return &this
}

// GetMessage returns the Message field value
func (o *ContractEventCreateModel) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ContractEventCreateModel) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ContractEventCreateModel) SetMessage(v string) {
	o.Message = v
}

// GetReason returns the Reason field value
func (o *ContractEventCreateModel) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ContractEventCreateModel) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ContractEventCreateModel) SetReason(v string) {
	o.Reason = v
}

// GetType returns the Type field value
func (o *ContractEventCreateModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContractEventCreateModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContractEventCreateModel) SetType(v string) {
	o.Type = v
}

func (o ContractEventCreateModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractEventCreateModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["reason"] = o.Reason
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ContractEventCreateModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"reason",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractEventCreateModel := _ContractEventCreateModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractEventCreateModel)

	if err != nil {
		return err
	}

	*o = ContractEventCreateModel(varContractEventCreateModel)

	return err
}

type NullableContractEventCreateModel struct {
	value *ContractEventCreateModel
	isSet bool
}

func (v NullableContractEventCreateModel) Get() *ContractEventCreateModel {
	return v.value
}

func (v *NullableContractEventCreateModel) Set(val *ContractEventCreateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableContractEventCreateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableContractEventCreateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractEventCreateModel(val *ContractEventCreateModel) *NullableContractEventCreateModel {
	return &NullableContractEventCreateModel{value: val, isSet: true}
}

func (v NullableContractEventCreateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractEventCreateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
