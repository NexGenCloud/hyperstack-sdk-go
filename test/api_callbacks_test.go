/*
Infrahub-API

Testing CallbacksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hyperstack

import (
	"context"
	"testing"

	openapiclient "github.com/NexGenCloud/hyperstack-sdk-go/hyperstack"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_hyperstack_CallbacksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CallbacksAPIService AttachCallbackToVirtualMachine", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.CallbacksAPI.AttachCallbackToVirtualMachine(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService AttachCallbackToVolume", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volumeId int32

		resp, httpRes, err := apiClient.CallbacksAPI.AttachCallbackToVolume(context.Background(), volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService DeleteVirtualMachineCallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.CallbacksAPI.DeleteVirtualMachineCallback(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService DeleteVolumeCallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volumeId int32

		resp, httpRes, err := apiClient.CallbacksAPI.DeleteVolumeCallback(context.Background(), volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService UpdateVirtualMachineCallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.CallbacksAPI.UpdateVirtualMachineCallback(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CallbacksAPIService UpdateVolumeCallback", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var volumeId int32

		resp, httpRes, err := apiClient.CallbacksAPI.UpdateVolumeCallback(context.Background(), volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
