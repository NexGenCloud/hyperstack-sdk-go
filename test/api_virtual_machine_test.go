/*
Infrahub-API

Testing VirtualMachineAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hyperstack

import (
	"context"
	"testing"

	openapiclient "github.com/NexGenCloud/hyperstack-sdk-go/hyperstack"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_hyperstack_VirtualMachineAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VirtualMachineAPIService DeleteInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.DeleteInstance(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService DeleteSecurityRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32
		var sgRuleId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.DeleteSecurityRule(context.Background(), vmId, sgRuleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService FetchVirtualMachineNameAvailability", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.VirtualMachineAPI.FetchVirtualMachineNameAvailability(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetContractInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var contractId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetContractInstances(context.Background(), contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstance2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstance2(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstance3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstance3(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstance4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstance4(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstance5", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstance5(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstanceHibernate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstanceHibernate(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstanceHibernateRestore", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstanceHibernateRestore(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstanceLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstanceLogs(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService GetInstanceMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.GetInstanceMetrics(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PostInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VirtualMachineAPI.PostInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PostInstanceAttachFirewalls", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.PostInstanceAttachFirewalls(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PostInstanceLogs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.PostInstanceLogs(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PostInstanceResize", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.PostInstanceResize(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PostSecurityRule", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.PostSecurityRule(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PostSnapshots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.PostSnapshots(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VirtualMachineAPIService PutLabels", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vmId int32

		resp, httpRes, err := apiClient.VirtualMachineAPI.PutLabels(context.Background(), vmId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
