/*
Infrahub-API

Testing RbacRoleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hyperstack

import (
	"context"
	"testing"

	openapiclient "github.com/NexGenCloud/hyperstack-sdk-go/hyperstack"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_hyperstack_RbacRoleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

<<<<<<< HEAD
	t.Run("Test RbacRoleAPIService CreateRBACRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RbacRoleAPI.CreateRBACRole(context.Background()).Execute()
=======
	t.Run("Test RbacRoleAPIService CreateRbacRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RbacRoleAPI.CreateRbacRole(context.Background()).Execute()
>>>>>>> main

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

<<<<<<< HEAD
	t.Run("Test RbacRoleAPIService DeleteRBACRole", func(t *testing.T) {
=======
	t.Run("Test RbacRoleAPIService DeleteRbacRole", func(t *testing.T) {
>>>>>>> main

		t.Skip("skip test") // remove to run test

		var id int32

<<<<<<< HEAD
		resp, httpRes, err := apiClient.RbacRoleAPI.DeleteRBACRole(context.Background(), id).Execute()
=======
		resp, httpRes, err := apiClient.RbacRoleAPI.DeleteRbacRole(context.Background(), id).Execute()
>>>>>>> main

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

<<<<<<< HEAD
	t.Run("Test RbacRoleAPIService ListRBACRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RbacRoleAPI.ListRBACRoles(context.Background()).Execute()
=======
	t.Run("Test RbacRoleAPIService ListRbacRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RbacRoleAPI.ListRbacRoles(context.Background()).Execute()
>>>>>>> main

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

<<<<<<< HEAD
	t.Run("Test RbacRoleAPIService RetrieveRBACRoleDetails", func(t *testing.T) {
=======
	t.Run("Test RbacRoleAPIService RetrieveRbacRoleDetails", func(t *testing.T) {
>>>>>>> main

		t.Skip("skip test") // remove to run test

		var id int32

<<<<<<< HEAD
		resp, httpRes, err := apiClient.RbacRoleAPI.RetrieveRBACRoleDetails(context.Background(), id).Execute()
=======
		resp, httpRes, err := apiClient.RbacRoleAPI.RetrieveRbacRoleDetails(context.Background(), id).Execute()
>>>>>>> main

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

<<<<<<< HEAD
	t.Run("Test RbacRoleAPIService UpdateRBACRole", func(t *testing.T) {
=======
	t.Run("Test RbacRoleAPIService UpdateRbacRole", func(t *testing.T) {
>>>>>>> main

		t.Skip("skip test") // remove to run test

		var id int32

<<<<<<< HEAD
		resp, httpRes, err := apiClient.RbacRoleAPI.UpdateRBACRole(context.Background(), id).Execute()
=======
		resp, httpRes, err := apiClient.RbacRoleAPI.UpdateRbacRole(context.Background(), id).Execute()
>>>>>>> main

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
