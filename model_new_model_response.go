/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the NewModelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewModelResponse{}

// NewModelResponse struct for NewModelResponse
type NewModelResponse struct {
	Available      *string                    `json:"available,omitempty"`
	Configurations *NewConfigurationsResponse `json:"configurations,omitempty"`
	Model          *string                    `json:"model,omitempty"`
	Planned100Days *string                    `json:"planned_100_days,omitempty"`
	Planned30Days  *string                    `json:"planned_30_days,omitempty"`
	Planned7Days   *string                    `json:"planned_7_days,omitempty"`
}

// NewNewModelResponse instantiates a new NewModelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewModelResponse() *NewModelResponse {
	this := NewModelResponse{}
	return &this
}

// NewNewModelResponseWithDefaults instantiates a new NewModelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewModelResponseWithDefaults() *NewModelResponse {
	this := NewModelResponse{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *NewModelResponse) GetAvailable() string {
	if o == nil || IsNil(o.Available) {
		var ret string
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewModelResponse) GetAvailableOk() (*string, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *NewModelResponse) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given string and assigns it to the Available field.
func (o *NewModelResponse) SetAvailable(v string) {
	o.Available = &v
}

// GetConfigurations returns the Configurations field value if set, zero value otherwise.
func (o *NewModelResponse) GetConfigurations() NewConfigurationsResponse {
	if o == nil || IsNil(o.Configurations) {
		var ret NewConfigurationsResponse
		return ret
	}
	return *o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewModelResponse) GetConfigurationsOk() (*NewConfigurationsResponse, bool) {
	if o == nil || IsNil(o.Configurations) {
		return nil, false
	}
	return o.Configurations, true
}

// HasConfigurations returns a boolean if a field has been set.
func (o *NewModelResponse) HasConfigurations() bool {
	if o != nil && !IsNil(o.Configurations) {
		return true
	}

	return false
}

// SetConfigurations gets a reference to the given NewConfigurationsResponse and assigns it to the Configurations field.
func (o *NewModelResponse) SetConfigurations(v NewConfigurationsResponse) {
	o.Configurations = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *NewModelResponse) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewModelResponse) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *NewModelResponse) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *NewModelResponse) SetModel(v string) {
	o.Model = &v
}

// GetPlanned100Days returns the Planned100Days field value if set, zero value otherwise.
func (o *NewModelResponse) GetPlanned100Days() string {
	if o == nil || IsNil(o.Planned100Days) {
		var ret string
		return ret
	}
	return *o.Planned100Days
}

// GetPlanned100DaysOk returns a tuple with the Planned100Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewModelResponse) GetPlanned100DaysOk() (*string, bool) {
	if o == nil || IsNil(o.Planned100Days) {
		return nil, false
	}
	return o.Planned100Days, true
}

// HasPlanned100Days returns a boolean if a field has been set.
func (o *NewModelResponse) HasPlanned100Days() bool {
	if o != nil && !IsNil(o.Planned100Days) {
		return true
	}

	return false
}

// SetPlanned100Days gets a reference to the given string and assigns it to the Planned100Days field.
func (o *NewModelResponse) SetPlanned100Days(v string) {
	o.Planned100Days = &v
}

// GetPlanned30Days returns the Planned30Days field value if set, zero value otherwise.
func (o *NewModelResponse) GetPlanned30Days() string {
	if o == nil || IsNil(o.Planned30Days) {
		var ret string
		return ret
	}
	return *o.Planned30Days
}

// GetPlanned30DaysOk returns a tuple with the Planned30Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewModelResponse) GetPlanned30DaysOk() (*string, bool) {
	if o == nil || IsNil(o.Planned30Days) {
		return nil, false
	}
	return o.Planned30Days, true
}

// HasPlanned30Days returns a boolean if a field has been set.
func (o *NewModelResponse) HasPlanned30Days() bool {
	if o != nil && !IsNil(o.Planned30Days) {
		return true
	}

	return false
}

// SetPlanned30Days gets a reference to the given string and assigns it to the Planned30Days field.
func (o *NewModelResponse) SetPlanned30Days(v string) {
	o.Planned30Days = &v
}

// GetPlanned7Days returns the Planned7Days field value if set, zero value otherwise.
func (o *NewModelResponse) GetPlanned7Days() string {
	if o == nil || IsNil(o.Planned7Days) {
		var ret string
		return ret
	}
	return *o.Planned7Days
}

// GetPlanned7DaysOk returns a tuple with the Planned7Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewModelResponse) GetPlanned7DaysOk() (*string, bool) {
	if o == nil || IsNil(o.Planned7Days) {
		return nil, false
	}
	return o.Planned7Days, true
}

// HasPlanned7Days returns a boolean if a field has been set.
func (o *NewModelResponse) HasPlanned7Days() bool {
	if o != nil && !IsNil(o.Planned7Days) {
		return true
	}

	return false
}

// SetPlanned7Days gets a reference to the given string and assigns it to the Planned7Days field.
func (o *NewModelResponse) SetPlanned7Days(v string) {
	o.Planned7Days = &v
}

func (o NewModelResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewModelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Configurations) {
		toSerialize["configurations"] = o.Configurations
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Planned100Days) {
		toSerialize["planned_100_days"] = o.Planned100Days
	}
	if !IsNil(o.Planned30Days) {
		toSerialize["planned_30_days"] = o.Planned30Days
	}
	if !IsNil(o.Planned7Days) {
		toSerialize["planned_7_days"] = o.Planned7Days
	}
	return toSerialize, nil
}

type NullableNewModelResponse struct {
	value *NewModelResponse
	isSet bool
}

func (v NullableNewModelResponse) Get() *NewModelResponse {
	return v.value
}

func (v *NullableNewModelResponse) Set(val *NewModelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNewModelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNewModelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewModelResponse(val *NewModelResponse) *NullableNewModelResponse {
	return &NullableNewModelResponse{value: val, isSet: true}
}

func (v NullableNewModelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewModelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
