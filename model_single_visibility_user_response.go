/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SingleVisibilityUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleVisibilityUserResponse{}

// SingleVisibilityUserResponse struct for SingleVisibilityUserResponse
type SingleVisibilityUserResponse struct {
	Id           int32 `json:"id"`
	StockVisible bool  `json:"stock_visible"`
	UserId       int32 `json:"user_id"`
}

type _SingleVisibilityUserResponse SingleVisibilityUserResponse

// NewSingleVisibilityUserResponse instantiates a new SingleVisibilityUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleVisibilityUserResponse(id int32, stockVisible bool, userId int32) *SingleVisibilityUserResponse {
	this := SingleVisibilityUserResponse{}
	this.Id = id
	this.StockVisible = stockVisible
	this.UserId = userId
	return &this
}

// NewSingleVisibilityUserResponseWithDefaults instantiates a new SingleVisibilityUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleVisibilityUserResponseWithDefaults() *SingleVisibilityUserResponse {
	this := SingleVisibilityUserResponse{}
	return &this
}

// GetId returns the Id field value
func (o *SingleVisibilityUserResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SingleVisibilityUserResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SingleVisibilityUserResponse) SetId(v int32) {
	o.Id = v
}

// GetStockVisible returns the StockVisible field value
func (o *SingleVisibilityUserResponse) GetStockVisible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StockVisible
}

// GetStockVisibleOk returns a tuple with the StockVisible field value
// and a boolean to check if the value has been set.
func (o *SingleVisibilityUserResponse) GetStockVisibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StockVisible, true
}

// SetStockVisible sets field value
func (o *SingleVisibilityUserResponse) SetStockVisible(v bool) {
	o.StockVisible = v
}

// GetUserId returns the UserId field value
func (o *SingleVisibilityUserResponse) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *SingleVisibilityUserResponse) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *SingleVisibilityUserResponse) SetUserId(v int32) {
	o.UserId = v
}

func (o SingleVisibilityUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleVisibilityUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["stock_visible"] = o.StockVisible
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *SingleVisibilityUserResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"stock_visible",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSingleVisibilityUserResponse := _SingleVisibilityUserResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSingleVisibilityUserResponse)

	if err != nil {
		return err
	}

	*o = SingleVisibilityUserResponse(varSingleVisibilityUserResponse)

	return err
}

type NullableSingleVisibilityUserResponse struct {
	value *SingleVisibilityUserResponse
	isSet bool
}

func (v NullableSingleVisibilityUserResponse) Get() *SingleVisibilityUserResponse {
	return v.value
}

func (v *NullableSingleVisibilityUserResponse) Set(val *SingleVisibilityUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleVisibilityUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleVisibilityUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleVisibilityUserResponse(val *SingleVisibilityUserResponse) *NullableSingleVisibilityUserResponse {
	return &NullableSingleVisibilityUserResponse{value: val, isSet: true}
}

func (v NullableSingleVisibilityUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleVisibilityUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
