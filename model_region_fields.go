/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the RegionFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionFields{}

// RegionFields struct for RegionFields
type RegionFields struct {
	Country     *string `json:"country,omitempty"`
	Description *string `json:"description,omitempty"`
	// Green status
	GreenStatus *string `json:"green_status,omitempty"`
	Id          *int32  `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// NewRegionFields instantiates a new RegionFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionFields() *RegionFields {
	this := RegionFields{}
	return &this
}

// NewRegionFieldsWithDefaults instantiates a new RegionFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionFieldsWithDefaults() *RegionFields {
	this := RegionFields{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *RegionFields) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionFields) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *RegionFields) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *RegionFields) SetCountry(v string) {
	o.Country = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegionFields) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionFields) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegionFields) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegionFields) SetDescription(v string) {
	o.Description = &v
}

// GetGreenStatus returns the GreenStatus field value if set, zero value otherwise.
func (o *RegionFields) GetGreenStatus() string {
	if o == nil || IsNil(o.GreenStatus) {
		var ret string
		return ret
	}
	return *o.GreenStatus
}

// GetGreenStatusOk returns a tuple with the GreenStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionFields) GetGreenStatusOk() (*string, bool) {
	if o == nil || IsNil(o.GreenStatus) {
		return nil, false
	}
	return o.GreenStatus, true
}

// HasGreenStatus returns a boolean if a field has been set.
func (o *RegionFields) HasGreenStatus() bool {
	if o != nil && !IsNil(o.GreenStatus) {
		return true
	}

	return false
}

// SetGreenStatus gets a reference to the given string and assigns it to the GreenStatus field.
func (o *RegionFields) SetGreenStatus(v string) {
	o.GreenStatus = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegionFields) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionFields) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegionFields) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RegionFields) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RegionFields) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegionFields) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RegionFields) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RegionFields) SetName(v string) {
	o.Name = &v
}

func (o RegionFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.GreenStatus) {
		toSerialize["green_status"] = o.GreenStatus
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableRegionFields struct {
	value *RegionFields
	isSet bool
}

func (v NullableRegionFields) Get() *RegionFields {
	return v.value
}

func (v *NullableRegionFields) Set(val *RegionFields) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionFields) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionFields(val *RegionFields) *NullableRegionFields {
	return &NullableRegionFields{value: val, isSet: true}
}

func (v NullableRegionFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
