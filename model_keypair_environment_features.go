/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the KeypairEnvironmentFeatures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeypairEnvironmentFeatures{}

// KeypairEnvironmentFeatures struct for KeypairEnvironmentFeatures
type KeypairEnvironmentFeatures struct {
	GreenStatus      *string `json:"green_status,omitempty"`
	NetworkOptimised *bool   `json:"network_optimised,omitempty"`
}

// NewKeypairEnvironmentFeatures instantiates a new KeypairEnvironmentFeatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeypairEnvironmentFeatures() *KeypairEnvironmentFeatures {
	this := KeypairEnvironmentFeatures{}
	return &this
}

// NewKeypairEnvironmentFeaturesWithDefaults instantiates a new KeypairEnvironmentFeatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeypairEnvironmentFeaturesWithDefaults() *KeypairEnvironmentFeatures {
	this := KeypairEnvironmentFeatures{}
	return &this
}

// GetGreenStatus returns the GreenStatus field value if set, zero value otherwise.
func (o *KeypairEnvironmentFeatures) GetGreenStatus() string {
	if o == nil || IsNil(o.GreenStatus) {
		var ret string
		return ret
	}
	return *o.GreenStatus
}

// GetGreenStatusOk returns a tuple with the GreenStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeypairEnvironmentFeatures) GetGreenStatusOk() (*string, bool) {
	if o == nil || IsNil(o.GreenStatus) {
		return nil, false
	}
	return o.GreenStatus, true
}

// HasGreenStatus returns a boolean if a field has been set.
func (o *KeypairEnvironmentFeatures) HasGreenStatus() bool {
	if o != nil && !IsNil(o.GreenStatus) {
		return true
	}

	return false
}

// SetGreenStatus gets a reference to the given string and assigns it to the GreenStatus field.
func (o *KeypairEnvironmentFeatures) SetGreenStatus(v string) {
	o.GreenStatus = &v
}

// GetNetworkOptimised returns the NetworkOptimised field value if set, zero value otherwise.
func (o *KeypairEnvironmentFeatures) GetNetworkOptimised() bool {
	if o == nil || IsNil(o.NetworkOptimised) {
		var ret bool
		return ret
	}
	return *o.NetworkOptimised
}

// GetNetworkOptimisedOk returns a tuple with the NetworkOptimised field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeypairEnvironmentFeatures) GetNetworkOptimisedOk() (*bool, bool) {
	if o == nil || IsNil(o.NetworkOptimised) {
		return nil, false
	}
	return o.NetworkOptimised, true
}

// HasNetworkOptimised returns a boolean if a field has been set.
func (o *KeypairEnvironmentFeatures) HasNetworkOptimised() bool {
	if o != nil && !IsNil(o.NetworkOptimised) {
		return true
	}

	return false
}

// SetNetworkOptimised gets a reference to the given bool and assigns it to the NetworkOptimised field.
func (o *KeypairEnvironmentFeatures) SetNetworkOptimised(v bool) {
	o.NetworkOptimised = &v
}

func (o KeypairEnvironmentFeatures) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeypairEnvironmentFeatures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GreenStatus) {
		toSerialize["green_status"] = o.GreenStatus
	}
	if !IsNil(o.NetworkOptimised) {
		toSerialize["network_optimised"] = o.NetworkOptimised
	}
	return toSerialize, nil
}

type NullableKeypairEnvironmentFeatures struct {
	value *KeypairEnvironmentFeatures
	isSet bool
}

func (v NullableKeypairEnvironmentFeatures) Get() *KeypairEnvironmentFeatures {
	return v.value
}

func (v *NullableKeypairEnvironmentFeatures) Set(val *KeypairEnvironmentFeatures) {
	v.value = val
	v.isSet = true
}

func (v NullableKeypairEnvironmentFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableKeypairEnvironmentFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeypairEnvironmentFeatures(val *KeypairEnvironmentFeatures) *NullableKeypairEnvironmentFeatures {
	return &NullableKeypairEnvironmentFeatures{value: val, isSet: true}
}

func (v NullableKeypairEnvironmentFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeypairEnvironmentFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
