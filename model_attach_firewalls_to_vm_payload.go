/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AttachFirewallsToVMPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachFirewallsToVMPayload{}

// AttachFirewallsToVMPayload struct for AttachFirewallsToVMPayload
type AttachFirewallsToVMPayload struct {
	// Ids of the firewalls to be attached with a virtual machine.
	Firewalls []int32 `json:"firewalls"`
}

type _AttachFirewallsToVMPayload AttachFirewallsToVMPayload

// NewAttachFirewallsToVMPayload instantiates a new AttachFirewallsToVMPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachFirewallsToVMPayload(firewalls []int32) *AttachFirewallsToVMPayload {
	this := AttachFirewallsToVMPayload{}
	this.Firewalls = firewalls
	return &this
}

// NewAttachFirewallsToVMPayloadWithDefaults instantiates a new AttachFirewallsToVMPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachFirewallsToVMPayloadWithDefaults() *AttachFirewallsToVMPayload {
	this := AttachFirewallsToVMPayload{}
	return &this
}

// GetFirewalls returns the Firewalls field value
func (o *AttachFirewallsToVMPayload) GetFirewalls() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Firewalls
}

// GetFirewallsOk returns a tuple with the Firewalls field value
// and a boolean to check if the value has been set.
func (o *AttachFirewallsToVMPayload) GetFirewallsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Firewalls, true
}

// SetFirewalls sets field value
func (o *AttachFirewallsToVMPayload) SetFirewalls(v []int32) {
	o.Firewalls = v
}

func (o AttachFirewallsToVMPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachFirewallsToVMPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firewalls"] = o.Firewalls
	return toSerialize, nil
}

func (o *AttachFirewallsToVMPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firewalls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachFirewallsToVMPayload := _AttachFirewallsToVMPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachFirewallsToVMPayload)

	if err != nil {
		return err
	}

	*o = AttachFirewallsToVMPayload(varAttachFirewallsToVMPayload)

	return err
}

type NullableAttachFirewallsToVMPayload struct {
	value *AttachFirewallsToVMPayload
	isSet bool
}

func (v NullableAttachFirewallsToVMPayload) Get() *AttachFirewallsToVMPayload {
	return v.value
}

func (v *NullableAttachFirewallsToVMPayload) Set(val *AttachFirewallsToVMPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachFirewallsToVMPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachFirewallsToVMPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachFirewallsToVMPayload(val *AttachFirewallsToVMPayload) *NullableAttachFirewallsToVMPayload {
	return &NullableAttachFirewallsToVMPayload{value: val, isSet: true}
}

func (v NullableAttachFirewallsToVMPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachFirewallsToVMPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
