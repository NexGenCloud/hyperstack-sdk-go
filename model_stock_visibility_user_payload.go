/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StockVisibilityUserPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StockVisibilityUserPayload{}

// StockVisibilityUserPayload struct for StockVisibilityUserPayload
type StockVisibilityUserPayload struct {
	UserIds []int32 `json:"user_ids"`
}

type _StockVisibilityUserPayload StockVisibilityUserPayload

// NewStockVisibilityUserPayload instantiates a new StockVisibilityUserPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockVisibilityUserPayload(userIds []int32) *StockVisibilityUserPayload {
	this := StockVisibilityUserPayload{}
	this.UserIds = userIds
	return &this
}

// NewStockVisibilityUserPayloadWithDefaults instantiates a new StockVisibilityUserPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockVisibilityUserPayloadWithDefaults() *StockVisibilityUserPayload {
	this := StockVisibilityUserPayload{}
	return &this
}

// GetUserIds returns the UserIds field value
func (o *StockVisibilityUserPayload) GetUserIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value
// and a boolean to check if the value has been set.
func (o *StockVisibilityUserPayload) GetUserIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserIds, true
}

// SetUserIds sets field value
func (o *StockVisibilityUserPayload) SetUserIds(v []int32) {
	o.UserIds = v
}

func (o StockVisibilityUserPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StockVisibilityUserPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user_ids"] = o.UserIds
	return toSerialize, nil
}

func (o *StockVisibilityUserPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStockVisibilityUserPayload := _StockVisibilityUserPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStockVisibilityUserPayload)

	if err != nil {
		return err
	}

	*o = StockVisibilityUserPayload(varStockVisibilityUserPayload)

	return err
}

type NullableStockVisibilityUserPayload struct {
	value *StockVisibilityUserPayload
	isSet bool
}

func (v NullableStockVisibilityUserPayload) Get() *StockVisibilityUserPayload {
	return v.value
}

func (v *NullableStockVisibilityUserPayload) Set(val *StockVisibilityUserPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableStockVisibilityUserPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableStockVisibilityUserPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockVisibilityUserPayload(val *StockVisibilityUserPayload) *NullableStockVisibilityUserPayload {
	return &NullableStockVisibilityUserPayload{value: val, isSet: true}
}

func (v NullableStockVisibilityUserPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockVisibilityUserPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
