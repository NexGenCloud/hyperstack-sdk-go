/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the SecondaryColor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecondaryColor{}

// SecondaryColor struct for SecondaryColor
type SecondaryColor struct {
	Dark  *string `json:"dark,omitempty"`
	Light *string `json:"light,omitempty"`
}

// NewSecondaryColor instantiates a new SecondaryColor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecondaryColor() *SecondaryColor {
	this := SecondaryColor{}
	return &this
}

// NewSecondaryColorWithDefaults instantiates a new SecondaryColor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecondaryColorWithDefaults() *SecondaryColor {
	this := SecondaryColor{}
	return &this
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *SecondaryColor) GetDark() string {
	if o == nil || IsNil(o.Dark) {
		var ret string
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecondaryColor) GetDarkOk() (*string, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *SecondaryColor) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given string and assigns it to the Dark field.
func (o *SecondaryColor) SetDark(v string) {
	o.Dark = &v
}

// GetLight returns the Light field value if set, zero value otherwise.
func (o *SecondaryColor) GetLight() string {
	if o == nil || IsNil(o.Light) {
		var ret string
		return ret
	}
	return *o.Light
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecondaryColor) GetLightOk() (*string, bool) {
	if o == nil || IsNil(o.Light) {
		return nil, false
	}
	return o.Light, true
}

// HasLight returns a boolean if a field has been set.
func (o *SecondaryColor) HasLight() bool {
	if o != nil && !IsNil(o.Light) {
		return true
	}

	return false
}

// SetLight gets a reference to the given string and assigns it to the Light field.
func (o *SecondaryColor) SetLight(v string) {
	o.Light = &v
}

func (o SecondaryColor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecondaryColor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}
	if !IsNil(o.Light) {
		toSerialize["light"] = o.Light
	}
	return toSerialize, nil
}

type NullableSecondaryColor struct {
	value *SecondaryColor
	isSet bool
}

func (v NullableSecondaryColor) Get() *SecondaryColor {
	return v.value
}

func (v *NullableSecondaryColor) Set(val *SecondaryColor) {
	v.value = val
	v.isSet = true
}

func (v NullableSecondaryColor) IsSet() bool {
	return v.isSet
}

func (v *NullableSecondaryColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecondaryColor(val *SecondaryColor) *NullableSecondaryColor {
	return &NullableSecondaryColor{value: val, isSet: true}
}

func (v NullableSecondaryColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecondaryColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
