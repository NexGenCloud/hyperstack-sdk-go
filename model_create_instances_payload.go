/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateInstancesPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateInstancesPayload{}

// CreateInstancesPayload struct for CreateInstancesPayload
type CreateInstancesPayload struct {
	// When this field is set to `true`, it attaches a [public IP address](https://docs.hyperstack.cloud/docs/api-reference/core-resources/virtual-machines/floating-ip/) to the virtual machine, enabling internet accessibility.
	AssignFloatingIp *bool `json:"assign_floating_ip,omitempty"`
	// An optional URL where actions performed on the virtual machine will be sent. For additional information on event callbacks, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/virtual-machines/callbacks-vms/).
	CallbackUrl *string `json:"callback_url,omitempty"`
	// The number of virtual machines to be created.
	Count int32 `json:"count"`
	// Indicates whether to create a bootable volume for the virtual machine. When set to `true`, a bootable volume will be created; the default value is `false`.
	CreateBootableVolume *bool `json:"create_bootable_volume,omitempty"`
	// Indicates whether to enable port randomization.This setting is only effective if 'assign_floating_ip' is true. Defaults to true.
	EnablePortRandomization *bool `json:"enable_port_randomization,omitempty"`
	// The name of the [environment](https://docs.hyperstack.cloud/docs/api-reference/core-resources/environments/) in which the virtual machine is to be created.
	EnvironmentName string              `json:"environment_name"`
	Flavor          *FlavorObjectFields `json:"flavor,omitempty"`
	// The name of the GPU hardware configuration ([flavor](https://docs.hyperstack.cloud/docs/hardware/flavors)) for the virtual machines being created.
	FlavorName string `json:"flavor_name"`
	// The [operating system (OS) image](https://docs.hyperstack.cloud/docs/virtual-machines/images) name designated for installation on the virtual machine.It also accepts custom, private images, created from [existing snapshots](https://docs.hyperstack.cloud/docs/virtual-machines/custom-images).
	ImageName *string `json:"image_name,omitempty"`
	// The name of the existing SSH key pair to be used for secure access to the virtual machine. For additional information on SSH key pairs, [**click here**](https://docs.hyperstack.cloud/docs/api-reference/core-resources/keypairs/).
	KeyName string   `json:"key_name"`
	Labels  []string `json:"labels,omitempty"`
	// The name of the virtual machine being created.
	Name          string                      `json:"name"`
	Profile       *ProfileObjectFields        `json:"profile,omitempty"`
	SecurityRules []CreateSecurityRulePayload `json:"security_rules,omitempty"`
	// Optional initialization configuration commands to manage the configuration of a virtual machine at launch using cloud-init scripts. For more information about custom VM configuration using cloud-init, [**click here**](https://docs.hyperstack.cloud/docs/virtual-machines/initialization-configuration).
	UserData *string `json:"user_data,omitempty"`
	// The names of the volume(s) to be attached to the virtual machine being created.
	VolumeName *string `json:"volume_name,omitempty"`
}

type _CreateInstancesPayload CreateInstancesPayload

// NewCreateInstancesPayload instantiates a new CreateInstancesPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateInstancesPayload(count int32, environmentName string, flavorName string, keyName string, name string) *CreateInstancesPayload {
	this := CreateInstancesPayload{}
	this.Count = count
	var enablePortRandomization bool = true
	this.EnablePortRandomization = &enablePortRandomization
	this.EnvironmentName = environmentName
	this.FlavorName = flavorName
	this.KeyName = keyName
	this.Name = name
	return &this
}

// NewCreateInstancesPayloadWithDefaults instantiates a new CreateInstancesPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateInstancesPayloadWithDefaults() *CreateInstancesPayload {
	this := CreateInstancesPayload{}
	var enablePortRandomization bool = true
	this.EnablePortRandomization = &enablePortRandomization
	return &this
}

// GetAssignFloatingIp returns the AssignFloatingIp field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetAssignFloatingIp() bool {
	if o == nil || IsNil(o.AssignFloatingIp) {
		var ret bool
		return ret
	}
	return *o.AssignFloatingIp
}

// GetAssignFloatingIpOk returns a tuple with the AssignFloatingIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetAssignFloatingIpOk() (*bool, bool) {
	if o == nil || IsNil(o.AssignFloatingIp) {
		return nil, false
	}
	return o.AssignFloatingIp, true
}

// HasAssignFloatingIp returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasAssignFloatingIp() bool {
	if o != nil && !IsNil(o.AssignFloatingIp) {
		return true
	}

	return false
}

// SetAssignFloatingIp gets a reference to the given bool and assigns it to the AssignFloatingIp field.
func (o *CreateInstancesPayload) SetAssignFloatingIp(v bool) {
	o.AssignFloatingIp = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *CreateInstancesPayload) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetCount returns the Count field value
func (o *CreateInstancesPayload) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *CreateInstancesPayload) SetCount(v int32) {
	o.Count = v
}

// GetCreateBootableVolume returns the CreateBootableVolume field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetCreateBootableVolume() bool {
	if o == nil || IsNil(o.CreateBootableVolume) {
		var ret bool
		return ret
	}
	return *o.CreateBootableVolume
}

// GetCreateBootableVolumeOk returns a tuple with the CreateBootableVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetCreateBootableVolumeOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateBootableVolume) {
		return nil, false
	}
	return o.CreateBootableVolume, true
}

// HasCreateBootableVolume returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasCreateBootableVolume() bool {
	if o != nil && !IsNil(o.CreateBootableVolume) {
		return true
	}

	return false
}

// SetCreateBootableVolume gets a reference to the given bool and assigns it to the CreateBootableVolume field.
func (o *CreateInstancesPayload) SetCreateBootableVolume(v bool) {
	o.CreateBootableVolume = &v
}

// GetEnablePortRandomization returns the EnablePortRandomization field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetEnablePortRandomization() bool {
	if o == nil || IsNil(o.EnablePortRandomization) {
		var ret bool
		return ret
	}
	return *o.EnablePortRandomization
}

// GetEnablePortRandomizationOk returns a tuple with the EnablePortRandomization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetEnablePortRandomizationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePortRandomization) {
		return nil, false
	}
	return o.EnablePortRandomization, true
}

// HasEnablePortRandomization returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasEnablePortRandomization() bool {
	if o != nil && !IsNil(o.EnablePortRandomization) {
		return true
	}

	return false
}

// SetEnablePortRandomization gets a reference to the given bool and assigns it to the EnablePortRandomization field.
func (o *CreateInstancesPayload) SetEnablePortRandomization(v bool) {
	o.EnablePortRandomization = &v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *CreateInstancesPayload) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *CreateInstancesPayload) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

// GetFlavor returns the Flavor field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetFlavor() FlavorObjectFields {
	if o == nil || IsNil(o.Flavor) {
		var ret FlavorObjectFields
		return ret
	}
	return *o.Flavor
}

// GetFlavorOk returns a tuple with the Flavor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetFlavorOk() (*FlavorObjectFields, bool) {
	if o == nil || IsNil(o.Flavor) {
		return nil, false
	}
	return o.Flavor, true
}

// HasFlavor returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasFlavor() bool {
	if o != nil && !IsNil(o.Flavor) {
		return true
	}

	return false
}

// SetFlavor gets a reference to the given FlavorObjectFields and assigns it to the Flavor field.
func (o *CreateInstancesPayload) SetFlavor(v FlavorObjectFields) {
	o.Flavor = &v
}

// GetFlavorName returns the FlavorName field value
func (o *CreateInstancesPayload) GetFlavorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlavorName
}

// GetFlavorNameOk returns a tuple with the FlavorName field value
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetFlavorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlavorName, true
}

// SetFlavorName sets field value
func (o *CreateInstancesPayload) SetFlavorName(v string) {
	o.FlavorName = v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *CreateInstancesPayload) SetImageName(v string) {
	o.ImageName = &v
}

// GetKeyName returns the KeyName field value
func (o *CreateInstancesPayload) GetKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyName
}

// GetKeyNameOk returns a tuple with the KeyName field value
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyName, true
}

// SetKeyName sets field value
func (o *CreateInstancesPayload) SetKeyName(v string) {
	o.KeyName = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CreateInstancesPayload) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *CreateInstancesPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateInstancesPayload) SetName(v string) {
	o.Name = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetProfile() ProfileObjectFields {
	if o == nil || IsNil(o.Profile) {
		var ret ProfileObjectFields
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetProfileOk() (*ProfileObjectFields, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given ProfileObjectFields and assigns it to the Profile field.
func (o *CreateInstancesPayload) SetProfile(v ProfileObjectFields) {
	o.Profile = &v
}

// GetSecurityRules returns the SecurityRules field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetSecurityRules() []CreateSecurityRulePayload {
	if o == nil || IsNil(o.SecurityRules) {
		var ret []CreateSecurityRulePayload
		return ret
	}
	return o.SecurityRules
}

// GetSecurityRulesOk returns a tuple with the SecurityRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetSecurityRulesOk() ([]CreateSecurityRulePayload, bool) {
	if o == nil || IsNil(o.SecurityRules) {
		return nil, false
	}
	return o.SecurityRules, true
}

// HasSecurityRules returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasSecurityRules() bool {
	if o != nil && !IsNil(o.SecurityRules) {
		return true
	}

	return false
}

// SetSecurityRules gets a reference to the given []CreateSecurityRulePayload and assigns it to the SecurityRules field.
func (o *CreateInstancesPayload) SetSecurityRules(v []CreateSecurityRulePayload) {
	o.SecurityRules = v
}

// GetUserData returns the UserData field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetUserData() string {
	if o == nil || IsNil(o.UserData) {
		var ret string
		return ret
	}
	return *o.UserData
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetUserDataOk() (*string, bool) {
	if o == nil || IsNil(o.UserData) {
		return nil, false
	}
	return o.UserData, true
}

// HasUserData returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasUserData() bool {
	if o != nil && !IsNil(o.UserData) {
		return true
	}

	return false
}

// SetUserData gets a reference to the given string and assigns it to the UserData field.
func (o *CreateInstancesPayload) SetUserData(v string) {
	o.UserData = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *CreateInstancesPayload) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateInstancesPayload) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *CreateInstancesPayload) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *CreateInstancesPayload) SetVolumeName(v string) {
	o.VolumeName = &v
}

func (o CreateInstancesPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateInstancesPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssignFloatingIp) {
		toSerialize["assign_floating_ip"] = o.AssignFloatingIp
	}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callback_url"] = o.CallbackUrl
	}
	toSerialize["count"] = o.Count
	if !IsNil(o.CreateBootableVolume) {
		toSerialize["create_bootable_volume"] = o.CreateBootableVolume
	}
	if !IsNil(o.EnablePortRandomization) {
		toSerialize["enable_port_randomization"] = o.EnablePortRandomization
	}
	toSerialize["environment_name"] = o.EnvironmentName
	if !IsNil(o.Flavor) {
		toSerialize["flavor"] = o.Flavor
	}
	toSerialize["flavor_name"] = o.FlavorName
	if !IsNil(o.ImageName) {
		toSerialize["image_name"] = o.ImageName
	}
	toSerialize["key_name"] = o.KeyName
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.SecurityRules) {
		toSerialize["security_rules"] = o.SecurityRules
	}
	if !IsNil(o.UserData) {
		toSerialize["user_data"] = o.UserData
	}
	if !IsNil(o.VolumeName) {
		toSerialize["volume_name"] = o.VolumeName
	}
	return toSerialize, nil
}

func (o *CreateInstancesPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"environment_name",
		"flavor_name",
		"key_name",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateInstancesPayload := _CreateInstancesPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateInstancesPayload)

	if err != nil {
		return err
	}

	*o = CreateInstancesPayload(varCreateInstancesPayload)

	return err
}

type NullableCreateInstancesPayload struct {
	value *CreateInstancesPayload
	isSet bool
}

func (v NullableCreateInstancesPayload) Get() *CreateInstancesPayload {
	return v.value
}

func (v *NullableCreateInstancesPayload) Set(val *CreateInstancesPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInstancesPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInstancesPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInstancesPayload(val *CreateInstancesPayload) *NullableCreateInstancesPayload {
	return &NullableCreateInstancesPayload{value: val, isSet: true}
}

func (v NullableCreateInstancesPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInstancesPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
