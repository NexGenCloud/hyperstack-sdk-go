/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the Logos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Logos{}

// Logos struct for Logos
type Logos struct {
	Dark    *string `json:"dark,omitempty"`
	Email   *string `json:"email,omitempty"`
	Favicon *string `json:"favicon,omitempty"`
	Light   *string `json:"light,omitempty"`
}

// NewLogos instantiates a new Logos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogos() *Logos {
	this := Logos{}
	return &this
}

// NewLogosWithDefaults instantiates a new Logos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogosWithDefaults() *Logos {
	this := Logos{}
	return &this
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *Logos) GetDark() string {
	if o == nil || IsNil(o.Dark) {
		var ret string
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logos) GetDarkOk() (*string, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *Logos) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given string and assigns it to the Dark field.
func (o *Logos) SetDark(v string) {
	o.Dark = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Logos) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logos) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Logos) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Logos) SetEmail(v string) {
	o.Email = &v
}

// GetFavicon returns the Favicon field value if set, zero value otherwise.
func (o *Logos) GetFavicon() string {
	if o == nil || IsNil(o.Favicon) {
		var ret string
		return ret
	}
	return *o.Favicon
}

// GetFaviconOk returns a tuple with the Favicon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logos) GetFaviconOk() (*string, bool) {
	if o == nil || IsNil(o.Favicon) {
		return nil, false
	}
	return o.Favicon, true
}

// HasFavicon returns a boolean if a field has been set.
func (o *Logos) HasFavicon() bool {
	if o != nil && !IsNil(o.Favicon) {
		return true
	}

	return false
}

// SetFavicon gets a reference to the given string and assigns it to the Favicon field.
func (o *Logos) SetFavicon(v string) {
	o.Favicon = &v
}

// GetLight returns the Light field value if set, zero value otherwise.
func (o *Logos) GetLight() string {
	if o == nil || IsNil(o.Light) {
		var ret string
		return ret
	}
	return *o.Light
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logos) GetLightOk() (*string, bool) {
	if o == nil || IsNil(o.Light) {
		return nil, false
	}
	return o.Light, true
}

// HasLight returns a boolean if a field has been set.
func (o *Logos) HasLight() bool {
	if o != nil && !IsNil(o.Light) {
		return true
	}

	return false
}

// SetLight gets a reference to the given string and assigns it to the Light field.
func (o *Logos) SetLight(v string) {
	o.Light = &v
}

func (o Logos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Logos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Favicon) {
		toSerialize["favicon"] = o.Favicon
	}
	if !IsNil(o.Light) {
		toSerialize["light"] = o.Light
	}
	return toSerialize, nil
}

type NullableLogos struct {
	value *Logos
	isSet bool
}

func (v NullableLogos) Get() *Logos {
	return v.value
}

func (v *NullableLogos) Set(val *Logos) {
	v.value = val
	v.isSet = true
}

func (v NullableLogos) IsSet() bool {
	return v.isSet
}

func (v *NullableLogos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogos(val *Logos) *NullableLogos {
	return &NullableLogos{value: val, isSet: true}
}

func (v NullableLogos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
