/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PowerUsageModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PowerUsageModel{}

// PowerUsageModel struct for PowerUsageModel
type PowerUsageModel struct {
	Unit  string  `json:"unit"`
	Value float32 `json:"value"`
}

type _PowerUsageModel PowerUsageModel

// NewPowerUsageModel instantiates a new PowerUsageModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerUsageModel(unit string, value float32) *PowerUsageModel {
	this := PowerUsageModel{}
	this.Unit = unit
	this.Value = value
	return &this
}

// NewPowerUsageModelWithDefaults instantiates a new PowerUsageModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerUsageModelWithDefaults() *PowerUsageModel {
	this := PowerUsageModel{}
	return &this
}

// GetUnit returns the Unit field value
func (o *PowerUsageModel) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *PowerUsageModel) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *PowerUsageModel) SetUnit(v string) {
	o.Unit = v
}

// GetValue returns the Value field value
func (o *PowerUsageModel) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PowerUsageModel) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PowerUsageModel) SetValue(v float32) {
	o.Value = v
}

func (o PowerUsageModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PowerUsageModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unit"] = o.Unit
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *PowerUsageModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPowerUsageModel := _PowerUsageModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPowerUsageModel)

	if err != nil {
		return err
	}

	*o = PowerUsageModel(varPowerUsageModel)

	return err
}

type NullablePowerUsageModel struct {
	value *PowerUsageModel
	isSet bool
}

func (v NullablePowerUsageModel) Get() *PowerUsageModel {
	return v.value
}

func (v *NullablePowerUsageModel) Set(val *PowerUsageModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerUsageModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerUsageModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerUsageModel(val *PowerUsageModel) *NullablePowerUsageModel {
	return &NullablePowerUsageModel{value: val, isSet: true}
}

func (v NullablePowerUsageModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerUsageModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
