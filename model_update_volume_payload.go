/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateVolumePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVolumePayload{}

// UpdateVolumePayload struct for UpdateVolumePayload
type UpdateVolumePayload struct {
	// The name of the target environment to move the volume to. The target environment must be in the same region as the current environment.
	EnvironmentName string `json:"environment_name"`
}

type _UpdateVolumePayload UpdateVolumePayload

// NewUpdateVolumePayload instantiates a new UpdateVolumePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVolumePayload(environmentName string) *UpdateVolumePayload {
	this := UpdateVolumePayload{}
	this.EnvironmentName = environmentName
	return &this
}

// NewUpdateVolumePayloadWithDefaults instantiates a new UpdateVolumePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVolumePayloadWithDefaults() *UpdateVolumePayload {
	this := UpdateVolumePayload{}
	return &this
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *UpdateVolumePayload) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *UpdateVolumePayload) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *UpdateVolumePayload) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

func (o UpdateVolumePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVolumePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["environment_name"] = o.EnvironmentName
	return toSerialize, nil
}

func (o *UpdateVolumePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateVolumePayload := _UpdateVolumePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateVolumePayload)

	if err != nil {
		return err
	}

	*o = UpdateVolumePayload(varUpdateVolumePayload)

	return err
}

type NullableUpdateVolumePayload struct {
	value *UpdateVolumePayload
	isSet bool
}

func (v NullableUpdateVolumePayload) Get() *UpdateVolumePayload {
	return v.value
}

func (v *NullableUpdateVolumePayload) Set(val *UpdateVolumePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVolumePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVolumePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVolumePayload(val *UpdateVolumePayload) *NullableUpdateVolumePayload {
	return &NullableUpdateVolumePayload{value: val, isSet: true}
}

func (v NullableUpdateVolumePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVolumePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
