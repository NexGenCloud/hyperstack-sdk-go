/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateVolumePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVolumePayload{}

// CreateVolumePayload struct for CreateVolumePayload
type CreateVolumePayload struct {
	// A URL that can be attached to the volume you are creating. This `callback_url` will post any action events that occur to your volume to the provided URL.
	CallbackUrl *string `json:"callback_url,omitempty"`
	// A brief description or comment about the volume.
	Description *string `json:"description,omitempty"`
	// The name of the [environment](https://docs.hyperstack.cloud/docs/api-reference/core-resources/environments/) within which the volume is being created.
	EnvironmentName string `json:"environment_name"`
	// The ID of the operating system image that will be associated with the volume. By providing an `image_id` in the create volume request, you will create a bootable volume.
	ImageId *int32 `json:"image_id,omitempty"`
	// The name of the volume being created.
	Name string `json:"name"`
	// The size of the volume in GB. 1048576GB storage capacity per volume.
	Size int32 `json:"size"`
	// Specifies the type of volume being created, which determines the storage technology it will use. Call the [List volume types](https://infrahub-api-doc.nexgencloud.com/#get-/core/volumes) endpoint to retrieve a list of available volume model types.
	VolumeType string `json:"volume_type"`
}

type _CreateVolumePayload CreateVolumePayload

// NewCreateVolumePayload instantiates a new CreateVolumePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVolumePayload(environmentName string, name string, size int32, volumeType string) *CreateVolumePayload {
	this := CreateVolumePayload{}
	this.EnvironmentName = environmentName
	this.Name = name
	this.Size = size
	this.VolumeType = volumeType
	return &this
}

// NewCreateVolumePayloadWithDefaults instantiates a new CreateVolumePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVolumePayloadWithDefaults() *CreateVolumePayload {
	this := CreateVolumePayload{}
	return &this
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise.
func (o *CreateVolumePayload) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl) {
		var ret string
		return ret
	}
	return *o.CallbackUrl
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetCallbackUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CallbackUrl) {
		return nil, false
	}
	return o.CallbackUrl, true
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *CreateVolumePayload) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given string and assigns it to the CallbackUrl field.
func (o *CreateVolumePayload) SetCallbackUrl(v string) {
	o.CallbackUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateVolumePayload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateVolumePayload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateVolumePayload) SetDescription(v string) {
	o.Description = &v
}

// GetEnvironmentName returns the EnvironmentName field value
func (o *CreateVolumePayload) GetEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentName
}

// GetEnvironmentNameOk returns a tuple with the EnvironmentName field value
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentName, true
}

// SetEnvironmentName sets field value
func (o *CreateVolumePayload) SetEnvironmentName(v string) {
	o.EnvironmentName = v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *CreateVolumePayload) GetImageId() int32 {
	if o == nil || IsNil(o.ImageId) {
		var ret int32
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetImageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *CreateVolumePayload) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given int32 and assigns it to the ImageId field.
func (o *CreateVolumePayload) SetImageId(v int32) {
	o.ImageId = &v
}

// GetName returns the Name field value
func (o *CreateVolumePayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVolumePayload) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *CreateVolumePayload) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreateVolumePayload) SetSize(v int32) {
	o.Size = v
}

// GetVolumeType returns the VolumeType field value
func (o *CreateVolumePayload) GetVolumeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value
// and a boolean to check if the value has been set.
func (o *CreateVolumePayload) GetVolumeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeType, true
}

// SetVolumeType sets field value
func (o *CreateVolumePayload) SetVolumeType(v string) {
	o.VolumeType = v
}

func (o CreateVolumePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVolumePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallbackUrl) {
		toSerialize["callback_url"] = o.CallbackUrl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["environment_name"] = o.EnvironmentName
	if !IsNil(o.ImageId) {
		toSerialize["image_id"] = o.ImageId
	}
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	toSerialize["volume_type"] = o.VolumeType
	return toSerialize, nil
}

func (o *CreateVolumePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment_name",
		"name",
		"size",
		"volume_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVolumePayload := _CreateVolumePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateVolumePayload)

	if err != nil {
		return err
	}

	*o = CreateVolumePayload(varCreateVolumePayload)

	return err
}

type NullableCreateVolumePayload struct {
	value *CreateVolumePayload
	isSet bool
}

func (v NullableCreateVolumePayload) Get() *CreateVolumePayload {
	return v.value
}

func (v *NullableCreateVolumePayload) Set(val *CreateVolumePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVolumePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVolumePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVolumePayload(val *CreateVolumePayload) *NullableCreateVolumePayload {
	return &NullableCreateVolumePayload{value: val, isSet: true}
}

func (v NullableCreateVolumePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVolumePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
