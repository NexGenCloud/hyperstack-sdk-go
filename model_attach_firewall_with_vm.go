/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AttachFirewallWithVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachFirewallWithVM{}

// AttachFirewallWithVM struct for AttachFirewallWithVM
type AttachFirewallWithVM struct {
	Vms []int32 `json:"vms"`
}

type _AttachFirewallWithVM AttachFirewallWithVM

// NewAttachFirewallWithVM instantiates a new AttachFirewallWithVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachFirewallWithVM(vms []int32) *AttachFirewallWithVM {
	this := AttachFirewallWithVM{}
	this.Vms = vms
	return &this
}

// NewAttachFirewallWithVMWithDefaults instantiates a new AttachFirewallWithVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachFirewallWithVMWithDefaults() *AttachFirewallWithVM {
	this := AttachFirewallWithVM{}
	return &this
}

// GetVms returns the Vms field value
func (o *AttachFirewallWithVM) GetVms() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Vms
}

// GetVmsOk returns a tuple with the Vms field value
// and a boolean to check if the value has been set.
func (o *AttachFirewallWithVM) GetVmsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vms, true
}

// SetVms sets field value
func (o *AttachFirewallWithVM) SetVms(v []int32) {
	o.Vms = v
}

func (o AttachFirewallWithVM) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachFirewallWithVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vms"] = o.Vms
	return toSerialize, nil
}

func (o *AttachFirewallWithVM) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachFirewallWithVM := _AttachFirewallWithVM{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachFirewallWithVM)

	if err != nil {
		return err
	}

	*o = AttachFirewallWithVM(varAttachFirewallWithVM)

	return err
}

type NullableAttachFirewallWithVM struct {
	value *AttachFirewallWithVM
	isSet bool
}

func (v NullableAttachFirewallWithVM) Get() *AttachFirewallWithVM {
	return v.value
}

func (v *NullableAttachFirewallWithVM) Set(val *AttachFirewallWithVM) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachFirewallWithVM) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachFirewallWithVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachFirewallWithVM(val *AttachFirewallWithVM) *NullableAttachFirewallWithVM {
	return &NullableAttachFirewallWithVM{value: val, isSet: true}
}

func (v NullableAttachFirewallWithVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachFirewallWithVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
