/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the UpdateVolumeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVolumeResponse{}

// UpdateVolumeResponse struct for UpdateVolumeResponse
type UpdateVolumeResponse struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
	// Summary of fields that were updated
	Updates map[string]interface{} `json:"updates,omitempty"`
	Volume  *VolumeFields          `json:"volume,omitempty"`
}

// NewUpdateVolumeResponse instantiates a new UpdateVolumeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVolumeResponse() *UpdateVolumeResponse {
	this := UpdateVolumeResponse{}
	return &this
}

// NewUpdateVolumeResponseWithDefaults instantiates a new UpdateVolumeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVolumeResponseWithDefaults() *UpdateVolumeResponse {
	this := UpdateVolumeResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UpdateVolumeResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVolumeResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UpdateVolumeResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UpdateVolumeResponse) SetMessage(v string) {
	o.Message = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateVolumeResponse) GetStatus() bool {
	if o == nil || IsNil(o.Status) {
		var ret bool
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVolumeResponse) GetStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateVolumeResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given bool and assigns it to the Status field.
func (o *UpdateVolumeResponse) SetStatus(v bool) {
	o.Status = &v
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *UpdateVolumeResponse) GetUpdates() map[string]interface{} {
	if o == nil || IsNil(o.Updates) {
		var ret map[string]interface{}
		return ret
	}
	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVolumeResponse) GetUpdatesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Updates) {
		return map[string]interface{}{}, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *UpdateVolumeResponse) HasUpdates() bool {
	if o != nil && !IsNil(o.Updates) {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given map[string]interface{} and assigns it to the Updates field.
func (o *UpdateVolumeResponse) SetUpdates(v map[string]interface{}) {
	o.Updates = v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *UpdateVolumeResponse) GetVolume() VolumeFields {
	if o == nil || IsNil(o.Volume) {
		var ret VolumeFields
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVolumeResponse) GetVolumeOk() (*VolumeFields, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *UpdateVolumeResponse) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given VolumeFields and assigns it to the Volume field.
func (o *UpdateVolumeResponse) SetVolume(v VolumeFields) {
	o.Volume = &v
}

func (o UpdateVolumeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVolumeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Updates) {
		toSerialize["updates"] = o.Updates
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableUpdateVolumeResponse struct {
	value *UpdateVolumeResponse
	isSet bool
}

func (v NullableUpdateVolumeResponse) Get() *UpdateVolumeResponse {
	return v.value
}

func (v *NullableUpdateVolumeResponse) Set(val *UpdateVolumeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVolumeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVolumeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVolumeResponse(val *UpdateVolumeResponse) *NullableUpdateVolumeResponse {
	return &NullableUpdateVolumeResponse{value: val, isSet: true}
}

func (v NullableUpdateVolumeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVolumeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
