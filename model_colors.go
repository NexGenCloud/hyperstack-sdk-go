/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the Colors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Colors{}

// Colors struct for Colors
type Colors struct {
	Primary   *PrimaryColor   `json:"primary,omitempty"`
	Secondary *SecondaryColor `json:"secondary,omitempty"`
}

// NewColors instantiates a new Colors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColors() *Colors {
	this := Colors{}
	return &this
}

// NewColorsWithDefaults instantiates a new Colors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColorsWithDefaults() *Colors {
	this := Colors{}
	return &this
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *Colors) GetPrimary() PrimaryColor {
	if o == nil || IsNil(o.Primary) {
		var ret PrimaryColor
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Colors) GetPrimaryOk() (*PrimaryColor, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *Colors) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given PrimaryColor and assigns it to the Primary field.
func (o *Colors) SetPrimary(v PrimaryColor) {
	o.Primary = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *Colors) GetSecondary() SecondaryColor {
	if o == nil || IsNil(o.Secondary) {
		var ret SecondaryColor
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Colors) GetSecondaryOk() (*SecondaryColor, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *Colors) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given SecondaryColor and assigns it to the Secondary field.
func (o *Colors) SetSecondary(v SecondaryColor) {
	o.Secondary = &v
}

func (o Colors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Colors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}
	return toSerialize, nil
}

type NullableColors struct {
	value *Colors
	isSet bool
}

func (v NullableColors) Get() *Colors {
	return v.value
}

func (v *NullableColors) Set(val *Colors) {
	v.value = val
	v.isSet = true
}

func (v NullableColors) IsSet() bool {
	return v.isSet
}

func (v *NullableColors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColors(val *Colors) *NullableColors {
	return &NullableColors{value: val, isSet: true}
}

func (v NullableColors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
