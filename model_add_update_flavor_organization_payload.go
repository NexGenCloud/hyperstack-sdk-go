/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AddUpdateFlavorOrganizationPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUpdateFlavorOrganizationPayload{}

// AddUpdateFlavorOrganizationPayload struct for AddUpdateFlavorOrganizationPayload
type AddUpdateFlavorOrganizationPayload struct {
	Cpu           int32    `json:"cpu"`
	Description   *string  `json:"description,omitempty"`
	Disk          int32    `json:"disk"`
	Ephemeral     *int32   `json:"ephemeral,omitempty"`
	GpuCount      int32    `json:"gpu_count"`
	GpuId         int32    `json:"gpu_id"`
	IsPublic      bool     `json:"is_public"`
	Labels        []string `json:"labels,omitempty"`
	Name          string   `json:"name"`
	OpenstackId   string   `json:"openstack_id"`
	Organizations []int32  `json:"organizations"`
	Ram           float32  `json:"ram"`
	RegionId      int32    `json:"region_id"`
}

type _AddUpdateFlavorOrganizationPayload AddUpdateFlavorOrganizationPayload

// NewAddUpdateFlavorOrganizationPayload instantiates a new AddUpdateFlavorOrganizationPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUpdateFlavorOrganizationPayload(cpu int32, disk int32, gpuCount int32, gpuId int32, isPublic bool, name string, openstackId string, organizations []int32, ram float32, regionId int32) *AddUpdateFlavorOrganizationPayload {
	this := AddUpdateFlavorOrganizationPayload{}
	this.Cpu = cpu
	this.Disk = disk
	this.GpuCount = gpuCount
	this.GpuId = gpuId
	this.IsPublic = isPublic
	this.Name = name
	this.OpenstackId = openstackId
	this.Organizations = organizations
	this.Ram = ram
	this.RegionId = regionId
	return &this
}

// NewAddUpdateFlavorOrganizationPayloadWithDefaults instantiates a new AddUpdateFlavorOrganizationPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUpdateFlavorOrganizationPayloadWithDefaults() *AddUpdateFlavorOrganizationPayload {
	this := AddUpdateFlavorOrganizationPayload{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *AddUpdateFlavorOrganizationPayload) GetCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetCpu(v int32) {
	o.Cpu = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddUpdateFlavorOrganizationPayload) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddUpdateFlavorOrganizationPayload) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddUpdateFlavorOrganizationPayload) SetDescription(v string) {
	o.Description = &v
}

// GetDisk returns the Disk field value
func (o *AddUpdateFlavorOrganizationPayload) GetDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetDisk(v int32) {
	o.Disk = v
}

// GetEphemeral returns the Ephemeral field value if set, zero value otherwise.
func (o *AddUpdateFlavorOrganizationPayload) GetEphemeral() int32 {
	if o == nil || IsNil(o.Ephemeral) {
		var ret int32
		return ret
	}
	return *o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetEphemeralOk() (*int32, bool) {
	if o == nil || IsNil(o.Ephemeral) {
		return nil, false
	}
	return o.Ephemeral, true
}

// HasEphemeral returns a boolean if a field has been set.
func (o *AddUpdateFlavorOrganizationPayload) HasEphemeral() bool {
	if o != nil && !IsNil(o.Ephemeral) {
		return true
	}

	return false
}

// SetEphemeral gets a reference to the given int32 and assigns it to the Ephemeral field.
func (o *AddUpdateFlavorOrganizationPayload) SetEphemeral(v int32) {
	o.Ephemeral = &v
}

// GetGpuCount returns the GpuCount field value
func (o *AddUpdateFlavorOrganizationPayload) GetGpuCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetGpuCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuCount, true
}

// SetGpuCount sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetGpuCount(v int32) {
	o.GpuCount = v
}

// GetGpuId returns the GpuId field value
func (o *AddUpdateFlavorOrganizationPayload) GetGpuId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GpuId
}

// GetGpuIdOk returns a tuple with the GpuId field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetGpuIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GpuId, true
}

// SetGpuId sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetGpuId(v int32) {
	o.GpuId = v
}

// GetIsPublic returns the IsPublic field value
func (o *AddUpdateFlavorOrganizationPayload) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetIsPublic(v bool) {
	o.IsPublic = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AddUpdateFlavorOrganizationPayload) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AddUpdateFlavorOrganizationPayload) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *AddUpdateFlavorOrganizationPayload) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *AddUpdateFlavorOrganizationPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetName(v string) {
	o.Name = v
}

// GetOpenstackId returns the OpenstackId field value
func (o *AddUpdateFlavorOrganizationPayload) GetOpenstackId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OpenstackId
}

// GetOpenstackIdOk returns a tuple with the OpenstackId field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetOpenstackIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenstackId, true
}

// SetOpenstackId sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetOpenstackId(v string) {
	o.OpenstackId = v
}

// GetOrganizations returns the Organizations field value
func (o *AddUpdateFlavorOrganizationPayload) GetOrganizations() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetOrganizationsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organizations, true
}

// SetOrganizations sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetOrganizations(v []int32) {
	o.Organizations = v
}

// GetRam returns the Ram field value
func (o *AddUpdateFlavorOrganizationPayload) GetRam() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetRamOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetRam(v float32) {
	o.Ram = v
}

// GetRegionId returns the RegionId field value
func (o *AddUpdateFlavorOrganizationPayload) GetRegionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *AddUpdateFlavorOrganizationPayload) GetRegionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *AddUpdateFlavorOrganizationPayload) SetRegionId(v int32) {
	o.RegionId = v
}

func (o AddUpdateFlavorOrganizationPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUpdateFlavorOrganizationPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["disk"] = o.Disk
	if !IsNil(o.Ephemeral) {
		toSerialize["ephemeral"] = o.Ephemeral
	}
	toSerialize["gpu_count"] = o.GpuCount
	toSerialize["gpu_id"] = o.GpuId
	toSerialize["is_public"] = o.IsPublic
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["openstack_id"] = o.OpenstackId
	toSerialize["organizations"] = o.Organizations
	toSerialize["ram"] = o.Ram
	toSerialize["region_id"] = o.RegionId
	return toSerialize, nil
}

func (o *AddUpdateFlavorOrganizationPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"disk",
		"gpu_count",
		"gpu_id",
		"is_public",
		"name",
		"openstack_id",
		"organizations",
		"ram",
		"region_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddUpdateFlavorOrganizationPayload := _AddUpdateFlavorOrganizationPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddUpdateFlavorOrganizationPayload)

	if err != nil {
		return err
	}

	*o = AddUpdateFlavorOrganizationPayload(varAddUpdateFlavorOrganizationPayload)

	return err
}

type NullableAddUpdateFlavorOrganizationPayload struct {
	value *AddUpdateFlavorOrganizationPayload
	isSet bool
}

func (v NullableAddUpdateFlavorOrganizationPayload) Get() *AddUpdateFlavorOrganizationPayload {
	return v.value
}

func (v *NullableAddUpdateFlavorOrganizationPayload) Set(val *AddUpdateFlavorOrganizationPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUpdateFlavorOrganizationPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUpdateFlavorOrganizationPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUpdateFlavorOrganizationPayload(val *AddUpdateFlavorOrganizationPayload) *NullableAddUpdateFlavorOrganizationPayload {
	return &NullableAddUpdateFlavorOrganizationPayload{value: val, isSet: true}
}

func (v NullableAddUpdateFlavorOrganizationPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUpdateFlavorOrganizationPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
