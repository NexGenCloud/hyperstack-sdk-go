/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PartnerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartnerConfig{}

// PartnerConfig struct for PartnerConfig
type PartnerConfig struct {
	BackgroundImageUrl *string `json:"background_image_url,omitempty"`
	Colors             *Colors `json:"colors,omitempty"`
	Logos              *Logos  `json:"logos,omitempty"`
	Name               string  `json:"name"`
	SupportEmail       *string `json:"support_email,omitempty"`
	Uris               *URIs   `json:"uris,omitempty"`
	UserType           string  `json:"user_type"`
}

type _PartnerConfig PartnerConfig

// NewPartnerConfig instantiates a new PartnerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartnerConfig(name string, userType string) *PartnerConfig {
	this := PartnerConfig{}
	this.Name = name
	this.UserType = userType
	return &this
}

// NewPartnerConfigWithDefaults instantiates a new PartnerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartnerConfigWithDefaults() *PartnerConfig {
	this := PartnerConfig{}
	return &this
}

// GetBackgroundImageUrl returns the BackgroundImageUrl field value if set, zero value otherwise.
func (o *PartnerConfig) GetBackgroundImageUrl() string {
	if o == nil || IsNil(o.BackgroundImageUrl) {
		var ret string
		return ret
	}
	return *o.BackgroundImageUrl
}

// GetBackgroundImageUrlOk returns a tuple with the BackgroundImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetBackgroundImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundImageUrl) {
		return nil, false
	}
	return o.BackgroundImageUrl, true
}

// HasBackgroundImageUrl returns a boolean if a field has been set.
func (o *PartnerConfig) HasBackgroundImageUrl() bool {
	if o != nil && !IsNil(o.BackgroundImageUrl) {
		return true
	}

	return false
}

// SetBackgroundImageUrl gets a reference to the given string and assigns it to the BackgroundImageUrl field.
func (o *PartnerConfig) SetBackgroundImageUrl(v string) {
	o.BackgroundImageUrl = &v
}

// GetColors returns the Colors field value if set, zero value otherwise.
func (o *PartnerConfig) GetColors() Colors {
	if o == nil || IsNil(o.Colors) {
		var ret Colors
		return ret
	}
	return *o.Colors
}

// GetColorsOk returns a tuple with the Colors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetColorsOk() (*Colors, bool) {
	if o == nil || IsNil(o.Colors) {
		return nil, false
	}
	return o.Colors, true
}

// HasColors returns a boolean if a field has been set.
func (o *PartnerConfig) HasColors() bool {
	if o != nil && !IsNil(o.Colors) {
		return true
	}

	return false
}

// SetColors gets a reference to the given Colors and assigns it to the Colors field.
func (o *PartnerConfig) SetColors(v Colors) {
	o.Colors = &v
}

// GetLogos returns the Logos field value if set, zero value otherwise.
func (o *PartnerConfig) GetLogos() Logos {
	if o == nil || IsNil(o.Logos) {
		var ret Logos
		return ret
	}
	return *o.Logos
}

// GetLogosOk returns a tuple with the Logos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetLogosOk() (*Logos, bool) {
	if o == nil || IsNil(o.Logos) {
		return nil, false
	}
	return o.Logos, true
}

// HasLogos returns a boolean if a field has been set.
func (o *PartnerConfig) HasLogos() bool {
	if o != nil && !IsNil(o.Logos) {
		return true
	}

	return false
}

// SetLogos gets a reference to the given Logos and assigns it to the Logos field.
func (o *PartnerConfig) SetLogos(v Logos) {
	o.Logos = &v
}

// GetName returns the Name field value
func (o *PartnerConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PartnerConfig) SetName(v string) {
	o.Name = v
}

// GetSupportEmail returns the SupportEmail field value if set, zero value otherwise.
func (o *PartnerConfig) GetSupportEmail() string {
	if o == nil || IsNil(o.SupportEmail) {
		var ret string
		return ret
	}
	return *o.SupportEmail
}

// GetSupportEmailOk returns a tuple with the SupportEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetSupportEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SupportEmail) {
		return nil, false
	}
	return o.SupportEmail, true
}

// HasSupportEmail returns a boolean if a field has been set.
func (o *PartnerConfig) HasSupportEmail() bool {
	if o != nil && !IsNil(o.SupportEmail) {
		return true
	}

	return false
}

// SetSupportEmail gets a reference to the given string and assigns it to the SupportEmail field.
func (o *PartnerConfig) SetSupportEmail(v string) {
	o.SupportEmail = &v
}

// GetUris returns the Uris field value if set, zero value otherwise.
func (o *PartnerConfig) GetUris() URIs {
	if o == nil || IsNil(o.Uris) {
		var ret URIs
		return ret
	}
	return *o.Uris
}

// GetUrisOk returns a tuple with the Uris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetUrisOk() (*URIs, bool) {
	if o == nil || IsNil(o.Uris) {
		return nil, false
	}
	return o.Uris, true
}

// HasUris returns a boolean if a field has been set.
func (o *PartnerConfig) HasUris() bool {
	if o != nil && !IsNil(o.Uris) {
		return true
	}

	return false
}

// SetUris gets a reference to the given URIs and assigns it to the Uris field.
func (o *PartnerConfig) SetUris(v URIs) {
	o.Uris = &v
}

// GetUserType returns the UserType field value
func (o *PartnerConfig) GetUserType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value
// and a boolean to check if the value has been set.
func (o *PartnerConfig) GetUserTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserType, true
}

// SetUserType sets field value
func (o *PartnerConfig) SetUserType(v string) {
	o.UserType = v
}

func (o PartnerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartnerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackgroundImageUrl) {
		toSerialize["background_image_url"] = o.BackgroundImageUrl
	}
	if !IsNil(o.Colors) {
		toSerialize["colors"] = o.Colors
	}
	if !IsNil(o.Logos) {
		toSerialize["logos"] = o.Logos
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SupportEmail) {
		toSerialize["support_email"] = o.SupportEmail
	}
	if !IsNil(o.Uris) {
		toSerialize["uris"] = o.Uris
	}
	toSerialize["user_type"] = o.UserType
	return toSerialize, nil
}

func (o *PartnerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"user_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPartnerConfig := _PartnerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPartnerConfig)

	if err != nil {
		return err
	}

	*o = PartnerConfig(varPartnerConfig)

	return err
}

type NullablePartnerConfig struct {
	value *PartnerConfig
	isSet bool
}

func (v NullablePartnerConfig) Get() *PartnerConfig {
	return v.value
}

func (v *NullablePartnerConfig) Set(val *PartnerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePartnerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePartnerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartnerConfig(val *PartnerConfig) *NullablePartnerConfig {
	return &NullablePartnerConfig{value: val, isSet: true}
}

func (v NullablePartnerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartnerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
