/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the InternalInstanceImageFields type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternalInstanceImageFields{}

// InternalInstanceImageFields struct for InternalInstanceImageFields
type InternalInstanceImageFields struct {
	Id         *int32  `json:"id,omitempty"`
	Name       *string `json:"name,omitempty"`
	RegionName *string `json:"region_name,omitempty"`
	Type       *string `json:"type,omitempty"`
	Version    *string `json:"version,omitempty"`
}

// NewInternalInstanceImageFields instantiates a new InternalInstanceImageFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternalInstanceImageFields() *InternalInstanceImageFields {
	this := InternalInstanceImageFields{}
	return &this
}

// NewInternalInstanceImageFieldsWithDefaults instantiates a new InternalInstanceImageFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternalInstanceImageFieldsWithDefaults() *InternalInstanceImageFields {
	this := InternalInstanceImageFields{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InternalInstanceImageFields) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalInstanceImageFields) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InternalInstanceImageFields) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InternalInstanceImageFields) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InternalInstanceImageFields) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalInstanceImageFields) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InternalInstanceImageFields) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InternalInstanceImageFields) SetName(v string) {
	o.Name = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *InternalInstanceImageFields) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalInstanceImageFields) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *InternalInstanceImageFields) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *InternalInstanceImageFields) SetRegionName(v string) {
	o.RegionName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InternalInstanceImageFields) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalInstanceImageFields) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InternalInstanceImageFields) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InternalInstanceImageFields) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InternalInstanceImageFields) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalInstanceImageFields) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InternalInstanceImageFields) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InternalInstanceImageFields) SetVersion(v string) {
	o.Version = &v
}

func (o InternalInstanceImageFields) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternalInstanceImageFields) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableInternalInstanceImageFields struct {
	value *InternalInstanceImageFields
	isSet bool
}

func (v NullableInternalInstanceImageFields) Get() *InternalInstanceImageFields {
	return v.value
}

func (v *NullableInternalInstanceImageFields) Set(val *InternalInstanceImageFields) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalInstanceImageFields) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalInstanceImageFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalInstanceImageFields(val *InternalInstanceImageFields) *NullableInternalInstanceImageFields {
	return &NullableInternalInstanceImageFields{value: val, isSet: true}
}

func (v NullableInternalInstanceImageFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalInstanceImageFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
