/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AttachCallbackPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachCallbackPayload{}

// AttachCallbackPayload struct for AttachCallbackPayload
type AttachCallbackPayload struct {
	Url string `json:"url"`
}

type _AttachCallbackPayload AttachCallbackPayload

// NewAttachCallbackPayload instantiates a new AttachCallbackPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachCallbackPayload(url string) *AttachCallbackPayload {
	this := AttachCallbackPayload{}
	this.Url = url
	return &this
}

// NewAttachCallbackPayloadWithDefaults instantiates a new AttachCallbackPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachCallbackPayloadWithDefaults() *AttachCallbackPayload {
	this := AttachCallbackPayload{}
	return &this
}

// GetUrl returns the Url field value
func (o *AttachCallbackPayload) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AttachCallbackPayload) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *AttachCallbackPayload) SetUrl(v string) {
	o.Url = v
}

func (o AttachCallbackPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachCallbackPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *AttachCallbackPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachCallbackPayload := _AttachCallbackPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachCallbackPayload)

	if err != nil {
		return err
	}

	*o = AttachCallbackPayload(varAttachCallbackPayload)

	return err
}

type NullableAttachCallbackPayload struct {
	value *AttachCallbackPayload
	isSet bool
}

func (v NullableAttachCallbackPayload) Get() *AttachCallbackPayload {
	return v.value
}

func (v *NullableAttachCallbackPayload) Set(val *AttachCallbackPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachCallbackPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachCallbackPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachCallbackPayload(val *AttachCallbackPayload) *NullableAttachCallbackPayload {
	return &NullableAttachCallbackPayload{value: val, isSet: true}
}

func (v NullableAttachCallbackPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachCallbackPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
