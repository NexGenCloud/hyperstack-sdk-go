/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetTokenPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTokenPayload{}

// GetTokenPayload struct for GetTokenPayload
type GetTokenPayload struct {
	CallbackCode string `json:"callback_code"`
	SessionId    string `json:"session_id"`
}

type _GetTokenPayload GetTokenPayload

// NewGetTokenPayload instantiates a new GetTokenPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTokenPayload(callbackCode string, sessionId string) *GetTokenPayload {
	this := GetTokenPayload{}
	this.CallbackCode = callbackCode
	this.SessionId = sessionId
	return &this
}

// NewGetTokenPayloadWithDefaults instantiates a new GetTokenPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTokenPayloadWithDefaults() *GetTokenPayload {
	this := GetTokenPayload{}
	return &this
}

// GetCallbackCode returns the CallbackCode field value
func (o *GetTokenPayload) GetCallbackCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallbackCode
}

// GetCallbackCodeOk returns a tuple with the CallbackCode field value
// and a boolean to check if the value has been set.
func (o *GetTokenPayload) GetCallbackCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallbackCode, true
}

// SetCallbackCode sets field value
func (o *GetTokenPayload) SetCallbackCode(v string) {
	o.CallbackCode = v
}

// GetSessionId returns the SessionId field value
func (o *GetTokenPayload) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *GetTokenPayload) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *GetTokenPayload) SetSessionId(v string) {
	o.SessionId = v
}

func (o GetTokenPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTokenPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["callback_code"] = o.CallbackCode
	toSerialize["session_id"] = o.SessionId
	return toSerialize, nil
}

func (o *GetTokenPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"callback_code",
		"session_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetTokenPayload := _GetTokenPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetTokenPayload)

	if err != nil {
		return err
	}

	*o = GetTokenPayload(varGetTokenPayload)

	return err
}

type NullableGetTokenPayload struct {
	value *GetTokenPayload
	isSet bool
}

func (v NullableGetTokenPayload) Get() *GetTokenPayload {
	return v.value
}

func (v *NullableGetTokenPayload) Set(val *GetTokenPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTokenPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTokenPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTokenPayload(val *GetTokenPayload) *NullableGetTokenPayload {
	return &NullableGetTokenPayload{value: val, isSet: true}
}

func (v NullableGetTokenPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTokenPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
