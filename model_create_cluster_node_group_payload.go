/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateClusterNodeGroupPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateClusterNodeGroupPayload{}

// CreateClusterNodeGroupPayload struct for CreateClusterNodeGroupPayload
type CreateClusterNodeGroupPayload struct {
	Count      *int32 `json:"count,omitempty"`
	FlavorName string `json:"flavor_name"`
	Name       string `json:"name"`
}

type _CreateClusterNodeGroupPayload CreateClusterNodeGroupPayload

// NewCreateClusterNodeGroupPayload instantiates a new CreateClusterNodeGroupPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateClusterNodeGroupPayload(flavorName string, name string) *CreateClusterNodeGroupPayload {
	this := CreateClusterNodeGroupPayload{}
	this.FlavorName = flavorName
	this.Name = name
	return &this
}

// NewCreateClusterNodeGroupPayloadWithDefaults instantiates a new CreateClusterNodeGroupPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClusterNodeGroupPayloadWithDefaults() *CreateClusterNodeGroupPayload {
	this := CreateClusterNodeGroupPayload{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *CreateClusterNodeGroupPayload) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClusterNodeGroupPayload) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *CreateClusterNodeGroupPayload) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *CreateClusterNodeGroupPayload) SetCount(v int32) {
	o.Count = &v
}

// GetFlavorName returns the FlavorName field value
func (o *CreateClusterNodeGroupPayload) GetFlavorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlavorName
}

// GetFlavorNameOk returns a tuple with the FlavorName field value
// and a boolean to check if the value has been set.
func (o *CreateClusterNodeGroupPayload) GetFlavorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlavorName, true
}

// SetFlavorName sets field value
func (o *CreateClusterNodeGroupPayload) SetFlavorName(v string) {
	o.FlavorName = v
}

// GetName returns the Name field value
func (o *CreateClusterNodeGroupPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateClusterNodeGroupPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateClusterNodeGroupPayload) SetName(v string) {
	o.Name = v
}

func (o CreateClusterNodeGroupPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateClusterNodeGroupPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	toSerialize["flavor_name"] = o.FlavorName
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CreateClusterNodeGroupPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flavor_name",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateClusterNodeGroupPayload := _CreateClusterNodeGroupPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateClusterNodeGroupPayload)

	if err != nil {
		return err
	}

	*o = CreateClusterNodeGroupPayload(varCreateClusterNodeGroupPayload)

	return err
}

type NullableCreateClusterNodeGroupPayload struct {
	value *CreateClusterNodeGroupPayload
	isSet bool
}

func (v NullableCreateClusterNodeGroupPayload) Get() *CreateClusterNodeGroupPayload {
	return v.value
}

func (v *NullableCreateClusterNodeGroupPayload) Set(val *CreateClusterNodeGroupPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateClusterNodeGroupPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateClusterNodeGroupPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateClusterNodeGroupPayload(val *CreateClusterNodeGroupPayload) *NullableCreateClusterNodeGroupPayload {
	return &NullableCreateClusterNodeGroupPayload{value: val, isSet: true}
}

func (v NullableCreateClusterNodeGroupPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateClusterNodeGroupPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
