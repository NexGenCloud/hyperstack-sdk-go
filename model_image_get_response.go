/*
Infrahub-API

Leverage the Infrahub API and Hyperstack platform to easily create, manage, and scale powerful GPU virtual machines and their associated resources.   Access this SDK to automate the deployment of your workloads and streamline your infrastructure management.  To contribute, please raise an issue with a bug report, feature request, feedback, or general inquiry.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hyperstack

import (
	"encoding/json"
)

// checks if the ImageGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageGetResponse{}

// ImageGetResponse struct for ImageGetResponse
type ImageGetResponse struct {
	Images     []ImageFields `json:"images,omitempty"`
	Logo       *string       `json:"logo,omitempty"`
	RegionName *string       `json:"region_name,omitempty"`
	Type       *string       `json:"type,omitempty"`
}

// NewImageGetResponse instantiates a new ImageGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageGetResponse() *ImageGetResponse {
	this := ImageGetResponse{}
	return &this
}

// NewImageGetResponseWithDefaults instantiates a new ImageGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageGetResponseWithDefaults() *ImageGetResponse {
	this := ImageGetResponse{}
	return &this
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ImageGetResponse) GetImages() []ImageFields {
	if o == nil || IsNil(o.Images) {
		var ret []ImageFields
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageGetResponse) GetImagesOk() ([]ImageFields, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ImageGetResponse) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageFields and assigns it to the Images field.
func (o *ImageGetResponse) SetImages(v []ImageFields) {
	o.Images = v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *ImageGetResponse) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageGetResponse) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *ImageGetResponse) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *ImageGetResponse) SetLogo(v string) {
	o.Logo = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *ImageGetResponse) GetRegionName() string {
	if o == nil || IsNil(o.RegionName) {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageGetResponse) GetRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionName) {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *ImageGetResponse) HasRegionName() bool {
	if o != nil && !IsNil(o.RegionName) {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *ImageGetResponse) SetRegionName(v string) {
	o.RegionName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ImageGetResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageGetResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ImageGetResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ImageGetResponse) SetType(v string) {
	o.Type = &v
}

func (o ImageGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.RegionName) {
		toSerialize["region_name"] = o.RegionName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableImageGetResponse struct {
	value *ImageGetResponse
	isSet bool
}

func (v NullableImageGetResponse) Get() *ImageGetResponse {
	return v.value
}

func (v *NullableImageGetResponse) Set(val *ImageGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableImageGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableImageGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageGetResponse(val *ImageGetResponse) *NullableImageGetResponse {
	return &NullableImageGetResponse{value: val, isSet: true}
}

func (v NullableImageGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
