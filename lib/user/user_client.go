// Package user provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package user

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"
)

// AddUserInfoSuccessResponseModel defines model for AddUserInfoSuccessResponseModel.
type AddUserInfoSuccessResponseModel struct {
	Data    *UsersInfoFields `json:"data,omitempty"`
	Message *string          `json:"message,omitempty"`
	Status  *bool            `json:"status,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// Userinfopostpayload defines model for Userinfopostpayload.
type Userinfopostpayload struct {
	BillingAddress1 *string `json:"billing_address1,omitempty"`
	BillingAddress2 *string `json:"billing_address2,omitempty"`
	Business        bool    `json:"business"`
	CompanyName     *string `json:"company_name,omitempty"`
	Country         string  `json:"country"`
	Email           *string `json:"email,omitempty"`
	Name            *string `json:"name,omitempty"`
	Phone           *string `json:"phone,omitempty"`
	State           *string `json:"state,omitempty"`
	VatNumber       *string `json:"vat_number,omitempty"`
	ZipCode         string  `json:"zip_code"`
}

// UsersInfoFields defines model for UsersInfoFields.
type UsersInfoFields struct {
	BillingAddress1 *string    `json:"billing_address1,omitempty"`
	BillingAddress2 *string    `json:"billing_address2,omitempty"`
	Business        *bool      `json:"business,omitempty"`
	CompanyName     *string    `json:"company_name,omitempty"`
	Country         *string    `json:"country,omitempty"`
	CreatedAt       *time.CustomTime `json:"created_at,omitempty"`
	Email           *string    `json:"email,omitempty"`
	Id              *int       `json:"id,omitempty"`
	Name            *string    `json:"name,omitempty"`
	OrganizationId  *int       `json:"organization_id,omitempty"`
	Phone           *string    `json:"phone,omitempty"`
	State           *string    `json:"state,omitempty"`
	VatNumber       *string    `json:"vat_number,omitempty"`
	ZipCode         *string    `json:"zip_code,omitempty"`
}

// UsersInfoListResponse defines model for UsersInfoListResponse.
type UsersInfoListResponse struct {
	Message   *string          `json:"message,omitempty"`
	Status    *bool            `json:"status,omitempty"`
	UsersInfo *UsersInfoFields `json:"users_info,omitempty"`
}

// PostInsertUserInfoJSONRequestBody defines body for PostInsertUserInfo for application/json ContentType.
type PostInsertUserInfoJSONRequestBody = Userinfopostpayload

// PutUpdateUserInfoJSONRequestBody defines body for PutUpdateUserInfo for application/json ContentType.
type PutUpdateUserInfoJSONRequestBody = Userinfopostpayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFetchUserInfo request
	GetFetchUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInsertUserInfoWithBody request with any body
	PostInsertUserInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInsertUserInfo(ctx context.Context, body PostInsertUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUpdateUserInfoWithBody request with any body
	PutUpdateUserInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUpdateUserInfo(ctx context.Context, body PutUpdateUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFetchUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFetchUserInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInsertUserInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInsertUserInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInsertUserInfo(ctx context.Context, body PostInsertUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInsertUserInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUpdateUserInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpdateUserInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUpdateUserInfo(ctx context.Context, body PutUpdateUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUpdateUserInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFetchUserInfoRequest generates requests for GetFetchUserInfo
func NewGetFetchUserInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/user/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInsertUserInfoRequest calls the generic PostInsertUserInfo builder with application/json body
func NewPostInsertUserInfoRequest(server string, body PostInsertUserInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInsertUserInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInsertUserInfoRequestWithBody generates requests for PostInsertUserInfo with any type of body
func NewPostInsertUserInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/user/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUpdateUserInfoRequest calls the generic PutUpdateUserInfo builder with application/json body
func NewPutUpdateUserInfoRequest(server string, body PutUpdateUserInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUpdateUserInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewPutUpdateUserInfoRequestWithBody generates requests for PutUpdateUserInfo with any type of body
func NewPutUpdateUserInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/user/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFetchUserInfoWithResponse request
	GetFetchUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFetchUserInfoResponse, error)

	// PostInsertUserInfoWithBodyWithResponse request with any body
	PostInsertUserInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInsertUserInfoResponse, error)

	PostInsertUserInfoWithResponse(ctx context.Context, body PostInsertUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInsertUserInfoResponse, error)

	// PutUpdateUserInfoWithBodyWithResponse request with any body
	PutUpdateUserInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUpdateUserInfoResponse, error)

	PutUpdateUserInfoWithResponse(ctx context.Context, body PutUpdateUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUpdateUserInfoResponse, error)
}

type GetFetchUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsersInfoListResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetFetchUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFetchUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInsertUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddUserInfoSuccessResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostInsertUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInsertUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUpdateUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddUserInfoSuccessResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutUpdateUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUpdateUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFetchUserInfoWithResponse request returning *GetFetchUserInfoResponse
func (c *ClientWithResponses) GetFetchUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFetchUserInfoResponse, error) {
	rsp, err := c.GetFetchUserInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFetchUserInfoResponse(rsp)
}

// PostInsertUserInfoWithBodyWithResponse request with arbitrary body returning *PostInsertUserInfoResponse
func (c *ClientWithResponses) PostInsertUserInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInsertUserInfoResponse, error) {
	rsp, err := c.PostInsertUserInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInsertUserInfoResponse(rsp)
}

func (c *ClientWithResponses) PostInsertUserInfoWithResponse(ctx context.Context, body PostInsertUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInsertUserInfoResponse, error) {
	rsp, err := c.PostInsertUserInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInsertUserInfoResponse(rsp)
}

// PutUpdateUserInfoWithBodyWithResponse request with arbitrary body returning *PutUpdateUserInfoResponse
func (c *ClientWithResponses) PutUpdateUserInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUpdateUserInfoResponse, error) {
	rsp, err := c.PutUpdateUserInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUpdateUserInfoResponse(rsp)
}

func (c *ClientWithResponses) PutUpdateUserInfoWithResponse(ctx context.Context, body PutUpdateUserInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUpdateUserInfoResponse, error) {
	rsp, err := c.PutUpdateUserInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUpdateUserInfoResponse(rsp)
}

// ParseGetFetchUserInfoResponse parses an HTTP response from a GetFetchUserInfoWithResponse call
func ParseGetFetchUserInfoResponse(rsp *http.Response) (*GetFetchUserInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFetchUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsersInfoListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostInsertUserInfoResponse parses an HTTP response from a PostInsertUserInfoWithResponse call
func ParsePostInsertUserInfoResponse(rsp *http.Response) (*PostInsertUserInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInsertUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddUserInfoSuccessResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutUpdateUserInfoResponse parses an HTTP response from a PutUpdateUserInfoWithResponse call
func ParsePutUpdateUserInfoResponse(rsp *http.Response) (*PutUpdateUserInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUpdateUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddUserInfoSuccessResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
