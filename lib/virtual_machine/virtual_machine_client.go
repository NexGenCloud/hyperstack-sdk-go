// Package virtual_machine provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package virtual_machine

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/nexgen/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// CreateInstancesPayload defines model for Create Instances Payload.
type CreateInstancesPayload struct {
	AssignFloatingIp     *bool                `json:"assign_floating_ip,omitempty"`
	CallbackUrl          *string              `json:"callback_url,omitempty"`
	Count                int                  `json:"count"`
	CreateBootableVolume *bool                `json:"create_bootable_volume,omitempty"`
	EnvironmentName      string               `json:"environment_name"`
	Flavor               *FlavorObjectFields  `json:"flavor,omitempty"`
	FlavorName           *string              `json:"flavor_name,omitempty"`
	ImageName            *string              `json:"image_name,omitempty"`
	KeyName              string               `json:"key_name"`
	Name                 string               `json:"name"`
	Profile              *ProfileObjectFields `json:"profile,omitempty"`
	UserData             *string              `json:"user_data,omitempty"`
	VolumeName           *string              `json:"volume_name,omitempty"`
}

// CreateSecurityRulePayload defines model for Create Security Rule Payload.
type CreateSecurityRulePayload struct {
	Direction      string `json:"direction"`
	Ethertype      string `json:"ethertype"`
	Protocol       string `json:"protocol"`
	RemoteIpPrefix string `json:"remote_ip_prefix"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// FlavorObjectFields defines model for Flavor Object Fields.
type FlavorObjectFields struct {
	Cpu      *int     `json:"cpu,omitempty"`
	Disk     *int     `json:"disk,omitempty"`
	Gpu      *string  `json:"gpu,omitempty"`
	GpuCount *int     `json:"gpu_count,omitempty"`
	Ram      *float32 `json:"ram,omitempty"`
}

// Instance defines model for Instance.
type Instance struct {
	Instance *InstanceAdminFields `json:"instance,omitempty"`
	Message  *string              `json:"message,omitempty"`
	Status   *bool                `json:"status,omitempty"`
}

// InstanceAdminFields defines model for Instance Admin Fields.
type InstanceAdminFields struct {
	CreatedAt         *time.CustomTime                        `json:"created_at,omitempty"`
	Environment       *InstanceEnvironmentFields        `json:"environment,omitempty"`
	FixedIp           *string                           `json:"fixed_ip,omitempty"`
	Flavor            *InstanceFlavorFields             `json:"flavor,omitempty"`
	FloatingIp        *string                           `json:"floating_ip,omitempty"`
	FloatingIpStatus  *string                           `json:"floating_ip_status,omitempty"`
	Id                *int                              `json:"id,omitempty"`
	Image             *InstanceImageFields              `json:"image,omitempty"`
	Keypair           *InstanceKeypairFields            `json:"keypair,omitempty"`
	Name              *string                           `json:"name,omitempty"`
	OpenstackId       *string                           `json:"openstack_id,omitempty"`
	PowerState        *string                           `json:"power_state,omitempty"`
	SecurityRules     *[]SecurityRulesFieldsForInstance `json:"security_rules,omitempty"`
	Status            *string                           `json:"status,omitempty"`
	VmState           *string                           `json:"vm_state,omitempty"`
	VolumeAttachments *[]VolumeAttachmentFields         `json:"volume_attachments,omitempty"`
}

// InstanceEnvironmentFields defines model for Instance Environment Fields.
type InstanceEnvironmentFields struct {
	Name   *string `json:"name,omitempty"`
	OrgId  *int    `json:"org_id,omitempty"`
	Region *string `json:"region,omitempty"`
}

// InstanceFlavorFields defines model for Instance Flavor Fields.
type InstanceFlavorFields struct {
	Cpu      *int     `json:"cpu,omitempty"`
	Disk     *int     `json:"disk,omitempty"`
	Gpu      *string  `json:"gpu,omitempty"`
	GpuCount *int     `json:"gpu_count,omitempty"`
	Id       *int     `json:"id,omitempty"`
	Name     *string  `json:"name,omitempty"`
	Ram      *float32 `json:"ram,omitempty"`
}

// InstanceImageFields defines model for Instance Image Fields.
type InstanceImageFields struct {
	Name *string `json:"name,omitempty"`
}

// InstanceKeypairFields defines model for Instance Keypair Fields.
type InstanceKeypairFields struct {
	Name *string `json:"name,omitempty"`
}

// InstanceResizePayload defines model for InstanceResizePayload.
type InstanceResizePayload struct {
	Flavor     *FlavorObjectFields `json:"flavor,omitempty"`
	FlavorName *string             `json:"flavor_name,omitempty"`
}

// Instances defines model for Instances.
type Instances struct {
	InstanceCount *int                   `json:"instance_count,omitempty"`
	Instances     *[]InstanceAdminFields `json:"instances,omitempty"`
	Message       *string                `json:"message,omitempty"`
	Status        *bool                  `json:"status,omitempty"`
}

// ProfileObjectFields defines model for Profile Object Fields.
type ProfileObjectFields struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// ResponseModel defines model for ResponseModel.
type ResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// SecurityGroupRule defines model for Security Group Rule.
type SecurityGroupRule struct {
	Message      *string                  `json:"message,omitempty"`
	SecurityRule *SecurityGroupRuleFields `json:"security_rule,omitempty"`
	Status       *bool                    `json:"status,omitempty"`
}

// SecurityGroupRuleFields defines model for Security Group Rule Fields.
type SecurityGroupRuleFields struct {
	CreatedAt      *time.CustomTime `json:"created_at,omitempty"`
	Direction      *string    `json:"direction,omitempty"`
	Ethertype      *string    `json:"ethertype,omitempty"`
	Id             *int       `json:"id,omitempty"`
	PortRangeMax   *int       `json:"port_range_max,omitempty"`
	PortRangeMin   *int       `json:"port_range_min,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	RemoteIpPrefix *string    `json:"remote_ip_prefix,omitempty"`
	Status         *string    `json:"status,omitempty"`
}

// SecurityRulesFieldsForInstance defines model for Security Rules Fields for Instance.
type SecurityRulesFieldsForInstance struct {
	CreatedAt      *time.CustomTime `json:"created_at,omitempty"`
	Direction      *string    `json:"direction,omitempty"`
	Ethertype      *string    `json:"ethertype,omitempty"`
	Id             *int       `json:"id,omitempty"`
	PortRangeMax   *int       `json:"port_range_max,omitempty"`
	PortRangeMin   *int       `json:"port_range_min,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	RemoteIpPrefix *string    `json:"remote_ip_prefix,omitempty"`
	Status         *string    `json:"status,omitempty"`
}

// VolumeAttachmentFields defines model for Volume Attachment Fields.
type VolumeAttachmentFields struct {
	CreatedAt *time.CustomTime               `json:"created_at,omitempty"`
	Device    *string                  `json:"device,omitempty"`
	Status    *string                  `json:"status,omitempty"`
	Volume    *VolumeFieldsForInstance `json:"volume,omitempty"`
}

// VolumeFieldsForInstance defines model for Volume Fields for Instance.
type VolumeFieldsForInstance struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Size        *int    `json:"size,omitempty"`
	VolumeType  *string `json:"volume_type,omitempty"`
}

// RetrievedMetricsSuccessfullyParams defines parameters for RetrievedMetricsSuccessfully.
type RetrievedMetricsSuccessfullyParams struct {
	Duration *string `form:"duration,omitempty" json:"duration,omitempty"`
}

// CreateInstancesJSONRequestBody defines body for CreateInstances for application/json ContentType.
type CreateInstancesJSONRequestBody = CreateInstancesPayload

// AddSecurityRuleJSONRequestBody defines body for AddSecurityRule for application/json ContentType.
type AddSecurityRuleJSONRequestBody = CreateSecurityRulePayload

// ResizeVirtualMachineJSONRequestBody defines body for ResizeVirtualMachine for application/json ContentType.
type ResizeVirtualMachineJSONRequestBody = InstanceResizePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListInstances request
	ListInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInstancesWithBody request with any body
	CreateInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInstances(ctx context.Context, body CreateInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAnInstance request
	DeleteAnInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnInstanceDetails request
	GetAnInstanceDetails(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HardRebootInstance request
	HardRebootInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddSecurityRuleWithBody request with any body
	AddSecurityRuleWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddSecurityRule(ctx context.Context, id int, body AddSecurityRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartInstance request
	StartInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopInstance request
	StopInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HibernateInstance request
	HibernateInstance(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreInstanceFromHibernation request
	RestoreInstanceFromHibernation(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrievedMetricsSuccessfully request
	RetrievedMetricsSuccessfully(ctx context.Context, virtualMachineId int, params *RetrievedMetricsSuccessfullyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResizeVirtualMachineWithBody request with any body
	ResizeVirtualMachineWithBody(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResizeVirtualMachine(ctx context.Context, virtualMachineId int, body ResizeVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteASecurityRule request
	DeleteASecurityRule(ctx context.Context, virtualMachineId int, sgRuleId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListInstances(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInstancesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInstances(ctx context.Context, body CreateInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAnInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAnInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnInstanceDetails(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnInstanceDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HardRebootInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHardRebootInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSecurityRuleWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSecurityRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddSecurityRule(ctx context.Context, id int, body AddSecurityRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddSecurityRuleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopInstance(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopInstanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HibernateInstance(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHibernateInstanceRequest(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreInstanceFromHibernation(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreInstanceFromHibernationRequest(c.Server, virtualMachineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrievedMetricsSuccessfully(ctx context.Context, virtualMachineId int, params *RetrievedMetricsSuccessfullyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrievedMetricsSuccessfullyRequest(c.Server, virtualMachineId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeVirtualMachineWithBody(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeVirtualMachineRequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResizeVirtualMachine(ctx context.Context, virtualMachineId int, body ResizeVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResizeVirtualMachineRequest(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteASecurityRule(ctx context.Context, virtualMachineId int, sgRuleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteASecurityRuleRequest(c.Server, virtualMachineId, sgRuleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListInstancesRequest generates requests for ListInstances
func NewListInstancesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInstancesRequest calls the generic CreateInstances builder with application/json body
func NewCreateInstancesRequest(server string, body CreateInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInstancesRequestWithBody generates requests for CreateInstances with any type of body
func NewCreateInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAnInstanceRequest generates requests for DeleteAnInstance
func NewDeleteAnInstanceRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnInstanceDetailsRequest generates requests for GetAnInstanceDetails
func NewGetAnInstanceDetailsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHardRebootInstanceRequest generates requests for HardRebootInstance
func NewHardRebootInstanceRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/hard-reboot", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddSecurityRuleRequest calls the generic AddSecurityRule builder with application/json body
func NewAddSecurityRuleRequest(server string, id int, body AddSecurityRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddSecurityRuleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddSecurityRuleRequestWithBody generates requests for AddSecurityRule with any type of body
func NewAddSecurityRuleRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/sg-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartInstanceRequest generates requests for StartInstance
func NewStartInstanceRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopInstanceRequest generates requests for StopInstance
func NewStopInstanceRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHibernateInstanceRequest generates requests for HibernateInstance
func NewHibernateInstanceRequest(server string, virtualMachineId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/hibernate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreInstanceFromHibernationRequest generates requests for RestoreInstanceFromHibernation
func NewRestoreInstanceFromHibernationRequest(server string, virtualMachineId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/hibernate-restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrievedMetricsSuccessfullyRequest generates requests for RetrievedMetricsSuccessfully
func NewRetrievedMetricsSuccessfullyRequest(server string, virtualMachineId int, params *RetrievedMetricsSuccessfullyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Duration != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, *params.Duration); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResizeVirtualMachineRequest calls the generic ResizeVirtualMachine builder with application/json body
func NewResizeVirtualMachineRequest(server string, virtualMachineId int, body ResizeVirtualMachineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResizeVirtualMachineRequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewResizeVirtualMachineRequestWithBody generates requests for ResizeVirtualMachine with any type of body
func NewResizeVirtualMachineRequestWithBody(server string, virtualMachineId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/resize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteASecurityRuleRequest generates requests for DeleteASecurityRule
func NewDeleteASecurityRuleRequest(server string, virtualMachineId int, sgRuleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "sg_rule_id", runtime.ParamLocationPath, sgRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/sg-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListInstancesWithResponse request
	ListInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInstancesResponse, error)

	// CreateInstancesWithBodyWithResponse request with any body
	CreateInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInstancesResponse, error)

	CreateInstancesWithResponse(ctx context.Context, body CreateInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInstancesResponse, error)

	// DeleteAnInstanceWithResponse request
	DeleteAnInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAnInstanceResponse, error)

	// GetAnInstanceDetailsWithResponse request
	GetAnInstanceDetailsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAnInstanceDetailsResponse, error)

	// HardRebootInstanceWithResponse request
	HardRebootInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*HardRebootInstanceResponse, error)

	// AddSecurityRuleWithBodyWithResponse request with any body
	AddSecurityRuleWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSecurityRuleResponse, error)

	AddSecurityRuleWithResponse(ctx context.Context, id int, body AddSecurityRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSecurityRuleResponse, error)

	// StartInstanceWithResponse request
	StartInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StartInstanceResponse, error)

	// StopInstanceWithResponse request
	StopInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StopInstanceResponse, error)

	// HibernateInstanceWithResponse request
	HibernateInstanceWithResponse(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*HibernateInstanceResponse, error)

	// RestoreInstanceFromHibernationWithResponse request
	RestoreInstanceFromHibernationWithResponse(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*RestoreInstanceFromHibernationResponse, error)

	// RetrievedMetricsSuccessfullyWithResponse request
	RetrievedMetricsSuccessfullyWithResponse(ctx context.Context, virtualMachineId int, params *RetrievedMetricsSuccessfullyParams, reqEditors ...RequestEditorFn) (*RetrievedMetricsSuccessfullyResponse, error)

	// ResizeVirtualMachineWithBodyWithResponse request with any body
	ResizeVirtualMachineWithBodyWithResponse(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeVirtualMachineResponse, error)

	ResizeVirtualMachineWithResponse(ctx context.Context, virtualMachineId int, body ResizeVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*ResizeVirtualMachineResponse, error)

	// DeleteASecurityRuleWithResponse request
	DeleteASecurityRuleWithResponse(ctx context.Context, virtualMachineId int, sgRuleId int, reqEditors ...RequestEditorFn) (*DeleteASecurityRuleResponse, error)
}

type ListInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instances
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r ListInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instances
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAnInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteAnInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAnInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnInstanceDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAnInstanceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnInstanceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HardRebootInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r HardRebootInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HardRebootInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddSecurityRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SecurityGroupRule
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r AddSecurityRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddSecurityRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r StartInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r StopInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HibernateInstanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r HibernateInstanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HibernateInstanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreInstanceFromHibernationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RestoreInstanceFromHibernationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreInstanceFromHibernationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrievedMetricsSuccessfullyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON406      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrievedMetricsSuccessfullyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrievedMetricsSuccessfullyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResizeVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r ResizeVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResizeVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteASecurityRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteASecurityRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteASecurityRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListInstancesWithResponse request returning *ListInstancesResponse
func (c *ClientWithResponses) ListInstancesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListInstancesResponse, error) {
	rsp, err := c.ListInstances(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInstancesResponse(rsp)
}

// CreateInstancesWithBodyWithResponse request with arbitrary body returning *CreateInstancesResponse
func (c *ClientWithResponses) CreateInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInstancesResponse, error) {
	rsp, err := c.CreateInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInstancesResponse(rsp)
}

func (c *ClientWithResponses) CreateInstancesWithResponse(ctx context.Context, body CreateInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInstancesResponse, error) {
	rsp, err := c.CreateInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInstancesResponse(rsp)
}

// DeleteAnInstanceWithResponse request returning *DeleteAnInstanceResponse
func (c *ClientWithResponses) DeleteAnInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteAnInstanceResponse, error) {
	rsp, err := c.DeleteAnInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAnInstanceResponse(rsp)
}

// GetAnInstanceDetailsWithResponse request returning *GetAnInstanceDetailsResponse
func (c *ClientWithResponses) GetAnInstanceDetailsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAnInstanceDetailsResponse, error) {
	rsp, err := c.GetAnInstanceDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnInstanceDetailsResponse(rsp)
}

// HardRebootInstanceWithResponse request returning *HardRebootInstanceResponse
func (c *ClientWithResponses) HardRebootInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*HardRebootInstanceResponse, error) {
	rsp, err := c.HardRebootInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHardRebootInstanceResponse(rsp)
}

// AddSecurityRuleWithBodyWithResponse request with arbitrary body returning *AddSecurityRuleResponse
func (c *ClientWithResponses) AddSecurityRuleWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddSecurityRuleResponse, error) {
	rsp, err := c.AddSecurityRuleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSecurityRuleResponse(rsp)
}

func (c *ClientWithResponses) AddSecurityRuleWithResponse(ctx context.Context, id int, body AddSecurityRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AddSecurityRuleResponse, error) {
	rsp, err := c.AddSecurityRule(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddSecurityRuleResponse(rsp)
}

// StartInstanceWithResponse request returning *StartInstanceResponse
func (c *ClientWithResponses) StartInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StartInstanceResponse, error) {
	rsp, err := c.StartInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartInstanceResponse(rsp)
}

// StopInstanceWithResponse request returning *StopInstanceResponse
func (c *ClientWithResponses) StopInstanceWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*StopInstanceResponse, error) {
	rsp, err := c.StopInstance(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopInstanceResponse(rsp)
}

// HibernateInstanceWithResponse request returning *HibernateInstanceResponse
func (c *ClientWithResponses) HibernateInstanceWithResponse(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*HibernateInstanceResponse, error) {
	rsp, err := c.HibernateInstance(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHibernateInstanceResponse(rsp)
}

// RestoreInstanceFromHibernationWithResponse request returning *RestoreInstanceFromHibernationResponse
func (c *ClientWithResponses) RestoreInstanceFromHibernationWithResponse(ctx context.Context, virtualMachineId int, reqEditors ...RequestEditorFn) (*RestoreInstanceFromHibernationResponse, error) {
	rsp, err := c.RestoreInstanceFromHibernation(ctx, virtualMachineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreInstanceFromHibernationResponse(rsp)
}

// RetrievedMetricsSuccessfullyWithResponse request returning *RetrievedMetricsSuccessfullyResponse
func (c *ClientWithResponses) RetrievedMetricsSuccessfullyWithResponse(ctx context.Context, virtualMachineId int, params *RetrievedMetricsSuccessfullyParams, reqEditors ...RequestEditorFn) (*RetrievedMetricsSuccessfullyResponse, error) {
	rsp, err := c.RetrievedMetricsSuccessfully(ctx, virtualMachineId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrievedMetricsSuccessfullyResponse(rsp)
}

// ResizeVirtualMachineWithBodyWithResponse request with arbitrary body returning *ResizeVirtualMachineResponse
func (c *ClientWithResponses) ResizeVirtualMachineWithBodyWithResponse(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResizeVirtualMachineResponse, error) {
	rsp, err := c.ResizeVirtualMachineWithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeVirtualMachineResponse(rsp)
}

func (c *ClientWithResponses) ResizeVirtualMachineWithResponse(ctx context.Context, virtualMachineId int, body ResizeVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*ResizeVirtualMachineResponse, error) {
	rsp, err := c.ResizeVirtualMachine(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResizeVirtualMachineResponse(rsp)
}

// DeleteASecurityRuleWithResponse request returning *DeleteASecurityRuleResponse
func (c *ClientWithResponses) DeleteASecurityRuleWithResponse(ctx context.Context, virtualMachineId int, sgRuleId int, reqEditors ...RequestEditorFn) (*DeleteASecurityRuleResponse, error) {
	rsp, err := c.DeleteASecurityRule(ctx, virtualMachineId, sgRuleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteASecurityRuleResponse(rsp)
}

// ParseListInstancesResponse parses an HTTP response from a ListInstancesWithResponse call
func ParseListInstancesResponse(rsp *http.Response) (*ListInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instances
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateInstancesResponse parses an HTTP response from a CreateInstancesWithResponse call
func ParseCreateInstancesResponse(rsp *http.Response) (*CreateInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instances
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteAnInstanceResponse parses an HTTP response from a DeleteAnInstanceWithResponse call
func ParseDeleteAnInstanceResponse(rsp *http.Response) (*DeleteAnInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAnInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAnInstanceDetailsResponse parses an HTTP response from a GetAnInstanceDetailsWithResponse call
func ParseGetAnInstanceDetailsResponse(rsp *http.Response) (*GetAnInstanceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnInstanceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHardRebootInstanceResponse parses an HTTP response from a HardRebootInstanceWithResponse call
func ParseHardRebootInstanceResponse(rsp *http.Response) (*HardRebootInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HardRebootInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAddSecurityRuleResponse parses an HTTP response from a AddSecurityRuleWithResponse call
func ParseAddSecurityRuleResponse(rsp *http.Response) (*AddSecurityRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddSecurityRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SecurityGroupRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseStartInstanceResponse parses an HTTP response from a StartInstanceWithResponse call
func ParseStartInstanceResponse(rsp *http.Response) (*StartInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopInstanceResponse parses an HTTP response from a StopInstanceWithResponse call
func ParseStopInstanceResponse(rsp *http.Response) (*StopInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHibernateInstanceResponse parses an HTTP response from a HibernateInstanceWithResponse call
func ParseHibernateInstanceResponse(rsp *http.Response) (*HibernateInstanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HibernateInstanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRestoreInstanceFromHibernationResponse parses an HTTP response from a RestoreInstanceFromHibernationWithResponse call
func ParseRestoreInstanceFromHibernationResponse(rsp *http.Response) (*RestoreInstanceFromHibernationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreInstanceFromHibernationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrievedMetricsSuccessfullyResponse parses an HTTP response from a RetrievedMetricsSuccessfullyWithResponse call
func ParseRetrievedMetricsSuccessfullyResponse(rsp *http.Response) (*RetrievedMetricsSuccessfullyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrievedMetricsSuccessfullyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseResizeVirtualMachineResponse parses an HTTP response from a ResizeVirtualMachineWithResponse call
func ParseResizeVirtualMachineResponse(rsp *http.Response) (*ResizeVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResizeVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDeleteASecurityRuleResponse parses an HTTP response from a DeleteASecurityRuleWithResponse call
func ParseDeleteASecurityRuleResponse(rsp *http.Response) (*DeleteASecurityRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteASecurityRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
