// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package auth

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// AccessTokenField defines model for AccessTokenField.
type AccessTokenField struct {
	AccessToken *string `json:"access_token,omitempty"`
}

// AuthGetTokenResponseModel defines model for AuthGetTokenResponseModel.
type AuthGetTokenResponseModel struct {
	Message *string           `json:"message,omitempty"`
	Status  *bool             `json:"status,omitempty"`
	Token   *AccessTokenField `json:"token,omitempty"`
}

// AuthUserFields defines model for AuthUserFields.
type AuthUserFields struct {
	CreatedAt *time.CustomTime `json:"created_at,omitempty"`
	Email     *string    `json:"email,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Username  *string    `json:"username,omitempty"`
}

// AuthUserInfoResponseModel defines model for AuthUserInfoResponseModel.
type AuthUserInfoResponseModel struct {
	Message *string         `json:"message,omitempty"`
	Status  *bool           `json:"status,omitempty"`
	User    *AuthUserFields `json:"user,omitempty"`
}

// CommonResponseModel defines model for CommonResponseModel.
type CommonResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// MFAStatusFields defines model for MFAStatusFields.
type MFAStatusFields struct {
	// MfaEnabled Whether MFA is enabled for the user
	MfaEnabled bool `json:"mfa_enabled"`
}

// MFAStatusResponse defines model for MFAStatusResponse.
type MFAStatusResponse struct {
	Message *string          `json:"message,omitempty"`
	Mfa     *MFAStatusFields `json:"mfa,omitempty"`
	Status  *bool            `json:"status,omitempty"`
}

// OrganizationFields defines model for OrganizationFields.
type OrganizationFields struct {
	CreatedAt       *time.CustomTime                       `json:"created_at,omitempty"`
	Credit          *int                             `json:"credit,omitempty"`
	Id              int                              `json:"id"`
	Name            string                           `json:"name"`
	Threshold       *int                             `json:"threshold,omitempty"`
	TotalClusters   *int                             `json:"total_clusters,omitempty"`
	TotalContainers *int                             `json:"total_containers,omitempty"`
	TotalInstances  *int                             `json:"total_instances,omitempty"`
	TotalVolumes    *int                             `json:"total_volumes,omitempty"`
	Users           *[]OrganizationUserResponseModel `json:"users,omitempty"`
}

// OrganizationUserResponseModel defines model for OrganizationUserResponseModel.
type OrganizationUserResponseModel struct {
	Email     *string          `json:"email,omitempty"`
	Id        *int             `json:"id,omitempty"`
	JoinedAt  *time.CustomTime       `json:"joined_at,omitempty"`
	LastLogin *time.CustomTime       `json:"last_login,omitempty"`
	Name      *string          `json:"name,omitempty"`
	RbacRoles *[]RbacRoleField `json:"rbac_roles,omitempty"`
	Role      *string          `json:"role,omitempty"`
	Sub       *string          `json:"sub,omitempty"`
	Username  *string          `json:"username,omitempty"`
}

// RbacRoleField defines model for RbacRoleField.
type RbacRoleField struct {
	Name *string `json:"name,omitempty"`
}

// UserOrganizationsResponse defines model for UserOrganizationsResponse.
type UserOrganizationsResponse struct {
	Organizations *[]OrganizationFields `json:"organizations,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RetrieveAuthenticatedUserDetails request
	RetrieveAuthenticatedUserDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserMFAStatus request
	GetUserMFAStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableMFA request
	DisableMFA(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserOrganizations request
	GetUserOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeOrganizationForToken request
	ChangeOrganizationForToken(ctx context.Context, orgId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RetrieveAuthenticatedUserDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAuthenticatedUserDetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMFAStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserMFAStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableMFA(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableMFARequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeOrganizationForToken(ctx context.Context, orgId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeOrganizationForTokenRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRetrieveAuthenticatedUserDetailsRequest generates requests for RetrieveAuthenticatedUserDetails
func NewRetrieveAuthenticatedUserDetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserMFAStatusRequest generates requests for GetUserMFAStatus
func NewGetUserMFAStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/me/mfa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDisableMFARequest generates requests for DisableMFA
func NewDisableMFARequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/me/mfa/disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserOrganizationsRequest generates requests for GetUserOrganizations
func NewGetUserOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/me/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeOrganizationForTokenRequest generates requests for ChangeOrganizationForToken
func NewChangeOrganizationForTokenRequest(server string, orgId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token/change-org/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RetrieveAuthenticatedUserDetailsWithResponse request
	RetrieveAuthenticatedUserDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedUserDetailsResponse, error)

	// GetUserMFAStatusWithResponse request
	GetUserMFAStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMFAStatusResponse, error)

	// DisableMFAWithResponse request
	DisableMFAWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DisableMFAResponse, error)

	// GetUserOrganizationsWithResponse request
	GetUserOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserOrganizationsResponse, error)

	// ChangeOrganizationForTokenWithResponse request
	ChangeOrganizationForTokenWithResponse(ctx context.Context, orgId int, reqEditors ...RequestEditorFn) (*ChangeOrganizationForTokenResponse, error)
}

type RetrieveAuthenticatedUserDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthUserInfoResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveAuthenticatedUserDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAuthenticatedUserDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMFAStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MFAStatusResponse
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON500      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserMFAStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMFAStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableMFAResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON500      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DisableMFAResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableMFAResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserOrganizationsResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeOrganizationForTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthGetTokenResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r ChangeOrganizationForTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeOrganizationForTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RetrieveAuthenticatedUserDetailsWithResponse request returning *RetrieveAuthenticatedUserDetailsResponse
func (c *ClientWithResponses) RetrieveAuthenticatedUserDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedUserDetailsResponse, error) {
	rsp, err := c.RetrieveAuthenticatedUserDetails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAuthenticatedUserDetailsResponse(rsp)
}

// GetUserMFAStatusWithResponse request returning *GetUserMFAStatusResponse
func (c *ClientWithResponses) GetUserMFAStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserMFAStatusResponse, error) {
	rsp, err := c.GetUserMFAStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserMFAStatusResponse(rsp)
}

// DisableMFAWithResponse request returning *DisableMFAResponse
func (c *ClientWithResponses) DisableMFAWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DisableMFAResponse, error) {
	rsp, err := c.DisableMFA(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableMFAResponse(rsp)
}

// GetUserOrganizationsWithResponse request returning *GetUserOrganizationsResponse
func (c *ClientWithResponses) GetUserOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserOrganizationsResponse, error) {
	rsp, err := c.GetUserOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserOrganizationsResponse(rsp)
}

// ChangeOrganizationForTokenWithResponse request returning *ChangeOrganizationForTokenResponse
func (c *ClientWithResponses) ChangeOrganizationForTokenWithResponse(ctx context.Context, orgId int, reqEditors ...RequestEditorFn) (*ChangeOrganizationForTokenResponse, error) {
	rsp, err := c.ChangeOrganizationForToken(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeOrganizationForTokenResponse(rsp)
}

// ParseRetrieveAuthenticatedUserDetailsResponse parses an HTTP response from a RetrieveAuthenticatedUserDetailsWithResponse call
func ParseRetrieveAuthenticatedUserDetailsResponse(rsp *http.Response) (*RetrieveAuthenticatedUserDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAuthenticatedUserDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthUserInfoResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUserMFAStatusResponse parses an HTTP response from a GetUserMFAStatusWithResponse call
func ParseGetUserMFAStatusResponse(rsp *http.Response) (*GetUserMFAStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserMFAStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MFAStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDisableMFAResponse parses an HTTP response from a DisableMFAWithResponse call
func ParseDisableMFAResponse(rsp *http.Response) (*DisableMFAResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableMFAResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserOrganizationsResponse parses an HTTP response from a GetUserOrganizationsWithResponse call
func ParseGetUserOrganizationsResponse(rsp *http.Response) (*GetUserOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserOrganizationsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseChangeOrganizationForTokenResponse parses an HTTP response from a ChangeOrganizationForTokenWithResponse call
func ParseChangeOrganizationForTokenResponse(rsp *http.Response) (*ChangeOrganizationForTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeOrganizationForTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthGetTokenResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
