// Package organization provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package organization

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"
)

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// GetOrganizationResponseModel defines model for GetOrganizationResponseModel.
type GetOrganizationResponseModel struct {
	Message      *string             `json:"message,omitempty"`
	Organization *OrganizationFields `json:"organization,omitempty"`
	Status       *bool               `json:"status,omitempty"`
}

// OrganizationFields defines model for OrganizationFields.
type OrganizationFields struct {
	CreatedAt       *time.CustomTime                       `json:"created_at,omitempty"`
	Credit          *int                             `json:"credit,omitempty"`
	Id              int                              `json:"id"`
	Name            string                           `json:"name"`
	Threshold       *int                             `json:"threshold,omitempty"`
	TotalClusters   *int                             `json:"total_clusters,omitempty"`
	TotalContainers *int                             `json:"total_containers,omitempty"`
	TotalInstances  *int                             `json:"total_instances,omitempty"`
	TotalVolumes    *int                             `json:"total_volumes,omitempty"`
	Users           *[]OrganizationUserResponseModel `json:"users,omitempty"`
}

// OrganizationUserResponseModel defines model for OrganizationUserResponseModel.
type OrganizationUserResponseModel struct {
	Email     *string          `json:"email,omitempty"`
	Id        *int             `json:"id,omitempty"`
	JoinedAt  *time.CustomTime       `json:"joined_at,omitempty"`
	LastLogin *time.CustomTime       `json:"last_login,omitempty"`
	Name      *string          `json:"name,omitempty"`
	RbacRoles *[]RbacRoleField `json:"rbac_roles,omitempty"`
	Role      *string          `json:"role,omitempty"`
	Sub       *string          `json:"sub,omitempty"`
	Username  *string          `json:"username,omitempty"`
}

// RbacRoleField defines model for RbacRoleField.
type RbacRoleField struct {
	Name *string `json:"name,omitempty"`
}

// RemoveMemberFromOrganizationResponseModel defines model for RemoveMemberFromOrganizationResponseModel.
type RemoveMemberFromOrganizationResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// RemoveMemberPayload defines model for RemoveMemberPayload.
type RemoveMemberPayload struct {
	// Email The email of the user to be removed.
	Email string `json:"email"`
}

// UpdateOrganizationPayload defines model for UpdateOrganizationPayload.
type UpdateOrganizationPayload struct {
	// Name The new name for the organition
	Name string `json:"name"`
}

// UpdateOrganizationResponseModel defines model for UpdateOrganizationResponseModel.
type UpdateOrganizationResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// RemoveOrganizationMemberJSONRequestBody defines body for RemoveOrganizationMember for application/json ContentType.
type RemoveOrganizationMemberJSONRequestBody = RemoveMemberPayload

// UpdateOrganizationInformationJSONRequestBody defines body for UpdateOrganizationInformation for application/json ContentType.
type UpdateOrganizationInformationJSONRequestBody = UpdateOrganizationPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RetrieveOrganizationInformation request
	RetrieveOrganizationInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveOrganizationMemberWithBody request with any body
	RemoveOrganizationMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveOrganizationMember(ctx context.Context, body RemoveOrganizationMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationInformationWithBody request with any body
	UpdateOrganizationInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationInformation(ctx context.Context, body UpdateOrganizationInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RetrieveOrganizationInformation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveOrganizationInformationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveOrganizationMemberWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveOrganizationMemberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveOrganizationMember(ctx context.Context, body RemoveOrganizationMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveOrganizationMemberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationInformationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationInformationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationInformation(ctx context.Context, body UpdateOrganizationInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationInformationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRetrieveOrganizationInformationRequest generates requests for RetrieveOrganizationInformation
func NewRetrieveOrganizationInformationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveOrganizationMemberRequest calls the generic RemoveOrganizationMember builder with application/json body
func NewRemoveOrganizationMemberRequest(server string, body RemoveOrganizationMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveOrganizationMemberRequestWithBody(server, "application/json", bodyReader)
}

// NewRemoveOrganizationMemberRequestWithBody generates requests for RemoveOrganizationMember with any type of body
func NewRemoveOrganizationMemberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/organizations/remove-member")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOrganizationInformationRequest calls the generic UpdateOrganizationInformation builder with application/json body
func NewUpdateOrganizationInformationRequest(server string, body UpdateOrganizationInformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationInformationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateOrganizationInformationRequestWithBody generates requests for UpdateOrganizationInformation with any type of body
func NewUpdateOrganizationInformationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/organizations/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RetrieveOrganizationInformationWithResponse request
	RetrieveOrganizationInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetrieveOrganizationInformationResponse, error)

	// RemoveOrganizationMemberWithBodyWithResponse request with any body
	RemoveOrganizationMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveOrganizationMemberResponse, error)

	RemoveOrganizationMemberWithResponse(ctx context.Context, body RemoveOrganizationMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveOrganizationMemberResponse, error)

	// UpdateOrganizationInformationWithBodyWithResponse request with any body
	UpdateOrganizationInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationInformationResponse, error)

	UpdateOrganizationInformationWithResponse(ctx context.Context, body UpdateOrganizationInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationInformationResponse, error)
}

type RetrieveOrganizationInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOrganizationResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveOrganizationInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveOrganizationInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveOrganizationMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RemoveMemberFromOrganizationResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RemoveOrganizationMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveOrganizationMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateOrganizationResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RetrieveOrganizationInformationWithResponse request returning *RetrieveOrganizationInformationResponse
func (c *ClientWithResponses) RetrieveOrganizationInformationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetrieveOrganizationInformationResponse, error) {
	rsp, err := c.RetrieveOrganizationInformation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveOrganizationInformationResponse(rsp)
}

// RemoveOrganizationMemberWithBodyWithResponse request with arbitrary body returning *RemoveOrganizationMemberResponse
func (c *ClientWithResponses) RemoveOrganizationMemberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveOrganizationMemberResponse, error) {
	rsp, err := c.RemoveOrganizationMemberWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveOrganizationMemberResponse(rsp)
}

func (c *ClientWithResponses) RemoveOrganizationMemberWithResponse(ctx context.Context, body RemoveOrganizationMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveOrganizationMemberResponse, error) {
	rsp, err := c.RemoveOrganizationMember(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveOrganizationMemberResponse(rsp)
}

// UpdateOrganizationInformationWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationInformationResponse
func (c *ClientWithResponses) UpdateOrganizationInformationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationInformationResponse, error) {
	rsp, err := c.UpdateOrganizationInformationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationInformationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationInformationWithResponse(ctx context.Context, body UpdateOrganizationInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationInformationResponse, error) {
	rsp, err := c.UpdateOrganizationInformation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationInformationResponse(rsp)
}

// ParseRetrieveOrganizationInformationResponse parses an HTTP response from a RetrieveOrganizationInformationWithResponse call
func ParseRetrieveOrganizationInformationResponse(rsp *http.Response) (*RetrieveOrganizationInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveOrganizationInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRemoveOrganizationMemberResponse parses an HTTP response from a RemoveOrganizationMemberWithResponse call
func ParseRemoveOrganizationMemberResponse(rsp *http.Response) (*RemoveOrganizationMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveOrganizationMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemoveMemberFromOrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationInformationResponse parses an HTTP response from a UpdateOrganizationInformationWithResponse call
func ParseUpdateOrganizationInformationResponse(rsp *http.Response) (*UpdateOrganizationInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateOrganizationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
