// Package Snapshots provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package Snapshots

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// CreateImage defines model for CreateImage.
type CreateImage struct {
	Id      *int    `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// CreateImagePayload defines model for CreateImagePayload.
type CreateImagePayload struct {
	// Labels List of labels to attach to the image
	Labels *[]string `json:"labels,omitempty"`

	// Name Name for the new custom image
	Name string `json:"name"`
}

// EnvironmentFeatures defines model for EnvironmentFeatures.
type EnvironmentFeatures struct {
	NetworkOptimised *bool `json:"network_optimised,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// Instance defines model for Instance.
type Instance struct {
	Instance *InstanceFields `json:"instance,omitempty"`
	Message  *string         `json:"message,omitempty"`
	Status   *bool           `json:"status,omitempty"`
}

// InstanceEnvironmentFields defines model for InstanceEnvironmentFields.
type InstanceEnvironmentFields struct {
	Features *EnvironmentFeatures `json:"features,omitempty"`
	Id       *int                 `json:"id,omitempty"`
	Name     *string              `json:"name,omitempty"`
	OrgId    *int                 `json:"org_id,omitempty"`
	Region   *string              `json:"region,omitempty"`
}

// InstanceFields defines model for InstanceFields.
type InstanceFields struct {
	CallbackUrl             *string                           `json:"callback_url,omitempty"`
	ContractId              *int                              `json:"contract_id,omitempty"`
	CreatedAt               *time.CustomTime                        `json:"created_at,omitempty"`
	Environment             *InstanceEnvironmentFields        `json:"environment,omitempty"`
	FixedIp                 *string                           `json:"fixed_ip,omitempty"`
	Flavor                  *InstanceFlavorFields             `json:"flavor,omitempty"`
	FloatingIp              *string                           `json:"floating_ip,omitempty"`
	FloatingIpStatus        *string                           `json:"floating_ip_status,omitempty"`
	Id                      *int                              `json:"id,omitempty"`
	Image                   *InstanceImageFields              `json:"image,omitempty"`
	Keypair                 *InstanceKeypairFields            `json:"keypair,omitempty"`
	Labels                  *[]string                         `json:"labels,omitempty"`
	Locked                  *bool                             `json:"locked,omitempty"`
	Name                    *string                           `json:"name,omitempty"`
	Os                      *string                           `json:"os,omitempty"`
	PortRandomization       *bool                             `json:"port_randomization,omitempty"`
	PortRandomizationStatus *string                           `json:"port_randomization_status,omitempty"`
	PowerState              *string                           `json:"power_state,omitempty"`
	SecurityRules           *[]SecurityRulesFieldsforInstance `json:"security_rules,omitempty"`
	Status                  *string                           `json:"status,omitempty"`
	VmState                 *string                           `json:"vm_state,omitempty"`
	VolumeAttachments       *[]VolumeAttachmentFields         `json:"volume_attachments,omitempty"`
}

// InstanceFlavorFields defines model for InstanceFlavorFields.
type InstanceFlavorFields struct {
	Cpu       *int     `json:"cpu,omitempty"`
	Disk      *int     `json:"disk,omitempty"`
	Ephemeral *int     `json:"ephemeral,omitempty"`
	Gpu       *string  `json:"gpu,omitempty"`
	GpuCount  *int     `json:"gpu_count,omitempty"`
	Id        *int     `json:"id,omitempty"`
	Name      *string  `json:"name,omitempty"`
	Ram       *float32 `json:"ram,omitempty"`
}

// InstanceImageFields defines model for InstanceImageFields.
type InstanceImageFields struct {
	Name *string `json:"name,omitempty"`
}

// InstanceKeypairFields defines model for InstanceKeypairFields.
type InstanceKeypairFields struct {
	Name *string `json:"name,omitempty"`
}

// NameAvailableModel defines model for NameAvailableModel.
type NameAvailableModel struct {
	Available *bool   `json:"available,omitempty"`
	Message   *string `json:"message,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// ResponseModel defines model for ResponseModel.
type ResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// SecurityRulesFieldsforInstance defines model for SecurityRulesFieldsforInstance.
type SecurityRulesFieldsforInstance struct {
	CreatedAt      *time.CustomTime `json:"created_at,omitempty"`
	Direction      *string    `json:"direction,omitempty"`
	Ethertype      *string    `json:"ethertype,omitempty"`
	Id             *int       `json:"id,omitempty"`
	PortRangeMax   *int       `json:"port_range_max,omitempty"`
	PortRangeMin   *int       `json:"port_range_min,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	RemoteIpPrefix *string    `json:"remote_ip_prefix,omitempty"`
	Status         *string    `json:"status,omitempty"`
}

// SnapshotFields defines model for SnapshotFields.
type SnapshotFields struct {
	// Description Description of the snapshot
	Description string `json:"description"`

	// HasFloatingIp Indicates if the VM had a floating IP assigned
	HasFloatingIp *bool `json:"has_floating_ip,omitempty"`

	// Id Snapshot ID
	Id int `json:"id"`

	// IsImage Indicates if the snapshot is an image
	IsImage bool `json:"is_image"`

	// Labels Labels associated with snapshot
	Labels *[]string `json:"labels,omitempty"`

	// Name Snapshot name
	Name string `json:"name"`

	// RegionId Region where the snapshot will be available
	RegionId int `json:"region_id"`

	// Size Size in GB of the snapshot
	Size int `json:"size"`

	// Status Status of the snapshot
	Status string `json:"status"`

	// VmId ID of the VM from which the snapshot is created
	VmId int `json:"vm_id"`
}

// SnapshotRestoreRequest defines model for SnapshotRestoreRequest.
type SnapshotRestoreRequest struct {
	// ContractId Contract ID to assign to the newly restored VM
	ContractId *int `json:"contract_id,omitempty"`

	// NewVmName The name of the newly restored VM
	NewVmName string `json:"new_vm_name"`
}

// SnapshotRetrieve defines model for SnapshotRetrieve.
type SnapshotRetrieve struct {
	Message  *string                 `json:"message,omitempty"`
	Snapshot *SnapshotRetrieveFields `json:"snapshot,omitempty"`
	Status   *bool                   `json:"status,omitempty"`
}

// SnapshotRetrieveFields defines model for SnapshotRetrieveFields.
type SnapshotRetrieveFields struct {
	// Description Description of the snapshot
	Description string `json:"description"`

	// HasFloatingIp Indicates if the VM had a floating IP assigned
	HasFloatingIp *bool `json:"has_floating_ip,omitempty"`

	// Id Snapshot ID
	Id int `json:"id"`

	// IsImage Indicates if the snapshot is an image
	IsImage bool `json:"is_image"`

	// Name Snapshot name
	Name string `json:"name"`

	// RegionId Region where the snapshot will be available
	RegionId int `json:"region_id"`

	// Size Size in GB of the snapshot
	Size int `json:"size"`

	// Status Status of the snapshot
	Status string `json:"status"`

	// VmId ID of the VM from which the snapshot is created
	VmId int `json:"vm_id"`
}

// Snapshots defines model for Snapshots.
type Snapshots struct {
	Count     *int              `json:"count,omitempty"`
	Message   *string           `json:"message,omitempty"`
	Page      *int              `json:"page,omitempty"`
	PageSize  *int              `json:"page_size,omitempty"`
	Snapshots *[]SnapshotFields `json:"snapshots,omitempty"`
	Status    *bool             `json:"status,omitempty"`
}

// VolumeAttachmentFields defines model for VolumeAttachmentFields.
type VolumeAttachmentFields struct {
	CreatedAt *time.CustomTime               `json:"created_at,omitempty"`
	Device    *string                  `json:"device,omitempty"`
	Status    *string                  `json:"status,omitempty"`
	Volume    *VolumeFieldsforInstance `json:"volume,omitempty"`
}

// VolumeFieldsforInstance defines model for VolumeFieldsforInstance.
type VolumeFieldsforInstance struct {
	Bootable    *bool   `json:"bootable,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Size        *int    `json:"size,omitempty"`
	VolumeType  *string `json:"volume_type,omitempty"`
}

// RetrieveListOfSnapshotsWithPaginationParams defines parameters for RetrieveListOfSnapshotsWithPagination.
type RetrieveListOfSnapshotsWithPaginationParams struct {
	Page     *string `form:"page,omitempty" json:"page,omitempty"`
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
}

// RestoreASnapshotJSONRequestBody defines body for RestoreASnapshot for application/json ContentType.
type RestoreASnapshotJSONRequestBody = SnapshotRestoreRequest

// CreateAnImageFromASnapshotJSONRequestBody defines body for CreateAnImageFromASnapshot for application/json ContentType.
type CreateAnImageFromASnapshotJSONRequestBody = CreateImagePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RetrieveListOfSnapshotsWithPagination request
	RetrieveListOfSnapshotsWithPagination(ctx context.Context, params *RetrieveListOfSnapshotsWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSnapshotNameAvailability request
	FetchSnapshotNameAvailability(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnapshot request
	DeleteSnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveASnapshot request
	RetrieveASnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestoreASnapshotWithBody request with any body
	RestoreASnapshotWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RestoreASnapshot(ctx context.Context, id int, body RestoreASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAnImageFromASnapshotWithBody request with any body
	CreateAnImageFromASnapshotWithBody(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAnImageFromASnapshot(ctx context.Context, snapshotId int, body CreateAnImageFromASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RetrieveListOfSnapshotsWithPagination(ctx context.Context, params *RetrieveListOfSnapshotsWithPaginationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveListOfSnapshotsWithPaginationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSnapshotNameAvailability(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSnapshotNameAvailabilityRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveASnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveASnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreASnapshotWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreASnapshotRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestoreASnapshot(ctx context.Context, id int, body RestoreASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoreASnapshotRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnImageFromASnapshotWithBody(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnImageFromASnapshotRequestWithBody(c.Server, snapshotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnImageFromASnapshot(ctx context.Context, snapshotId int, body CreateAnImageFromASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnImageFromASnapshotRequest(c.Server, snapshotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRetrieveListOfSnapshotsWithPaginationRequest generates requests for RetrieveListOfSnapshotsWithPagination
func NewRetrieveListOfSnapshotsWithPaginationRequest(server string, params *RetrieveListOfSnapshotsWithPaginationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSnapshotNameAvailabilityRequest generates requests for FetchSnapshotNameAvailability
func NewFetchSnapshotNameAvailabilityRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/name-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSnapshotRequest generates requests for DeleteSnapshot
func NewDeleteSnapshotRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveASnapshotRequest generates requests for RetrieveASnapshot
func NewRetrieveASnapshotRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRestoreASnapshotRequest calls the generic RestoreASnapshot builder with application/json body
func NewRestoreASnapshotRequest(server string, id int, body RestoreASnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRestoreASnapshotRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRestoreASnapshotRequestWithBody generates requests for RestoreASnapshot with any type of body
func NewRestoreASnapshotRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAnImageFromASnapshotRequest calls the generic CreateAnImageFromASnapshot builder with application/json body
func NewCreateAnImageFromASnapshotRequest(server string, snapshotId int, body CreateAnImageFromASnapshotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAnImageFromASnapshotRequestWithBody(server, snapshotId, "application/json", bodyReader)
}

// NewCreateAnImageFromASnapshotRequestWithBody generates requests for CreateAnImageFromASnapshot with any type of body
func NewCreateAnImageFromASnapshotRequestWithBody(server string, snapshotId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s/image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RetrieveListOfSnapshotsWithPaginationWithResponse request
	RetrieveListOfSnapshotsWithPaginationWithResponse(ctx context.Context, params *RetrieveListOfSnapshotsWithPaginationParams, reqEditors ...RequestEditorFn) (*RetrieveListOfSnapshotsWithPaginationResponse, error)

	// FetchSnapshotNameAvailabilityWithResponse request
	FetchSnapshotNameAvailabilityWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*FetchSnapshotNameAvailabilityResponse, error)

	// DeleteSnapshotWithResponse request
	DeleteSnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSnapshotResponse, error)

	// RetrieveASnapshotWithResponse request
	RetrieveASnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RetrieveASnapshotResponse, error)

	// RestoreASnapshotWithBodyWithResponse request with any body
	RestoreASnapshotWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestoreASnapshotResponse, error)

	RestoreASnapshotWithResponse(ctx context.Context, id int, body RestoreASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*RestoreASnapshotResponse, error)

	// CreateAnImageFromASnapshotWithBodyWithResponse request with any body
	CreateAnImageFromASnapshotWithBodyWithResponse(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnImageFromASnapshotResponse, error)

	CreateAnImageFromASnapshotWithResponse(ctx context.Context, snapshotId int, body CreateAnImageFromASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnImageFromASnapshotResponse, error)
}

type RetrieveListOfSnapshotsWithPaginationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snapshots
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveListOfSnapshotsWithPaginationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveListOfSnapshotsWithPaginationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSnapshotNameAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameAvailableModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r FetchSnapshotNameAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSnapshotNameAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveASnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotRetrieve
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveASnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveASnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestoreASnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RestoreASnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoreASnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAnImageFromASnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateImage
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON406      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateAnImageFromASnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAnImageFromASnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RetrieveListOfSnapshotsWithPaginationWithResponse request returning *RetrieveListOfSnapshotsWithPaginationResponse
func (c *ClientWithResponses) RetrieveListOfSnapshotsWithPaginationWithResponse(ctx context.Context, params *RetrieveListOfSnapshotsWithPaginationParams, reqEditors ...RequestEditorFn) (*RetrieveListOfSnapshotsWithPaginationResponse, error) {
	rsp, err := c.RetrieveListOfSnapshotsWithPagination(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveListOfSnapshotsWithPaginationResponse(rsp)
}

// FetchSnapshotNameAvailabilityWithResponse request returning *FetchSnapshotNameAvailabilityResponse
func (c *ClientWithResponses) FetchSnapshotNameAvailabilityWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*FetchSnapshotNameAvailabilityResponse, error) {
	rsp, err := c.FetchSnapshotNameAvailability(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSnapshotNameAvailabilityResponse(rsp)
}

// DeleteSnapshotWithResponse request returning *DeleteSnapshotResponse
func (c *ClientWithResponses) DeleteSnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSnapshotResponse, error) {
	rsp, err := c.DeleteSnapshot(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotResponse(rsp)
}

// RetrieveASnapshotWithResponse request returning *RetrieveASnapshotResponse
func (c *ClientWithResponses) RetrieveASnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RetrieveASnapshotResponse, error) {
	rsp, err := c.RetrieveASnapshot(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveASnapshotResponse(rsp)
}

// RestoreASnapshotWithBodyWithResponse request with arbitrary body returning *RestoreASnapshotResponse
func (c *ClientWithResponses) RestoreASnapshotWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RestoreASnapshotResponse, error) {
	rsp, err := c.RestoreASnapshotWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreASnapshotResponse(rsp)
}

func (c *ClientWithResponses) RestoreASnapshotWithResponse(ctx context.Context, id int, body RestoreASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*RestoreASnapshotResponse, error) {
	rsp, err := c.RestoreASnapshot(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestoreASnapshotResponse(rsp)
}

// CreateAnImageFromASnapshotWithBodyWithResponse request with arbitrary body returning *CreateAnImageFromASnapshotResponse
func (c *ClientWithResponses) CreateAnImageFromASnapshotWithBodyWithResponse(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnImageFromASnapshotResponse, error) {
	rsp, err := c.CreateAnImageFromASnapshotWithBody(ctx, snapshotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnImageFromASnapshotResponse(rsp)
}

func (c *ClientWithResponses) CreateAnImageFromASnapshotWithResponse(ctx context.Context, snapshotId int, body CreateAnImageFromASnapshotJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnImageFromASnapshotResponse, error) {
	rsp, err := c.CreateAnImageFromASnapshot(ctx, snapshotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnImageFromASnapshotResponse(rsp)
}

// ParseRetrieveListOfSnapshotsWithPaginationResponse parses an HTTP response from a RetrieveListOfSnapshotsWithPaginationWithResponse call
func ParseRetrieveListOfSnapshotsWithPaginationResponse(rsp *http.Response) (*RetrieveListOfSnapshotsWithPaginationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveListOfSnapshotsWithPaginationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snapshots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFetchSnapshotNameAvailabilityResponse parses an HTTP response from a FetchSnapshotNameAvailabilityWithResponse call
func ParseFetchSnapshotNameAvailabilityResponse(rsp *http.Response) (*FetchSnapshotNameAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSnapshotNameAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameAvailableModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteSnapshotResponse parses an HTTP response from a DeleteSnapshotWithResponse call
func ParseDeleteSnapshotResponse(rsp *http.Response) (*DeleteSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRetrieveASnapshotResponse parses an HTTP response from a RetrieveASnapshotWithResponse call
func ParseRetrieveASnapshotResponse(rsp *http.Response) (*RetrieveASnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveASnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotRetrieve
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRestoreASnapshotResponse parses an HTTP response from a RestoreASnapshotWithResponse call
func ParseRestoreASnapshotResponse(rsp *http.Response) (*RestoreASnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoreASnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateAnImageFromASnapshotResponse parses an HTTP response from a CreateAnImageFromASnapshotWithResponse call
func ParseCreateAnImageFromASnapshotResponse(rsp *http.Response) (*CreateAnImageFromASnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAnImageFromASnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}
