// Package Snapshots provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package Snapshots

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for EnvironmentFeaturesGreenStatus.
const (
	GREEN          EnvironmentFeaturesGreenStatus = "GREEN"
	NOTGREEN       EnvironmentFeaturesGreenStatus = "NOT_GREEN"
	PARTIALLYGREEN EnvironmentFeaturesGreenStatus = "PARTIALLY_GREEN"
)

// CreateImagePayload defines model for CreateImagePayload.
type CreateImagePayload struct {
	// Labels List of labels to attach to the image
	Labels *[]string `json:"labels,omitempty"`

	// Name Name for the new custom image
	Name string `json:"name"`
}

// CreateImage defines model for Create_Image.
type CreateImage struct {
	Id      *int    `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// EnvironmentFeatures defines model for Environment_Features.
type EnvironmentFeatures struct {
	GreenStatus      *EnvironmentFeaturesGreenStatus `json:"green_status,omitempty"`
	NetworkOptimised *bool                           `json:"network_optimised,omitempty"`
}

// EnvironmentFeaturesGreenStatus defines model for EnvironmentFeatures.GreenStatus.
type EnvironmentFeaturesGreenStatus string

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// FlavorLabelFields defines model for FlavorLabelFields.
type FlavorLabelFields struct {
	Id    *int    `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
}

// Instance defines model for Instance.
type Instance struct {
	Instance *InstanceFields `json:"instance,omitempty"`
	Message  *string         `json:"message,omitempty"`
	Status   *bool           `json:"status,omitempty"`
}

// InstanceEnvironmentFields defines model for Instance_Environment_Fields.
type InstanceEnvironmentFields struct {
	Features *EnvironmentFeatures `json:"features,omitempty"`
	Id       *int                 `json:"id,omitempty"`
	Name     *string              `json:"name,omitempty"`
	OrgId    *int                 `json:"org_id,omitempty"`
	Region   *string              `json:"region,omitempty"`
}

// InstanceFields defines model for Instance_Fields.
type InstanceFields struct {
	CallbackUrl             *string                           `json:"callback_url,omitempty"`
	ContractId              *int                              `json:"contract_id,omitempty"`
	CreatedAt               *time.CustomTime                        `json:"created_at,omitempty"`
	Environment             *InstanceEnvironmentFields        `json:"environment,omitempty"`
	Features                *map[string]interface{}           `json:"features,omitempty"`
	FixedIp                 *string                           `json:"fixed_ip,omitempty"`
	Flavor                  *InstanceFlavorFields             `json:"flavor,omitempty"`
	FloatingIp              *string                           `json:"floating_ip,omitempty"`
	FloatingIpStatus        *string                           `json:"floating_ip_status,omitempty"`
	Id                      *int                              `json:"id,omitempty"`
	Image                   *InstanceImageFields              `json:"image,omitempty"`
	Keypair                 *InstanceKeypairFields            `json:"keypair,omitempty"`
	Labels                  *[]string                         `json:"labels,omitempty"`
	Locked                  *bool                             `json:"locked,omitempty"`
	Name                    *string                           `json:"name,omitempty"`
	Os                      *string                           `json:"os,omitempty"`
	PortRandomization       *bool                             `json:"port_randomization,omitempty"`
	PortRandomizationStatus *string                           `json:"port_randomization_status,omitempty"`
	PowerState              *string                           `json:"power_state,omitempty"`
	RequiresPublicIp        *bool                             `json:"requires_public_ip,omitempty"`
	SecurityRules           *[]SecurityRulesFieldsForInstance `json:"security_rules,omitempty"`
	Status                  *string                           `json:"status,omitempty"`
	VmState                 *string                           `json:"vm_state,omitempty"`
	VolumeAttachments       *[]VolumeAttachmentFields         `json:"volume_attachments,omitempty"`
}

// InstanceFlavorFields defines model for Instance_Flavor_Fields.
type InstanceFlavorFields struct {
	Cpu       *int                    `json:"cpu,omitempty"`
	Disk      *int                    `json:"disk,omitempty"`
	Ephemeral *int                    `json:"ephemeral,omitempty"`
	Features  *map[string]interface{} `json:"features,omitempty"`
	Gpu       *string                 `json:"gpu,omitempty"`
	GpuCount  *int                    `json:"gpu_count,omitempty"`
	Id        *int                    `json:"id,omitempty"`
	Labels    *[]FlavorLabelFields    `json:"labels,omitempty"`
	Name      *string                 `json:"name,omitempty"`
	Ram       *float32                `json:"ram,omitempty"`
}

// InstanceImageFields defines model for Instance_Image_Fields.
type InstanceImageFields struct {
	Name *string `json:"name,omitempty"`
}

// InstanceKeypairFields defines model for Instance_Keypair_Fields.
type InstanceKeypairFields struct {
	Name *string `json:"name,omitempty"`
}

// NameAvailableModel defines model for NameAvailableModel.
type NameAvailableModel struct {
	Available *bool   `json:"available,omitempty"`
	Message   *string `json:"message,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// ResponseModel defines model for ResponseModel.
type ResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// SecurityRulesFieldsForInstance defines model for Security_Rules_Fields_for_Instance.
type SecurityRulesFieldsForInstance struct {
	CreatedAt      *time.CustomTime `json:"created_at,omitempty"`
	Direction      *string    `json:"direction,omitempty"`
	Ethertype      *string    `json:"ethertype,omitempty"`
	Id             *int       `json:"id,omitempty"`
	PortRangeMax   *int       `json:"port_range_max,omitempty"`
	PortRangeMin   *int       `json:"port_range_min,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	RemoteIpPrefix *string    `json:"remote_ip_prefix,omitempty"`
	Status         *string    `json:"status,omitempty"`
}

// SnapshotFields defines model for SnapshotFields.
type SnapshotFields struct {
	// CreatedAt Creation timestamp
	CreatedAt time.CustomTime `json:"created_at"`

	// Description Description of the snapshot
	Description string `json:"description"`

	// HasFloatingIp Indicates if the VM had a floating IP assigned
	HasFloatingIp *bool `json:"has_floating_ip,omitempty"`

	// Id Snapshot ID
	Id int `json:"id"`

	// IsImage Indicates if the snapshot is an image
	IsImage bool `json:"is_image"`

	// Labels Labels associated with snapshot
	Labels *[]string `json:"labels,omitempty"`

	// Name Snapshot name
	Name string `json:"name"`

	// RegionId Region where the snapshot will be available
	RegionId int `json:"region_id"`

	// Size Size in GB of the snapshot
	Size int `json:"size"`

	// Status Status of the snapshot
	Status string `json:"status"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.CustomTime `json:"updated_at"`

	// VmId ID of the VM from which the snapshot is created
	VmId int `json:"vm_id"`
}

// SnapshotRestoreRequest defines model for SnapshotRestoreRequest.
type SnapshotRestoreRequest struct {
	// ContractId Contract ID to assign to the newly restored VM
	ContractId *int `json:"contract_id,omitempty"`

	// NewVmName The name of the newly restored VM
	NewVmName string `json:"new_vm_name"`
}

// SnapshotRetrieve defines model for SnapshotRetrieve.
type SnapshotRetrieve struct {
	Message  *string                 `json:"message,omitempty"`
	Snapshot *SnapshotRetrieveFields `json:"snapshot,omitempty"`
	Status   *bool                   `json:"status,omitempty"`
}

// SnapshotRetrieveFields defines model for SnapshotRetrieveFields.
type SnapshotRetrieveFields struct {
	// CreatedAt Creation timestamp
	CreatedAt   time.CustomTime `json:"created_at"`
	CustomImage *string   `json:"custom_image,omitempty"`

	// Description Description of the snapshot
	Description string `json:"description"`

	// HasFloatingIp Indicates if the VM had a floating IP assigned
	HasFloatingIp *bool `json:"has_floating_ip,omitempty"`

	// Id Snapshot ID
	Id int `json:"id"`

	// IsImage Indicates if the snapshot is an image
	IsImage bool    `json:"is_image"`
	Labels  *string `json:"labels,omitempty"`

	// Name Snapshot name
	Name   string  `json:"name"`
	Region *string `json:"region,omitempty"`

	// RegionId Region where the snapshot will be available
	RegionId int `json:"region_id"`

	// Size Size in GB of the snapshot
	Size int `json:"size"`

	// Status Status of the snapshot
	Status string `json:"status"`

	// UpdatedAt Last update timestamp
	UpdatedAt     time.CustomTime `json:"updated_at"`
	VmEnvironment *string   `json:"vm_environment,omitempty"`
	VmFlavor      *string   `json:"vm_flavor,omitempty"`

	// VmId ID of the VM from which the snapshot is created
	VmId       int     `json:"vm_id"`
	VmImage    *string `json:"vm_image,omitempty"`
	VmKeypair  *string `json:"vm_keypair,omitempty"`
	VmName     *string `json:"vm_name,omitempty"`
	VmStatus   *string `json:"vm_status,omitempty"`
	VolumeId   *string `json:"volume_id,omitempty"`
	VolumeName *string `json:"volume_name,omitempty"`
}

// Snapshots defines model for Snapshots.
type Snapshots struct {
	Count     *int              `json:"count,omitempty"`
	Message   *string           `json:"message,omitempty"`
	Page      *int              `json:"page,omitempty"`
	PageSize  *int              `json:"page_size,omitempty"`
	Snapshots *[]SnapshotFields `json:"snapshots,omitempty"`
	Status    *bool             `json:"status,omitempty"`
}

// VolumeAttachmentFields defines model for Volume_Attachment_Fields.
type VolumeAttachmentFields struct {
	CreatedAt *time.CustomTime               `json:"created_at,omitempty"`
	Device    *string                  `json:"device,omitempty"`
	Id        *int                     `json:"id,omitempty"`
	Protected *bool                    `json:"protected,omitempty"`
	Status    *string                  `json:"status,omitempty"`
	Volume    *VolumeFieldsForInstance `json:"volume,omitempty"`
}

// VolumeFieldsForInstance defines model for Volume_Fields_for_Instance.
type VolumeFieldsForInstance struct {
	Bootable    *bool   `json:"bootable,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Size        *int    `json:"size,omitempty"`
	VolumeType  *string `json:"volume_type,omitempty"`
}

// GetSnapshotsParams defines parameters for GetSnapshots.
type GetSnapshotsParams struct {
	Page     *string `form:"page,omitempty" json:"page,omitempty"`
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	Search   *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostSnapshotRestoreJSONRequestBody defines body for PostSnapshotRestore for application/json ContentType.
type PostSnapshotRestoreJSONRequestBody = SnapshotRestoreRequest

// CreateANewCustomImageJSONRequestBody defines body for CreateANewCustomImage for application/json ContentType.
type CreateANewCustomImageJSONRequestBody = CreateImagePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSnapshots request
	GetSnapshots(ctx context.Context, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSnapshotNameAvailability request
	FetchSnapshotNameAvailability(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnapshot request
	DeleteSnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnapshot request
	GetSnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSnapshotRestoreWithBody request with any body
	PostSnapshotRestoreWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSnapshotRestore(ctx context.Context, id int, body PostSnapshotRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateANewCustomImageWithBody request with any body
	CreateANewCustomImageWithBody(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateANewCustomImage(ctx context.Context, snapshotId int, body CreateANewCustomImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSnapshots(ctx context.Context, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSnapshotNameAvailability(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSnapshotNameAvailabilityRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnapshot(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnapshotRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnapshotRestoreWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnapshotRestoreRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnapshotRestore(ctx context.Context, id int, body PostSnapshotRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnapshotRestoreRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateANewCustomImageWithBody(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateANewCustomImageRequestWithBody(c.Server, snapshotId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateANewCustomImage(ctx context.Context, snapshotId int, body CreateANewCustomImageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateANewCustomImageRequest(c.Server, snapshotId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSnapshotsRequest generates requests for GetSnapshots
func NewGetSnapshotsRequest(server string, params *GetSnapshotsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSnapshotNameAvailabilityRequest generates requests for FetchSnapshotNameAvailability
func NewFetchSnapshotNameAvailabilityRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/name-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSnapshotRequest generates requests for DeleteSnapshot
func NewDeleteSnapshotRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnapshotRequest generates requests for GetSnapshot
func NewGetSnapshotRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSnapshotRestoreRequest calls the generic PostSnapshotRestore builder with application/json body
func NewPostSnapshotRestoreRequest(server string, id int, body PostSnapshotRestoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSnapshotRestoreRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSnapshotRestoreRequestWithBody generates requests for PostSnapshotRestore with any type of body
func NewPostSnapshotRestoreRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s/restore", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateANewCustomImageRequest calls the generic CreateANewCustomImage builder with application/json body
func NewCreateANewCustomImageRequest(server string, snapshotId int, body CreateANewCustomImageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateANewCustomImageRequestWithBody(server, snapshotId, "application/json", bodyReader)
}

// NewCreateANewCustomImageRequestWithBody generates requests for CreateANewCustomImage with any type of body
func NewCreateANewCustomImageRequestWithBody(server string, snapshotId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/snapshots/%s/image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSnapshotsWithResponse request
	GetSnapshotsWithResponse(ctx context.Context, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*GetSnapshotsResponse, error)

	// FetchSnapshotNameAvailabilityWithResponse request
	FetchSnapshotNameAvailabilityWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*FetchSnapshotNameAvailabilityResponse, error)

	// DeleteSnapshotWithResponse request
	DeleteSnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSnapshotResponse, error)

	// GetSnapshotWithResponse request
	GetSnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSnapshotResponse, error)

	// PostSnapshotRestoreWithBodyWithResponse request with any body
	PostSnapshotRestoreWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnapshotRestoreResponse, error)

	PostSnapshotRestoreWithResponse(ctx context.Context, id int, body PostSnapshotRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnapshotRestoreResponse, error)

	// CreateANewCustomImageWithBodyWithResponse request with any body
	CreateANewCustomImageWithBodyWithResponse(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateANewCustomImageResponse, error)

	CreateANewCustomImageWithResponse(ctx context.Context, snapshotId int, body CreateANewCustomImageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateANewCustomImageResponse, error)
}

type GetSnapshotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snapshots
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSnapshotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSnapshotNameAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NameAvailableModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r FetchSnapshotNameAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSnapshotNameAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnapshotRetrieve
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSnapshotRestoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PostSnapshotRestoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSnapshotRestoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateANewCustomImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateImage
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON406      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateANewCustomImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateANewCustomImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSnapshotsWithResponse request returning *GetSnapshotsResponse
func (c *ClientWithResponses) GetSnapshotsWithResponse(ctx context.Context, params *GetSnapshotsParams, reqEditors ...RequestEditorFn) (*GetSnapshotsResponse, error) {
	rsp, err := c.GetSnapshots(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotsResponse(rsp)
}

// FetchSnapshotNameAvailabilityWithResponse request returning *FetchSnapshotNameAvailabilityResponse
func (c *ClientWithResponses) FetchSnapshotNameAvailabilityWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*FetchSnapshotNameAvailabilityResponse, error) {
	rsp, err := c.FetchSnapshotNameAvailability(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSnapshotNameAvailabilityResponse(rsp)
}

// DeleteSnapshotWithResponse request returning *DeleteSnapshotResponse
func (c *ClientWithResponses) DeleteSnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteSnapshotResponse, error) {
	rsp, err := c.DeleteSnapshot(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnapshotResponse(rsp)
}

// GetSnapshotWithResponse request returning *GetSnapshotResponse
func (c *ClientWithResponses) GetSnapshotWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetSnapshotResponse, error) {
	rsp, err := c.GetSnapshot(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnapshotResponse(rsp)
}

// PostSnapshotRestoreWithBodyWithResponse request with arbitrary body returning *PostSnapshotRestoreResponse
func (c *ClientWithResponses) PostSnapshotRestoreWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnapshotRestoreResponse, error) {
	rsp, err := c.PostSnapshotRestoreWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnapshotRestoreResponse(rsp)
}

func (c *ClientWithResponses) PostSnapshotRestoreWithResponse(ctx context.Context, id int, body PostSnapshotRestoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnapshotRestoreResponse, error) {
	rsp, err := c.PostSnapshotRestore(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnapshotRestoreResponse(rsp)
}

// CreateANewCustomImageWithBodyWithResponse request with arbitrary body returning *CreateANewCustomImageResponse
func (c *ClientWithResponses) CreateANewCustomImageWithBodyWithResponse(ctx context.Context, snapshotId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateANewCustomImageResponse, error) {
	rsp, err := c.CreateANewCustomImageWithBody(ctx, snapshotId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateANewCustomImageResponse(rsp)
}

func (c *ClientWithResponses) CreateANewCustomImageWithResponse(ctx context.Context, snapshotId int, body CreateANewCustomImageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateANewCustomImageResponse, error) {
	rsp, err := c.CreateANewCustomImage(ctx, snapshotId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateANewCustomImageResponse(rsp)
}

// ParseGetSnapshotsResponse parses an HTTP response from a GetSnapshotsWithResponse call
func ParseGetSnapshotsResponse(rsp *http.Response) (*GetSnapshotsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snapshots
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFetchSnapshotNameAvailabilityResponse parses an HTTP response from a FetchSnapshotNameAvailabilityWithResponse call
func ParseFetchSnapshotNameAvailabilityResponse(rsp *http.Response) (*FetchSnapshotNameAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSnapshotNameAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NameAvailableModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteSnapshotResponse parses an HTTP response from a DeleteSnapshotWithResponse call
func ParseDeleteSnapshotResponse(rsp *http.Response) (*DeleteSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetSnapshotResponse parses an HTTP response from a GetSnapshotWithResponse call
func ParseGetSnapshotResponse(rsp *http.Response) (*GetSnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnapshotRetrieve
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostSnapshotRestoreResponse parses an HTTP response from a PostSnapshotRestoreWithResponse call
func ParsePostSnapshotRestoreResponse(rsp *http.Response) (*PostSnapshotRestoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSnapshotRestoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateANewCustomImageResponse parses an HTTP response from a CreateANewCustomImageWithResponse call
func ParseCreateANewCustomImageResponse(rsp *http.Response) (*CreateANewCustomImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateANewCustomImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateImage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}
