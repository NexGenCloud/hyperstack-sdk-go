// Package billing provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package billing

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// BillingMetricesFields defines model for Billing_metrices_fields.
type BillingMetricesFields struct {
	Active         *bool      `json:"active,omitempty"`
	BillPerMinute  *float32   `json:"bill_per_minute,omitempty"`
	CreateTime     *time.CustomTime `json:"create_time,omitempty"`
	ExcludeBilling *bool      `json:"exclude_billing,omitempty"`
	Name           *string    `json:"name,omitempty"`
	OrganizationId *int       `json:"organization_id,omitempty"`
	ResourceId     *int       `json:"resource_id,omitempty"`
	ResourceType   *string    `json:"resource_type,omitempty"`
	TerminateTime  *time.CustomTime `json:"terminate_time,omitempty"`
	TotalBill      *float32   `json:"total_bill,omitempty"`
	TotalUpTime    *float32   `json:"total_up_time,omitempty"`
}

// BillingMetricesResponse defines model for Billing_metrices_response.
type BillingMetricesResponse struct {
	Data    *[]BillingMetricesFields `json:"data,omitempty"`
	Message *string                  `json:"message,omitempty"`
	Status  *bool                    `json:"status,omitempty"`
}

// DataSynthesisBillingHistoryDetailsResponseSchema defines model for DataSynthesisBillingHistoryDetailsResponseSchema.
type DataSynthesisBillingHistoryDetailsResponseSchema struct {
	BillingHistoryDataSynthesisDetails *BillingHistoryDataSynthesisDetails `json:"billing_history_data_synthesis_details,omitempty"`
	Message                            *string                             `json:"message,omitempty"`
	Status                             *bool                               `json:"status,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// GraphDatetimeValueModel defines model for GraphDatetimeValueModel.
type GraphDatetimeValueModel struct {
	Datetime *string  `json:"datetime,omitempty"`
	Value    *float32 `json:"value,omitempty"`
}

// LastDayCostFields defines model for Last_day_cost_fields.
type LastDayCostFields struct {
	ClustersCost  *float32 `json:"clusters_cost,omitempty"`
	InstancesCost *float32 `json:"instances_cost,omitempty"`
	TotalCost     *float32 `json:"total_cost,omitempty"`
	VolumesCost   *float32 `json:"volumes_cost,omitempty"`
}

// LastDayCostResponse defines model for Last_day_cost_response.
type LastDayCostResponse struct {
	Data    *LastDayCostFields `json:"data,omitempty"`
	Message *string            `json:"message,omitempty"`
	Status  *bool              `json:"status,omitempty"`
}

// ModelEvaluationBillingHistoryDetailsResponseSchema defines model for ModelEvaluationBillingHistoryDetailsResponseSchema.
type ModelEvaluationBillingHistoryDetailsResponseSchema struct {
	BillingHistoryModelEvalutationDetails *BillingHistoryModelEvalutationDetails `json:"billing_history_model_evalutation_details,omitempty"`
	Message                               *string                                `json:"message,omitempty"`
	Status                                *bool                                  `json:"status,omitempty"`
}

// OrganizationLevelBillingHistory defines model for OrganizationLevelBillingHistory.
type OrganizationLevelBillingHistory struct {
	BillingHistory *[]OrganizationLevelBillingHistoryResources `json:"billing_history,omitempty"`
	OrgId          *int                                        `json:"org_id,omitempty"`
	TotalCount     *int                                        `json:"total_count,omitempty"`
}

// OrganizationLevelBillingHistoryResources defines model for OrganizationLevelBillingHistoryResources.
type OrganizationLevelBillingHistoryResources struct {
	Attributes *OrganizationLevelBillingHistoryResponseAttributes `json:"attributes,omitempty"`
	Metrics    *OrganizationLevelBillingHistoryResponseMetrics    `json:"metrics,omitempty"`
}

// OrganizationLevelBillingHistoryResponseAttributes defines model for OrganizationLevelBillingHistoryResponseAttributes.
type OrganizationLevelBillingHistoryResponseAttributes struct {
	Id *string `json:"id,omitempty"`
}

// OrganizationLevelBillingHistoryResponseMetrics defines model for OrganizationLevelBillingHistoryResponseMetrics.
type OrganizationLevelBillingHistoryResponseMetrics struct {
	ContractCost      *float32 `json:"contract_cost,omitempty"`
	IncurredBill      *float32 `json:"incurred_bill,omitempty"`
	NonDiscountedBill *float32 `json:"non_discounted_bill,omitempty"`
	SnapshotCost      *float32 `json:"snapshot_cost,omitempty"`
	VmCost            *float32 `json:"vm_cost,omitempty"`
	VolumeCost        *float32 `json:"volume_cost,omitempty"`
}

// OrganizationLevelBillingHistoryResponseModel defines model for OrganizationLevelBillingHistoryResponseModel.
type OrganizationLevelBillingHistoryResponseModel struct {
	BillingHistory *OrganizationLevelBillingHistory `json:"billing_history,omitempty"`
	Message        *string                          `json:"message,omitempty"`
	Status         *bool                            `json:"status,omitempty"`
}

// OrganizationThresholdFields defines model for Organization_Threshold_fields.
type OrganizationThresholdFields struct {
	Id               *int    `json:"id,omitempty"`
	InterfaceTitle   *string `json:"interface_title,omitempty"`
	InterfaceTooltip *string `json:"interface_tooltip,omitempty"`
	Subscribed       *bool   `json:"subscribed,omitempty"`
	Threshold        *int    `json:"threshold,omitempty"`
}

// OrganizationThresholdUpdateResponse defines model for Organization_threshold_update_response.
type OrganizationThresholdUpdateResponse struct {
	Message   *string                      `json:"message,omitempty"`
	Status    *bool                        `json:"status,omitempty"`
	Threshold *OrganizationThresholdFields `json:"threshold,omitempty"`
}

// OrganizationThresholdsResponse defines model for Organization_thresholds_response.
type OrganizationThresholdsResponse struct {
	Message    *string                        `json:"message,omitempty"`
	Status     *bool                          `json:"status,omitempty"`
	Thresholds *[]OrganizationThresholdFields `json:"thresholds,omitempty"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	Page    *int `json:"page,omitempty"`
	Pages   *int `json:"pages,omitempty"`
	PerPage *int `json:"per_page,omitempty"`
}

// ResourceBillingEventsHistoryMetrics defines model for ResourceBillingEventsHistoryMetrics.
type ResourceBillingEventsHistoryMetrics struct {
	Event         *string  `json:"event,omitempty"`
	EventDuration *float32 `json:"event_duration,omitempty"`
	PricePerHour  *float32 `json:"price_per_hour,omitempty"`
	Start         *string  `json:"start,omitempty"`
	TotalCost     *float32 `json:"total_cost,omitempty"`
}

// ResourceBillingEventsHistoryResponse defines model for ResourceBillingEventsHistoryResponse.
type ResourceBillingEventsHistoryResponse struct {
	BillingEventsHistory *[]ResourceBillingEventsHistoryMetrics `json:"billing_events_history,omitempty"`
	Message              *string                                `json:"message,omitempty"`
	Status               *bool                                  `json:"status,omitempty"`
}

// ResourceLevelBillingBucketDetailsResources defines model for ResourceLevelBillingBucketDetailsResources.
type ResourceLevelBillingBucketDetailsResources struct {
	Attributes *ResourceLevelBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelBillingDetailsAttributes defines model for ResourceLevelBillingDetailsAttributes.
type ResourceLevelBillingDetailsAttributes struct {
	Id           *string `json:"id,omitempty"`
	InfrahubId   *int    `json:"infrahub_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
}

// ResourceLevelBillingDetailsMetrics defines model for ResourceLevelBillingDetailsMetrics.
type ResourceLevelBillingDetailsMetrics struct {
	IncurredBill              *float32 `json:"incurred_bill,omitempty"`
	NonDiscountedBill         *float32 `json:"non_discounted_bill,omitempty"`
	NonDiscountedPricePerHour *float32 `json:"non_discounted_price_per_hour,omitempty"`
	PricePerHour              *float32 `json:"price_per_hour,omitempty"`
	UsageTime                 *float32 `json:"usage_time,omitempty"`
	UsageTimeACTIVE           *float32 `json:"usage_time_ACTIVE,omitempty"`
	UsageTimeHIBERNATED       *float32 `json:"usage_time_HIBERNATED,omitempty"`
	UsageTimeSHUTOFF          *float32 `json:"usage_time_SHUTOFF,omitempty"`
}

// ResourceLevelBillingDetailsVM defines model for ResourceLevelBillingDetailsVM.
type ResourceLevelBillingDetailsVM struct {
	BillingHistory *[]ResourceLevelBillingVMDetailsResources `json:"billing_history,omitempty"`
	OrgId          *int                                      `json:"org_id,omitempty"`
	TotalCount     *int                                      `json:"total_count,omitempty"`
}

// ResourceLevelBillingDetailsVolume defines model for ResourceLevelBillingDetailsVolume.
type ResourceLevelBillingDetailsVolume struct {
	BillingHistory *[]ResourceLevelBillingVolumeDetailsResources `json:"billing_history,omitempty"`
	OrgId          *int                                          `json:"org_id,omitempty"`
	TotalCount     *int                                          `json:"total_count,omitempty"`
}

// ResourceLevelBillingDetailsVolumeAttributes defines model for ResourceLevelBillingDetailsVolumeAttributes.
type ResourceLevelBillingDetailsVolumeAttributes struct {
	Id                *string `json:"id,omitempty"`
	InfrahubId        *int    `json:"infrahub_id,omitempty"`
	ResourceName      *string `json:"resource_name,omitempty"`
	SubresourceAmount *int    `json:"subresource_amount,omitempty"`
	SubresourceType   *string `json:"subresource_type,omitempty"`
}

// ResourceLevelBillingDetailsVolumeMetrics defines model for ResourceLevelBillingDetailsVolumeMetrics.
type ResourceLevelBillingDetailsVolumeMetrics struct {
	IncurredBill              *float32 `json:"incurred_bill,omitempty"`
	NonDiscountedBill         *float32 `json:"non_discounted_bill,omitempty"`
	NonDiscountedPricePerHour *float32 `json:"non_discounted_price_per_hour,omitempty"`
	PricePerHour              *float32 `json:"price_per_hour,omitempty"`
	UsageTime                 *float32 `json:"usage_time,omitempty"`
}

// ResourceLevelBillingHistory defines model for ResourceLevelBillingHistory.
type ResourceLevelBillingHistory struct {
	BillingHistory *[]ResourceLevelBillingHistoryResources `json:"billing_history,omitempty"`
	OrgId          *int                                    `json:"org_id,omitempty"`
	Pagination     *PaginationData                         `json:"pagination,omitempty"`
	TotalCount     *int                                    `json:"total_count,omitempty"`
}

// ResourceLevelBillingHistoryResources defines model for ResourceLevelBillingHistoryResources.
type ResourceLevelBillingHistoryResources struct {
	Attributes *ResourceLevelBillingHistoryResponseAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingHistoryResponseMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelBillingHistoryResourcesCluster defines model for ResourceLevelBillingHistoryResourcesCluster.
type ResourceLevelBillingHistoryResourcesCluster struct {
	Attributes *ResourceLevelBillingHistoryResponseAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingHistoryResponseMetrics    `json:"metrics,omitempty"`
	Nodes      *[]ResourceLevelBillingHistoryResources        `json:"nodes,omitempty"`
}

// ResourceLevelBillingHistoryResponseAttributes defines model for ResourceLevelBillingHistoryResponseAttributes.
type ResourceLevelBillingHistoryResponseAttributes struct {
	ContractId   *int    `json:"contract_id,omitempty"`
	Id           *string `json:"id,omitempty"`
	InfrahubId   *int    `json:"infrahub_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// ResourceLevelBillingHistoryResponseMetrics defines model for ResourceLevelBillingHistoryResponseMetrics.
type ResourceLevelBillingHistoryResponseMetrics struct {
	IncurredBill *float32 `json:"incurred_bill,omitempty"`
	PricePerHour *float32 `json:"price_per_hour,omitempty"`
	UsageTime    *float32 `json:"usage_time,omitempty"`
}

// ResourceLevelBillingVMDetailsResources defines model for ResourceLevelBillingVMDetailsResources.
type ResourceLevelBillingVMDetailsResources struct {
	Attributes *ResourceLevelBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelBillingVolumeDetailsResources defines model for ResourceLevelBillingVolumeDetailsResources.
type ResourceLevelBillingVolumeDetailsResources struct {
	Attributes *ResourceLevelBillingDetailsVolumeAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingDetailsVolumeMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelBucketBillingDetailsResponseModel defines model for ResourceLevelBucketBillingDetailsResponseModel.
type ResourceLevelBucketBillingDetailsResponseModel struct {
	BillingHistoryBucketDetails *ResourceLevelBillingBucketDetailsResources `json:"billing_history_bucket_details,omitempty"`
	Message                     *string                                     `json:"message,omitempty"`
	Status                      *bool                                       `json:"status,omitempty"`
}

// ResourceLevelBucketBillingHistoryResponseModel defines model for ResourceLevelBucketBillingHistoryResponseModel.
type ResourceLevelBucketBillingHistoryResponseModel struct {
	BillingHistoryBucket *ResourceLevelBillingHistory `json:"billing_history_bucket,omitempty"`
	Message              *string                      `json:"message,omitempty"`
	Status               *bool                        `json:"status,omitempty"`
}

// ResourceLevelClusterBillingDetailsResponseModel defines model for ResourceLevelClusterBillingDetailsResponseModel.
type ResourceLevelClusterBillingDetailsResponseModel struct {
	BillingHistoryClusterDetails *ResourceLevelBillingHistoryResourcesCluster `json:"billing_history_cluster_details,omitempty"`
	Message                      *string                                      `json:"message,omitempty"`
	Status                       *bool                                        `json:"status,omitempty"`
}

// ResourceLevelClusterBillingHistoryResponseModel defines model for ResourceLevelClusterBillingHistoryResponseModel.
type ResourceLevelClusterBillingHistoryResponseModel struct {
	BillingHistoryCluster *ResourceLevelBillingHistory `json:"billing_history_cluster,omitempty"`
	Message               *string                      `json:"message,omitempty"`
	Status                *bool                        `json:"status,omitempty"`
}

// ResourceLevelClusterGraphBillingDetailsResponseModel defines model for ResourceLevelClusterGraphBillingDetailsResponseModel.
type ResourceLevelClusterGraphBillingDetailsResponseModel struct {
	BillingHistoryClusterDetails *ResourceLevelGraphBillingDetailVolume `json:"billing_history_cluster_details,omitempty"`
	Message                      *string                                `json:"message,omitempty"`
	Status                       *bool                                  `json:"status,omitempty"`
}

// ResourceLevelGraphBillingDetailVolume defines model for ResourceLevelGraphBillingDetailVolume.
type ResourceLevelGraphBillingDetailVolume struct {
	BillingHistory *[]ResourceLevelGraphBillingVolumeDetailsResources `json:"billing_history,omitempty"`
	Granularity    *int                                               `json:"granularity,omitempty"`
	OrgId          *int                                               `json:"org_id,omitempty"`
	TotalCount     *int                                               `json:"total_count,omitempty"`
}

// ResourceLevelGraphBillingDetailsAttributes defines model for ResourceLevelGraphBillingDetailsAttributes.
type ResourceLevelGraphBillingDetailsAttributes struct {
	Id           *string `json:"id,omitempty"`
	InfrahubId   *int    `json:"infrahub_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
}

// ResourceLevelGraphBillingDetailsBucket defines model for ResourceLevelGraphBillingDetailsBucket.
type ResourceLevelGraphBillingDetailsBucket struct {
	BillingHistory *[]ResourceLevelBillingBucketDetailsResources `json:"billing_history,omitempty"`
	Granularity    *int                                          `json:"granularity,omitempty"`
	OrgId          *int                                          `json:"org_id,omitempty"`
	TotalCount     *int                                          `json:"total_count,omitempty"`
}

// ResourceLevelGraphBillingDetailsMetrics defines model for ResourceLevelGraphBillingDetailsMetrics.
type ResourceLevelGraphBillingDetailsMetrics struct {
	IncurredBill      *float32                   `json:"incurred_bill,omitempty"`
	IncurredBillGraph *[]GraphDatetimeValueModel `json:"incurred_bill_graph,omitempty"`
}

// ResourceLevelGraphBillingDetailsVM defines model for ResourceLevelGraphBillingDetailsVM.
type ResourceLevelGraphBillingDetailsVM struct {
	BillingHistory *[]ResourceLevelGraphBillingVMDetailsResources `json:"billing_history,omitempty"`
	Granularity    *int                                           `json:"granularity,omitempty"`
	OrgId          *int                                           `json:"org_id,omitempty"`
	TotalCount     *int                                           `json:"total_count,omitempty"`
}

// ResourceLevelGraphBillingVMDetailsResources defines model for ResourceLevelGraphBillingVMDetailsResources.
type ResourceLevelGraphBillingVMDetailsResources struct {
	Attributes *ResourceLevelGraphBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelGraphBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelGraphBillingVolumeDetailsResources defines model for ResourceLevelGraphBillingVolumeDetailsResources.
type ResourceLevelGraphBillingVolumeDetailsResources struct {
	Attributes *ResourceLevelGraphBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelGraphBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelVMBillingDetailsResponseModel defines model for ResourceLevelVMBillingDetailsResponseModel.
type ResourceLevelVMBillingDetailsResponseModel struct {
	BillingHistoryVmDetails *ResourceLevelBillingDetailsVM `json:"billing_history_vm_details,omitempty"`
	Message                 *string                        `json:"message,omitempty"`
	Status                  *bool                          `json:"status,omitempty"`
}

// ResourceLevelVmBillingHistoryResponseModel defines model for ResourceLevelVmBillingHistoryResponseModel.
type ResourceLevelVmBillingHistoryResponseModel struct {
	BillingHistoryVm *ResourceLevelBillingHistory `json:"billing_history_vm,omitempty"`
	Message          *string                      `json:"message,omitempty"`
	Status           *bool                        `json:"status,omitempty"`
}

// ResourceLevelVmGraphBillingDetailsResponseModel defines model for ResourceLevelVmGraphBillingDetailsResponseModel.
type ResourceLevelVmGraphBillingDetailsResponseModel struct {
	BillingHistoryVmDetails *ResourceLevelGraphBillingDetailsVM `json:"billing_history_vm_details,omitempty"`
	Message                 *string                             `json:"message,omitempty"`
	Status                  *bool                               `json:"status,omitempty"`
}

// ResourceLevelVolumeBillingDetailsResponseModel defines model for ResourceLevelVolumeBillingDetailsResponseModel.
type ResourceLevelVolumeBillingDetailsResponseModel struct {
	BillingHistoryVolumeDetails *ResourceLevelBillingDetailsVolume `json:"billing_history_volume_details,omitempty"`
	Message                     *string                            `json:"message,omitempty"`
	Status                      *bool                              `json:"status,omitempty"`
}

// ResourceLevelVolumeBillingHistoryResponseModel defines model for ResourceLevelVolumeBillingHistoryResponseModel.
type ResourceLevelVolumeBillingHistoryResponseModel struct {
	BillingHistoryVolume *ResourceLevelBillingHistory `json:"billing_history_volume,omitempty"`
	Message              *string                      `json:"message,omitempty"`
	Status               *bool                        `json:"status,omitempty"`
}

// ResourceLevelVolumeGraphBillingDetailsResponseModel defines model for ResourceLevelVolumeGraphBillingDetailsResponseModel.
type ResourceLevelVolumeGraphBillingDetailsResponseModel struct {
	BillingHistorySnapshotDetails *ResourceLevelGraphBillingDetailVolume `json:"billing_history_snapshot_details,omitempty"`
	Message                       *string                                `json:"message,omitempty"`
	Status                        *bool                                  `json:"status,omitempty"`
}

// ServerlessInferencedBillingHistoryDetailsResponseSchema defines model for ServerlessInferencedBillingHistoryDetailsResponseSchema.
type ServerlessInferencedBillingHistoryDetailsResponseSchema struct {
	BillingHistoryServerlessInferenceDetails *BillingHistoryServerlessInferenceDetails `json:"billing_history_serverless_inference_details,omitempty"`
	Message                                  *string                                   `json:"message,omitempty"`
	Status                                   *bool                                     `json:"status,omitempty"`
}

// SubResourceGraphBillingDetailsMetrics defines model for SubResourceGraphBillingDetailsMetrics.
type SubResourceGraphBillingDetailsMetrics struct {
	CpuIncurredBill            *float32                   `json:"cpu_incurred_bill,omitempty"`
	CpuIncurredBillGraph       *[]GraphDatetimeValueModel `json:"cpu_incurred_bill_graph,omitempty"`
	DiskIncurredBill           *float32                   `json:"disk_incurred_bill,omitempty"`
	DiskIncurredBillGraph      *[]GraphDatetimeValueModel `json:"disk_incurred_bill_graph,omitempty"`
	EphemeralIncurredBill      *float32                   `json:"ephemeral_incurred_bill,omitempty"`
	EphemeralIncurredBillGraph *[]GraphDatetimeValueModel `json:"ephemeral_incurred_bill_graph,omitempty"`
	GpuIncurredBill            *float32                   `json:"gpu_incurred_bill,omitempty"`
	GpuIncurredBillGraph       *[]GraphDatetimeValueModel `json:"gpu_incurred_bill_graph,omitempty"`
	PublicipIncurredBill       *float32                   `json:"publicip_incurred_bill,omitempty"`
	PublicipIncurredBillGraph  *[]GraphDatetimeValueModel `json:"publicip_incurred_bill_graph,omitempty"`
	RamIncurredBill            *float32                   `json:"ram_incurred_bill,omitempty"`
	RamIncurredBillGraph       *[]GraphDatetimeValueModel `json:"ram_incurred_bill_graph,omitempty"`
}

// SubResourcesCostsResponseModel defines model for SubResourcesCostsResponseModel.
type SubResourcesCostsResponseModel struct {
	BillingHistory *[]SubResourcesGraphBillingHistoryFields `json:"billing_history,omitempty"`
	Granularity    *int                                     `json:"granularity,omitempty"`
	OrgId          *int                                     `json:"org_id,omitempty"`
	TotalCount     *int                                     `json:"total_count,omitempty"`
}

// SubResourcesGraphBillingHistoryFields defines model for SubResourcesGraphBillingHistoryFields.
type SubResourcesGraphBillingHistoryFields struct {
	Attributes *ResourceLevelBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *SubResourceGraphBillingDetailsMetrics `json:"metrics,omitempty"`
}

// SubResourcesGraphResponseModel defines model for SubResourcesGraphResponseModel.
type SubResourcesGraphResponseModel struct {
	Message           *string                         `json:"message,omitempty"`
	Status            *bool                           `json:"status,omitempty"`
	SubResourcesCosts *SubResourcesCostsResponseModel `json:"sub_resources_costs,omitempty"`
}

// SubscribeOrUnsubscribeUpdatePayload defines model for Subscribe_or_unsubscribe_update_payload.
type SubscribeOrUnsubscribeUpdatePayload struct {
	// Subscribe `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
	Subscribe bool `json:"subscribe"`
}

// TokenBasedBillingHistoryResponse defines model for TokenBasedBillingHistoryResponse.
type TokenBasedBillingHistoryResponse struct {
	BillingHistoryServerlessInference *BillingHistoryServerlessInference `json:"billing_history_serverless_inference,omitempty"`
	Message                           *string                            `json:"message,omitempty"`
	Success                           *bool                              `json:"success,omitempty"`
}

// WorkloadBillingHistoryResponse defines model for WorkloadBillingHistoryResponse.
type WorkloadBillingHistoryResponse struct {
	BillingHistoryFineTuning *BillingHistoryFineTuning `json:"billing_history_fine_tuning,omitempty"`
	Message                  *string                   `json:"message,omitempty"`
	Success                  *bool                     `json:"success,omitempty"`
}

// Attributes defines model for attributes.
type Attributes struct {
	BaseModel            *string `json:"base_model,omitempty"`
	BaseModelDisplayName *string `json:"base_model_display_name,omitempty"`
	InfrahubId           *int    `json:"infrahub_id,omitempty"`
	LoraAdapter          *string `json:"lora_adapter,omitempty"`
	ResourceName         *string `json:"resource_name,omitempty"`
	Status               *string `json:"status,omitempty"`
}

// BillingHistory defines model for billing_history.
type BillingHistory struct {
	Attributes *Attributes `json:"attributes,omitempty"`
	Metrics    *Metrics    `json:"metrics,omitempty"`
}

// BillingHistoryDataSynthesisDetails defines model for billing_history_data_synthesis_details.
type BillingHistoryDataSynthesisDetails struct {
	BillingHistory *[]BillingHistory `json:"billing_history,omitempty"`
	OrgId          *int              `json:"org_id,omitempty"`
	Pagination     *Pagination       `json:"pagination,omitempty"`
	TotalCount     *int              `json:"total_count,omitempty"`
}

// BillingHistoryFineTuning defines model for billing_history_fine_tuning.
type BillingHistoryFineTuning struct {
	BillingHistory *[]BillingHistory `json:"billing_history,omitempty"`
	OrgId          *int              `json:"org_id,omitempty"`
	Pagination     *Pagination       `json:"pagination,omitempty"`
	TotalCount     *int              `json:"total_count,omitempty"`
}

// BillingHistoryModelEvalutationDetails defines model for billing_history_model_evalutation_details.
type BillingHistoryModelEvalutationDetails struct {
	BillingHistory *[]BillingHistory `json:"billing_history,omitempty"`
	OrgId          *int              `json:"org_id,omitempty"`
	Pagination     *Pagination       `json:"pagination,omitempty"`
	TotalCount     *int              `json:"total_count,omitempty"`
}

// BillingHistoryServerlessInference defines model for billing_history_serverless_inference.
type BillingHistoryServerlessInference struct {
	BillingHistory *[]BillingHistory `json:"billing_history,omitempty"`
	OrgId          *int              `json:"org_id,omitempty"`
	Pagination     *Pagination       `json:"pagination,omitempty"`
	TotalCount     *int              `json:"total_count,omitempty"`
}

// BillingHistoryServerlessInferenceDetails defines model for billing_history_serverless_inference_details.
type BillingHistoryServerlessInferenceDetails struct {
	BillingHistory *[]BillingHistory `json:"billing_history,omitempty"`
	OrgId          *int              `json:"org_id,omitempty"`
	Pagination     *Pagination       `json:"pagination,omitempty"`
	TotalCount     *int              `json:"total_count,omitempty"`
}

// Metrics defines model for metrics.
type Metrics = map[string]interface{}

// Pagination defines model for pagination.
type Pagination struct {
	Page    *int `json:"page,omitempty"`
	Pages   *int `json:"pages,omitempty"`
	PerPage *int `json:"per_page,omitempty"`
}

// GetUserBillingHistory2Params defines parameters for GetUserBillingHistory2.
type GetUserBillingHistory2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Graph     *string `form:"graph,omitempty" json:"graph,omitempty"`
}

// GetUserBillingHistoryBucket2Params defines parameters for GetUserBillingHistoryBucket2.
type GetUserBillingHistoryBucket2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryBucketDetailsParams defines parameters for GetUserBillingHistoryBucketDetails.
type GetUserBillingHistoryBucketDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingBucketDetailsGraphParams defines parameters for GetUserBillingBucketDetailsGraph.
type GetUserBillingBucketDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryClusterParams defines parameters for GetUserBillingHistoryCluster.
type GetUserBillingHistoryClusterParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryClusterDetailsParams defines parameters for GetUserBillingHistoryClusterDetails.
type GetUserBillingHistoryClusterDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingClusterDetailsGraphParams defines parameters for GetUserBillingClusterDetailsGraph.
type GetUserBillingClusterDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryContractParams defines parameters for GetUserBillingHistoryContract.
type GetUserBillingHistoryContractParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetUserBillingHistoryDataSynthesisParams defines parameters for GetUserBillingHistoryDataSynthesis.
type GetUserBillingHistoryDataSynthesisParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryDataSynthesisDetailsParams defines parameters for GetUserBillingHistoryDataSynthesisDetails.
type GetUserBillingHistoryDataSynthesisDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingDataSynthesisDetailsGraphParams defines parameters for GetUserBillingDataSynthesisDetailsGraph.
type GetUserBillingDataSynthesisDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryFineTuningParams defines parameters for GetUserBillingHistoryFineTuning.
type GetUserBillingHistoryFineTuningParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryFineTuningDetailsParams defines parameters for GetUserBillingHistoryFineTuningDetails.
type GetUserBillingHistoryFineTuningDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingFineTuningDetailsGraphParams defines parameters for GetUserBillingFineTuningDetailsGraph.
type GetUserBillingFineTuningDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryModelEvaluationParams defines parameters for GetUserBillingHistoryModelEvaluation.
type GetUserBillingHistoryModelEvaluationParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryModelEvaluationDetailsParams defines parameters for GetUserBillingHistoryModelEvaluationDetails.
type GetUserBillingHistoryModelEvaluationDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingModelEvaluationDetailsGraphParams defines parameters for GetUserBillingModelEvaluationDetailsGraph.
type GetUserBillingModelEvaluationDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryServerlessInferenceParams defines parameters for GetUserBillingHistoryServerlessInference.
type GetUserBillingHistoryServerlessInferenceParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryServerlessInferenceDetailsParams defines parameters for GetUserBillingHistoryServerlessInferenceDetails.
type GetUserBillingHistoryServerlessInferenceDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingServerlessInferenceDetailsGraphParams defines parameters for GetUserBillingServerlessInferenceDetailsGraph.
type GetUserBillingServerlessInferenceDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistorySnapshotParams defines parameters for GetUserBillingHistorySnapshot.
type GetUserBillingHistorySnapshotParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistorySnapshotDetailsParams defines parameters for GetUserBillingHistorySnapshotDetails.
type GetUserBillingHistorySnapshotDetailsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingSnapshotDetailsGraphParams defines parameters for GetUserBillingSnapshotDetailsGraph.
type GetUserBillingSnapshotDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryVm2Params defines parameters for GetUserBillingHistoryVm2.
type GetUserBillingHistoryVm2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryVmDetails2Params defines parameters for GetUserBillingHistoryVmDetails2.
type GetUserBillingHistoryVmDetails2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingVmDetailsGraph2Params defines parameters for GetUserBillingVmDetailsGraph2.
type GetUserBillingVmDetailsGraph2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryVolume2Params defines parameters for GetUserBillingHistoryVolume2.
type GetUserBillingHistoryVolume2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *int    `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *int    `form:"page,omitempty" json:"page,omitempty"`
}

// GetUserBillingHistoryVolumeDetails2Params defines parameters for GetUserBillingHistoryVolumeDetails2.
type GetUserBillingHistoryVolumeDetails2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingVolumeDetailsGraphParams defines parameters for GetUserBillingVolumeDetailsGraph.
type GetUserBillingVolumeDetailsGraphParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUsage2Params defines parameters for GetUsage2.
type GetUsage2Params struct {
	Deleted     *string `form:"deleted,omitempty" json:"deleted,omitempty"`
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// GetUserVmBillingEventsParams defines parameters for GetUserVmBillingEvents.
type GetUserVmBillingEventsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryVmTotalCostsParams defines parameters for GetUserBillingHistoryVmTotalCosts.
type GetUserBillingHistoryVmTotalCostsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserBillingHistoryVmSubResourceGraph2Params defines parameters for GetUserBillingHistoryVmSubResourceGraph2.
type GetUserBillingHistoryVmSubResourceGraph2Params struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetUserVolumeBillingEventsParams defines parameters for GetUserVolumeBillingEvents.
type GetUserVolumeBillingEventsParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// PutOrganizationThresholdJSONRequestBody defines body for PutOrganizationThreshold for application/json ContentType.
type PutOrganizationThresholdJSONRequestBody = SubscribeOrUnsubscribeUpdatePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUserBillingHistory2 request
	GetUserBillingHistory2(ctx context.Context, params *GetUserBillingHistory2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryBucket2 request
	GetUserBillingHistoryBucket2(ctx context.Context, params *GetUserBillingHistoryBucket2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryBucketDetails request
	GetUserBillingHistoryBucketDetails(ctx context.Context, bucketId int, params *GetUserBillingHistoryBucketDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingBucketDetailsGraph request
	GetUserBillingBucketDetailsGraph(ctx context.Context, bucketId int, params *GetUserBillingBucketDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryCluster request
	GetUserBillingHistoryCluster(ctx context.Context, params *GetUserBillingHistoryClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryClusterDetails request
	GetUserBillingHistoryClusterDetails(ctx context.Context, clusterId int, params *GetUserBillingHistoryClusterDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingClusterDetailsGraph request
	GetUserBillingClusterDetailsGraph(ctx context.Context, clusterId int, params *GetUserBillingClusterDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryContract request
	GetUserBillingHistoryContract(ctx context.Context, params *GetUserBillingHistoryContractParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryDataSynthesis request
	GetUserBillingHistoryDataSynthesis(ctx context.Context, params *GetUserBillingHistoryDataSynthesisParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryDataSynthesisDetails request
	GetUserBillingHistoryDataSynthesisDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryDataSynthesisDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingDataSynthesisDetailsGraph request
	GetUserBillingDataSynthesisDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingDataSynthesisDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryFineTuning request
	GetUserBillingHistoryFineTuning(ctx context.Context, params *GetUserBillingHistoryFineTuningParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryFineTuningDetails request
	GetUserBillingHistoryFineTuningDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryFineTuningDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingFineTuningDetailsGraph request
	GetUserBillingFineTuningDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingFineTuningDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryModelEvaluation request
	GetUserBillingHistoryModelEvaluation(ctx context.Context, params *GetUserBillingHistoryModelEvaluationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryModelEvaluationDetails request
	GetUserBillingHistoryModelEvaluationDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryModelEvaluationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingModelEvaluationDetailsGraph request
	GetUserBillingModelEvaluationDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingModelEvaluationDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryServerlessInference request
	GetUserBillingHistoryServerlessInference(ctx context.Context, params *GetUserBillingHistoryServerlessInferenceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryServerlessInferenceDetails request
	GetUserBillingHistoryServerlessInferenceDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryServerlessInferenceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingServerlessInferenceDetailsGraph request
	GetUserBillingServerlessInferenceDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingServerlessInferenceDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistorySnapshot request
	GetUserBillingHistorySnapshot(ctx context.Context, params *GetUserBillingHistorySnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistorySnapshotDetails request
	GetUserBillingHistorySnapshotDetails(ctx context.Context, snapshotId int, params *GetUserBillingHistorySnapshotDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingSnapshotDetailsGraph request
	GetUserBillingSnapshotDetailsGraph(ctx context.Context, snapshotId int, params *GetUserBillingSnapshotDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryVm2 request
	GetUserBillingHistoryVm2(ctx context.Context, params *GetUserBillingHistoryVm2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryVmDetails2 request
	GetUserBillingHistoryVmDetails2(ctx context.Context, vmId int, params *GetUserBillingHistoryVmDetails2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingVmDetailsGraph2 request
	GetUserBillingVmDetailsGraph2(ctx context.Context, vmId int, params *GetUserBillingVmDetailsGraph2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryVolume2 request
	GetUserBillingHistoryVolume2(ctx context.Context, params *GetUserBillingHistoryVolume2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryVolumeDetails2 request
	GetUserBillingHistoryVolumeDetails2(ctx context.Context, volumeId int, params *GetUserBillingHistoryVolumeDetails2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingVolumeDetailsGraph request
	GetUserBillingVolumeDetailsGraph(ctx context.Context, volumeId int, params *GetUserBillingVolumeDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLastDayCost request
	GetLastDayCost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationThreshold request
	GetOrganizationThreshold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationThresholdWithBody request with any body
	PutOrganizationThresholdWithBody(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationThreshold(ctx context.Context, thresholdId int, body PutOrganizationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsage2 request
	GetUsage2(ctx context.Context, params *GetUsage2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserVmBillingEvents request
	GetUserVmBillingEvents(ctx context.Context, vmId int, params *GetUserVmBillingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryVmTotalCosts request
	GetUserBillingHistoryVmTotalCosts(ctx context.Context, vmId int, params *GetUserBillingHistoryVmTotalCostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBillingHistoryVmSubResourceGraph2 request
	GetUserBillingHistoryVmSubResourceGraph2(ctx context.Context, vmId int, params *GetUserBillingHistoryVmSubResourceGraph2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserVolumeBillingEvents request
	GetUserVolumeBillingEvents(ctx context.Context, volumeId int, params *GetUserVolumeBillingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUserBillingHistory2(ctx context.Context, params *GetUserBillingHistory2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistory2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryBucket2(ctx context.Context, params *GetUserBillingHistoryBucket2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryBucket2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryBucketDetails(ctx context.Context, bucketId int, params *GetUserBillingHistoryBucketDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryBucketDetailsRequest(c.Server, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingBucketDetailsGraph(ctx context.Context, bucketId int, params *GetUserBillingBucketDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingBucketDetailsGraphRequest(c.Server, bucketId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryCluster(ctx context.Context, params *GetUserBillingHistoryClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryClusterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryClusterDetails(ctx context.Context, clusterId int, params *GetUserBillingHistoryClusterDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryClusterDetailsRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingClusterDetailsGraph(ctx context.Context, clusterId int, params *GetUserBillingClusterDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingClusterDetailsGraphRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryContract(ctx context.Context, params *GetUserBillingHistoryContractParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryContractRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryDataSynthesis(ctx context.Context, params *GetUserBillingHistoryDataSynthesisParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryDataSynthesisRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryDataSynthesisDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryDataSynthesisDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryDataSynthesisDetailsRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingDataSynthesisDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingDataSynthesisDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingDataSynthesisDetailsGraphRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryFineTuning(ctx context.Context, params *GetUserBillingHistoryFineTuningParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryFineTuningRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryFineTuningDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryFineTuningDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryFineTuningDetailsRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingFineTuningDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingFineTuningDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingFineTuningDetailsGraphRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryModelEvaluation(ctx context.Context, params *GetUserBillingHistoryModelEvaluationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryModelEvaluationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryModelEvaluationDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryModelEvaluationDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryModelEvaluationDetailsRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingModelEvaluationDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingModelEvaluationDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingModelEvaluationDetailsGraphRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryServerlessInference(ctx context.Context, params *GetUserBillingHistoryServerlessInferenceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryServerlessInferenceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryServerlessInferenceDetails(ctx context.Context, resourceId int, params *GetUserBillingHistoryServerlessInferenceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryServerlessInferenceDetailsRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingServerlessInferenceDetailsGraph(ctx context.Context, resourceId int, params *GetUserBillingServerlessInferenceDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingServerlessInferenceDetailsGraphRequest(c.Server, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistorySnapshot(ctx context.Context, params *GetUserBillingHistorySnapshotParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistorySnapshotRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistorySnapshotDetails(ctx context.Context, snapshotId int, params *GetUserBillingHistorySnapshotDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistorySnapshotDetailsRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingSnapshotDetailsGraph(ctx context.Context, snapshotId int, params *GetUserBillingSnapshotDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingSnapshotDetailsGraphRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryVm2(ctx context.Context, params *GetUserBillingHistoryVm2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryVm2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryVmDetails2(ctx context.Context, vmId int, params *GetUserBillingHistoryVmDetails2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryVmDetails2Request(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingVmDetailsGraph2(ctx context.Context, vmId int, params *GetUserBillingVmDetailsGraph2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingVmDetailsGraph2Request(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryVolume2(ctx context.Context, params *GetUserBillingHistoryVolume2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryVolume2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryVolumeDetails2(ctx context.Context, volumeId int, params *GetUserBillingHistoryVolumeDetails2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryVolumeDetails2Request(c.Server, volumeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingVolumeDetailsGraph(ctx context.Context, volumeId int, params *GetUserBillingVolumeDetailsGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingVolumeDetailsGraphRequest(c.Server, volumeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLastDayCost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLastDayCostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationThreshold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationThresholdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationThresholdWithBody(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationThresholdRequestWithBody(c.Server, thresholdId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationThreshold(ctx context.Context, thresholdId int, body PutOrganizationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationThresholdRequest(c.Server, thresholdId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsage2(ctx context.Context, params *GetUsage2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsage2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserVmBillingEvents(ctx context.Context, vmId int, params *GetUserVmBillingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserVmBillingEventsRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryVmTotalCosts(ctx context.Context, vmId int, params *GetUserBillingHistoryVmTotalCostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryVmTotalCostsRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBillingHistoryVmSubResourceGraph2(ctx context.Context, vmId int, params *GetUserBillingHistoryVmSubResourceGraph2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBillingHistoryVmSubResourceGraph2Request(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserVolumeBillingEvents(ctx context.Context, volumeId int, params *GetUserVolumeBillingEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserVolumeBillingEventsRequest(c.Server, volumeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUserBillingHistory2Request generates requests for GetUserBillingHistory2
func NewGetUserBillingHistory2Request(server string, params *GetUserBillingHistory2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Graph != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "graph", runtime.ParamLocationQuery, *params.Graph); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryBucket2Request generates requests for GetUserBillingHistoryBucket2
func NewGetUserBillingHistoryBucket2Request(server string, params *GetUserBillingHistoryBucket2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/bucket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryBucketDetailsRequest generates requests for GetUserBillingHistoryBucketDetails
func NewGetUserBillingHistoryBucketDetailsRequest(server string, bucketId int, params *GetUserBillingHistoryBucketDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_id", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/bucket/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingBucketDetailsGraphRequest generates requests for GetUserBillingBucketDetailsGraph
func NewGetUserBillingBucketDetailsGraphRequest(server string, bucketId int, params *GetUserBillingBucketDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bucket_id", runtime.ParamLocationPath, bucketId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/bucket/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryClusterRequest generates requests for GetUserBillingHistoryCluster
func NewGetUserBillingHistoryClusterRequest(server string, params *GetUserBillingHistoryClusterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/cluster")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryClusterDetailsRequest generates requests for GetUserBillingHistoryClusterDetails
func NewGetUserBillingHistoryClusterDetailsRequest(server string, clusterId int, params *GetUserBillingHistoryClusterDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/cluster/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingClusterDetailsGraphRequest generates requests for GetUserBillingClusterDetailsGraph
func NewGetUserBillingClusterDetailsGraphRequest(server string, clusterId int, params *GetUserBillingClusterDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cluster_id", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/cluster/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryContractRequest generates requests for GetUserBillingHistoryContract
func NewGetUserBillingHistoryContractRequest(server string, params *GetUserBillingHistoryContractParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/contract")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryDataSynthesisRequest generates requests for GetUserBillingHistoryDataSynthesis
func NewGetUserBillingHistoryDataSynthesisRequest(server string, params *GetUserBillingHistoryDataSynthesisParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/data_synthesis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryDataSynthesisDetailsRequest generates requests for GetUserBillingHistoryDataSynthesisDetails
func NewGetUserBillingHistoryDataSynthesisDetailsRequest(server string, resourceId int, params *GetUserBillingHistoryDataSynthesisDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/data_synthesis/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingDataSynthesisDetailsGraphRequest generates requests for GetUserBillingDataSynthesisDetailsGraph
func NewGetUserBillingDataSynthesisDetailsGraphRequest(server string, resourceId int, params *GetUserBillingDataSynthesisDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/data_synthesis/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryFineTuningRequest generates requests for GetUserBillingHistoryFineTuning
func NewGetUserBillingHistoryFineTuningRequest(server string, params *GetUserBillingHistoryFineTuningParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/fine_tuning")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryFineTuningDetailsRequest generates requests for GetUserBillingHistoryFineTuningDetails
func NewGetUserBillingHistoryFineTuningDetailsRequest(server string, resourceId int, params *GetUserBillingHistoryFineTuningDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/fine_tuning/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingFineTuningDetailsGraphRequest generates requests for GetUserBillingFineTuningDetailsGraph
func NewGetUserBillingFineTuningDetailsGraphRequest(server string, resourceId int, params *GetUserBillingFineTuningDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/fine_tuning/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryModelEvaluationRequest generates requests for GetUserBillingHistoryModelEvaluation
func NewGetUserBillingHistoryModelEvaluationRequest(server string, params *GetUserBillingHistoryModelEvaluationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/model_evaluation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryModelEvaluationDetailsRequest generates requests for GetUserBillingHistoryModelEvaluationDetails
func NewGetUserBillingHistoryModelEvaluationDetailsRequest(server string, resourceId int, params *GetUserBillingHistoryModelEvaluationDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/model_evaluation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingModelEvaluationDetailsGraphRequest generates requests for GetUserBillingModelEvaluationDetailsGraph
func NewGetUserBillingModelEvaluationDetailsGraphRequest(server string, resourceId int, params *GetUserBillingModelEvaluationDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/model_evaluation/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryServerlessInferenceRequest generates requests for GetUserBillingHistoryServerlessInference
func NewGetUserBillingHistoryServerlessInferenceRequest(server string, params *GetUserBillingHistoryServerlessInferenceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/serverless_inference")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryServerlessInferenceDetailsRequest generates requests for GetUserBillingHistoryServerlessInferenceDetails
func NewGetUserBillingHistoryServerlessInferenceDetailsRequest(server string, resourceId int, params *GetUserBillingHistoryServerlessInferenceDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/serverless_inference/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingServerlessInferenceDetailsGraphRequest generates requests for GetUserBillingServerlessInferenceDetailsGraph
func NewGetUserBillingServerlessInferenceDetailsGraphRequest(server string, resourceId int, params *GetUserBillingServerlessInferenceDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource_id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/serverless_inference/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistorySnapshotRequest generates requests for GetUserBillingHistorySnapshot
func NewGetUserBillingHistorySnapshotRequest(server string, params *GetUserBillingHistorySnapshotParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistorySnapshotDetailsRequest generates requests for GetUserBillingHistorySnapshotDetails
func NewGetUserBillingHistorySnapshotDetailsRequest(server string, snapshotId int, params *GetUserBillingHistorySnapshotDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/snapshot/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingSnapshotDetailsGraphRequest generates requests for GetUserBillingSnapshotDetailsGraph
func NewGetUserBillingSnapshotDetailsGraphRequest(server string, snapshotId int, params *GetUserBillingSnapshotDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/snapshot/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryVm2Request generates requests for GetUserBillingHistoryVm2
func NewGetUserBillingHistoryVm2Request(server string, params *GetUserBillingHistoryVm2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/virtual-machine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryVmDetails2Request generates requests for GetUserBillingHistoryVmDetails2
func NewGetUserBillingHistoryVmDetails2Request(server string, vmId int, params *GetUserBillingHistoryVmDetails2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/virtual-machine/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingVmDetailsGraph2Request generates requests for GetUserBillingVmDetailsGraph2
func NewGetUserBillingVmDetailsGraph2Request(server string, vmId int, params *GetUserBillingVmDetailsGraph2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/virtual-machine/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryVolume2Request generates requests for GetUserBillingHistoryVolume2
func NewGetUserBillingHistoryVolume2Request(server string, params *GetUserBillingHistoryVolume2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryVolumeDetails2Request generates requests for GetUserBillingHistoryVolumeDetails2
func NewGetUserBillingHistoryVolumeDetails2Request(server string, volumeId int, params *GetUserBillingHistoryVolumeDetails2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_id", runtime.ParamLocationPath, volumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/volume/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingVolumeDetailsGraphRequest generates requests for GetUserBillingVolumeDetailsGraph
func NewGetUserBillingVolumeDetailsGraphRequest(server string, volumeId int, params *GetUserBillingVolumeDetailsGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_id", runtime.ParamLocationPath, volumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/volume/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLastDayCostRequest generates requests for GetLastDayCost
func NewGetLastDayCostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/last-day-cost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationThresholdRequest generates requests for GetOrganizationThreshold
func NewGetOrganizationThresholdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/threshold")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationThresholdRequest calls the generic PutOrganizationThreshold builder with application/json body
func NewPutOrganizationThresholdRequest(server string, thresholdId int, body PutOrganizationThresholdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationThresholdRequestWithBody(server, thresholdId, "application/json", bodyReader)
}

// NewPutOrganizationThresholdRequestWithBody generates requests for PutOrganizationThreshold with any type of body
func NewPutOrganizationThresholdRequestWithBody(server string, thresholdId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "threshold_id", runtime.ParamLocationPath, thresholdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/threshold/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsage2Request generates requests for GetUsage2
func NewGetUsage2Request(server string, params *GetUsage2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserVmBillingEventsRequest generates requests for GetUserVmBillingEvents
func NewGetUserVmBillingEventsRequest(server string, vmId int, params *GetUserVmBillingEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/virtual-machine/%s/billing-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryVmTotalCostsRequest generates requests for GetUserBillingHistoryVmTotalCosts
func NewGetUserBillingHistoryVmTotalCostsRequest(server string, vmId int, params *GetUserBillingHistoryVmTotalCostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/virtual-machine/%s/sub-resource", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBillingHistoryVmSubResourceGraph2Request generates requests for GetUserBillingHistoryVmSubResourceGraph2
func NewGetUserBillingHistoryVmSubResourceGraph2Request(server string, vmId int, params *GetUserBillingHistoryVmSubResourceGraph2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/virtual-machine/%s/sub-resource/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserVolumeBillingEventsRequest generates requests for GetUserVolumeBillingEvents
func NewGetUserVolumeBillingEventsRequest(server string, volumeId int, params *GetUserVolumeBillingEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_id", runtime.ParamLocationPath, volumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/volume/%s/billing-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUserBillingHistory2WithResponse request
	GetUserBillingHistory2WithResponse(ctx context.Context, params *GetUserBillingHistory2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistory2Response, error)

	// GetUserBillingHistoryBucket2WithResponse request
	GetUserBillingHistoryBucket2WithResponse(ctx context.Context, params *GetUserBillingHistoryBucket2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryBucket2Response, error)

	// GetUserBillingHistoryBucketDetailsWithResponse request
	GetUserBillingHistoryBucketDetailsWithResponse(ctx context.Context, bucketId int, params *GetUserBillingHistoryBucketDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryBucketDetailsResponse, error)

	// GetUserBillingBucketDetailsGraphWithResponse request
	GetUserBillingBucketDetailsGraphWithResponse(ctx context.Context, bucketId int, params *GetUserBillingBucketDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingBucketDetailsGraphResponse, error)

	// GetUserBillingHistoryClusterWithResponse request
	GetUserBillingHistoryClusterWithResponse(ctx context.Context, params *GetUserBillingHistoryClusterParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryClusterResponse, error)

	// GetUserBillingHistoryClusterDetailsWithResponse request
	GetUserBillingHistoryClusterDetailsWithResponse(ctx context.Context, clusterId int, params *GetUserBillingHistoryClusterDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryClusterDetailsResponse, error)

	// GetUserBillingClusterDetailsGraphWithResponse request
	GetUserBillingClusterDetailsGraphWithResponse(ctx context.Context, clusterId int, params *GetUserBillingClusterDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingClusterDetailsGraphResponse, error)

	// GetUserBillingHistoryContractWithResponse request
	GetUserBillingHistoryContractWithResponse(ctx context.Context, params *GetUserBillingHistoryContractParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryContractResponse, error)

	// GetUserBillingHistoryDataSynthesisWithResponse request
	GetUserBillingHistoryDataSynthesisWithResponse(ctx context.Context, params *GetUserBillingHistoryDataSynthesisParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryDataSynthesisResponse, error)

	// GetUserBillingHistoryDataSynthesisDetailsWithResponse request
	GetUserBillingHistoryDataSynthesisDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryDataSynthesisDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryDataSynthesisDetailsResponse, error)

	// GetUserBillingDataSynthesisDetailsGraphWithResponse request
	GetUserBillingDataSynthesisDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingDataSynthesisDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingDataSynthesisDetailsGraphResponse, error)

	// GetUserBillingHistoryFineTuningWithResponse request
	GetUserBillingHistoryFineTuningWithResponse(ctx context.Context, params *GetUserBillingHistoryFineTuningParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryFineTuningResponse, error)

	// GetUserBillingHistoryFineTuningDetailsWithResponse request
	GetUserBillingHistoryFineTuningDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryFineTuningDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryFineTuningDetailsResponse, error)

	// GetUserBillingFineTuningDetailsGraphWithResponse request
	GetUserBillingFineTuningDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingFineTuningDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingFineTuningDetailsGraphResponse, error)

	// GetUserBillingHistoryModelEvaluationWithResponse request
	GetUserBillingHistoryModelEvaluationWithResponse(ctx context.Context, params *GetUserBillingHistoryModelEvaluationParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryModelEvaluationResponse, error)

	// GetUserBillingHistoryModelEvaluationDetailsWithResponse request
	GetUserBillingHistoryModelEvaluationDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryModelEvaluationDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryModelEvaluationDetailsResponse, error)

	// GetUserBillingModelEvaluationDetailsGraphWithResponse request
	GetUserBillingModelEvaluationDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingModelEvaluationDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingModelEvaluationDetailsGraphResponse, error)

	// GetUserBillingHistoryServerlessInferenceWithResponse request
	GetUserBillingHistoryServerlessInferenceWithResponse(ctx context.Context, params *GetUserBillingHistoryServerlessInferenceParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryServerlessInferenceResponse, error)

	// GetUserBillingHistoryServerlessInferenceDetailsWithResponse request
	GetUserBillingHistoryServerlessInferenceDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryServerlessInferenceDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryServerlessInferenceDetailsResponse, error)

	// GetUserBillingServerlessInferenceDetailsGraphWithResponse request
	GetUserBillingServerlessInferenceDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingServerlessInferenceDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingServerlessInferenceDetailsGraphResponse, error)

	// GetUserBillingHistorySnapshotWithResponse request
	GetUserBillingHistorySnapshotWithResponse(ctx context.Context, params *GetUserBillingHistorySnapshotParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistorySnapshotResponse, error)

	// GetUserBillingHistorySnapshotDetailsWithResponse request
	GetUserBillingHistorySnapshotDetailsWithResponse(ctx context.Context, snapshotId int, params *GetUserBillingHistorySnapshotDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistorySnapshotDetailsResponse, error)

	// GetUserBillingSnapshotDetailsGraphWithResponse request
	GetUserBillingSnapshotDetailsGraphWithResponse(ctx context.Context, snapshotId int, params *GetUserBillingSnapshotDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingSnapshotDetailsGraphResponse, error)

	// GetUserBillingHistoryVm2WithResponse request
	GetUserBillingHistoryVm2WithResponse(ctx context.Context, params *GetUserBillingHistoryVm2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVm2Response, error)

	// GetUserBillingHistoryVmDetails2WithResponse request
	GetUserBillingHistoryVmDetails2WithResponse(ctx context.Context, vmId int, params *GetUserBillingHistoryVmDetails2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVmDetails2Response, error)

	// GetUserBillingVmDetailsGraph2WithResponse request
	GetUserBillingVmDetailsGraph2WithResponse(ctx context.Context, vmId int, params *GetUserBillingVmDetailsGraph2Params, reqEditors ...RequestEditorFn) (*GetUserBillingVmDetailsGraph2Response, error)

	// GetUserBillingHistoryVolume2WithResponse request
	GetUserBillingHistoryVolume2WithResponse(ctx context.Context, params *GetUserBillingHistoryVolume2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVolume2Response, error)

	// GetUserBillingHistoryVolumeDetails2WithResponse request
	GetUserBillingHistoryVolumeDetails2WithResponse(ctx context.Context, volumeId int, params *GetUserBillingHistoryVolumeDetails2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVolumeDetails2Response, error)

	// GetUserBillingVolumeDetailsGraphWithResponse request
	GetUserBillingVolumeDetailsGraphWithResponse(ctx context.Context, volumeId int, params *GetUserBillingVolumeDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingVolumeDetailsGraphResponse, error)

	// GetLastDayCostWithResponse request
	GetLastDayCostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLastDayCostResponse, error)

	// GetOrganizationThresholdWithResponse request
	GetOrganizationThresholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationThresholdResponse, error)

	// PutOrganizationThresholdWithBodyWithResponse request with any body
	PutOrganizationThresholdWithBodyWithResponse(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationThresholdResponse, error)

	PutOrganizationThresholdWithResponse(ctx context.Context, thresholdId int, body PutOrganizationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationThresholdResponse, error)

	// GetUsage2WithResponse request
	GetUsage2WithResponse(ctx context.Context, params *GetUsage2Params, reqEditors ...RequestEditorFn) (*GetUsage2Response, error)

	// GetUserVmBillingEventsWithResponse request
	GetUserVmBillingEventsWithResponse(ctx context.Context, vmId int, params *GetUserVmBillingEventsParams, reqEditors ...RequestEditorFn) (*GetUserVmBillingEventsResponse, error)

	// GetUserBillingHistoryVmTotalCostsWithResponse request
	GetUserBillingHistoryVmTotalCostsWithResponse(ctx context.Context, vmId int, params *GetUserBillingHistoryVmTotalCostsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVmTotalCostsResponse, error)

	// GetUserBillingHistoryVmSubResourceGraph2WithResponse request
	GetUserBillingHistoryVmSubResourceGraph2WithResponse(ctx context.Context, vmId int, params *GetUserBillingHistoryVmSubResourceGraph2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVmSubResourceGraph2Response, error)

	// GetUserVolumeBillingEventsWithResponse request
	GetUserVolumeBillingEventsWithResponse(ctx context.Context, volumeId int, params *GetUserVolumeBillingEventsParams, reqEditors ...RequestEditorFn) (*GetUserVolumeBillingEventsResponse, error)
}

type GetUserBillingHistory2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationLevelBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistory2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistory2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryBucket2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelBucketBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryBucket2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryBucket2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryBucketDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelBucketBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryBucketDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryBucketDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingBucketDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelGraphBillingDetailsBucket
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingBucketDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingBucketDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelClusterBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryClusterDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelClusterBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryClusterDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryClusterDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingClusterDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelClusterGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingClusterDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingClusterDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryDataSynthesisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenBasedBillingHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryDataSynthesisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryDataSynthesisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryDataSynthesisDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataSynthesisBillingHistoryDetailsResponseSchema
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryDataSynthesisDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryDataSynthesisDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingDataSynthesisDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DataSynthesisBillingHistoryDetailsResponseSchema
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingDataSynthesisDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingDataSynthesisDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryFineTuningResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadBillingHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryFineTuningResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryFineTuningResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryFineTuningDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryFineTuningDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryFineTuningDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingFineTuningDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingFineTuningDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingFineTuningDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryModelEvaluationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenBasedBillingHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryModelEvaluationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryModelEvaluationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryModelEvaluationDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelEvaluationBillingHistoryDetailsResponseSchema
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryModelEvaluationDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryModelEvaluationDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingModelEvaluationDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModelEvaluationBillingHistoryDetailsResponseSchema
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingModelEvaluationDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingModelEvaluationDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryServerlessInferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenBasedBillingHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryServerlessInferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryServerlessInferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryServerlessInferenceDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerlessInferencedBillingHistoryDetailsResponseSchema
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryServerlessInferenceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryServerlessInferenceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingServerlessInferenceDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServerlessInferencedBillingHistoryDetailsResponseSchema
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingServerlessInferenceDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingServerlessInferenceDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistorySnapshotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistorySnapshotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistorySnapshotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistorySnapshotDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistorySnapshotDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistorySnapshotDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingSnapshotDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingSnapshotDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingSnapshotDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryVm2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVmBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryVm2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryVm2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryVmDetails2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVMBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryVmDetails2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryVmDetails2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingVmDetailsGraph2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVmGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingVmDetailsGraph2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingVmDetailsGraph2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryVolume2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryVolume2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryVolume2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryVolumeDetails2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryVolumeDetails2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryVolumeDetails2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingVolumeDetailsGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingVolumeDetailsGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingVolumeDetailsGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLastDayCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LastDayCostResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetLastDayCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLastDayCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationThresholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationThresholdsResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationThresholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationThresholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationThresholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationThresholdUpdateResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r PutOrganizationThresholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationThresholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsage2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingMetricesResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUsage2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsage2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserVmBillingEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceBillingEventsHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserVmBillingEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserVmBillingEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryVmTotalCostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubResourcesCostsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryVmTotalCostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryVmTotalCostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBillingHistoryVmSubResourceGraph2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubResourcesGraphResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserBillingHistoryVmSubResourceGraph2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBillingHistoryVmSubResourceGraph2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserVolumeBillingEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceBillingEventsHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUserVolumeBillingEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserVolumeBillingEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUserBillingHistory2WithResponse request returning *GetUserBillingHistory2Response
func (c *ClientWithResponses) GetUserBillingHistory2WithResponse(ctx context.Context, params *GetUserBillingHistory2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistory2Response, error) {
	rsp, err := c.GetUserBillingHistory2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistory2Response(rsp)
}

// GetUserBillingHistoryBucket2WithResponse request returning *GetUserBillingHistoryBucket2Response
func (c *ClientWithResponses) GetUserBillingHistoryBucket2WithResponse(ctx context.Context, params *GetUserBillingHistoryBucket2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryBucket2Response, error) {
	rsp, err := c.GetUserBillingHistoryBucket2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryBucket2Response(rsp)
}

// GetUserBillingHistoryBucketDetailsWithResponse request returning *GetUserBillingHistoryBucketDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistoryBucketDetailsWithResponse(ctx context.Context, bucketId int, params *GetUserBillingHistoryBucketDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryBucketDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistoryBucketDetails(ctx, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryBucketDetailsResponse(rsp)
}

// GetUserBillingBucketDetailsGraphWithResponse request returning *GetUserBillingBucketDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingBucketDetailsGraphWithResponse(ctx context.Context, bucketId int, params *GetUserBillingBucketDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingBucketDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingBucketDetailsGraph(ctx, bucketId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingBucketDetailsGraphResponse(rsp)
}

// GetUserBillingHistoryClusterWithResponse request returning *GetUserBillingHistoryClusterResponse
func (c *ClientWithResponses) GetUserBillingHistoryClusterWithResponse(ctx context.Context, params *GetUserBillingHistoryClusterParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryClusterResponse, error) {
	rsp, err := c.GetUserBillingHistoryCluster(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryClusterResponse(rsp)
}

// GetUserBillingHistoryClusterDetailsWithResponse request returning *GetUserBillingHistoryClusterDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistoryClusterDetailsWithResponse(ctx context.Context, clusterId int, params *GetUserBillingHistoryClusterDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryClusterDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistoryClusterDetails(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryClusterDetailsResponse(rsp)
}

// GetUserBillingClusterDetailsGraphWithResponse request returning *GetUserBillingClusterDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingClusterDetailsGraphWithResponse(ctx context.Context, clusterId int, params *GetUserBillingClusterDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingClusterDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingClusterDetailsGraph(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingClusterDetailsGraphResponse(rsp)
}

// GetUserBillingHistoryContractWithResponse request returning *GetUserBillingHistoryContractResponse
func (c *ClientWithResponses) GetUserBillingHistoryContractWithResponse(ctx context.Context, params *GetUserBillingHistoryContractParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryContractResponse, error) {
	rsp, err := c.GetUserBillingHistoryContract(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryContractResponse(rsp)
}

// GetUserBillingHistoryDataSynthesisWithResponse request returning *GetUserBillingHistoryDataSynthesisResponse
func (c *ClientWithResponses) GetUserBillingHistoryDataSynthesisWithResponse(ctx context.Context, params *GetUserBillingHistoryDataSynthesisParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryDataSynthesisResponse, error) {
	rsp, err := c.GetUserBillingHistoryDataSynthesis(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryDataSynthesisResponse(rsp)
}

// GetUserBillingHistoryDataSynthesisDetailsWithResponse request returning *GetUserBillingHistoryDataSynthesisDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistoryDataSynthesisDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryDataSynthesisDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryDataSynthesisDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistoryDataSynthesisDetails(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryDataSynthesisDetailsResponse(rsp)
}

// GetUserBillingDataSynthesisDetailsGraphWithResponse request returning *GetUserBillingDataSynthesisDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingDataSynthesisDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingDataSynthesisDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingDataSynthesisDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingDataSynthesisDetailsGraph(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingDataSynthesisDetailsGraphResponse(rsp)
}

// GetUserBillingHistoryFineTuningWithResponse request returning *GetUserBillingHistoryFineTuningResponse
func (c *ClientWithResponses) GetUserBillingHistoryFineTuningWithResponse(ctx context.Context, params *GetUserBillingHistoryFineTuningParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryFineTuningResponse, error) {
	rsp, err := c.GetUserBillingHistoryFineTuning(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryFineTuningResponse(rsp)
}

// GetUserBillingHistoryFineTuningDetailsWithResponse request returning *GetUserBillingHistoryFineTuningDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistoryFineTuningDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryFineTuningDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryFineTuningDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistoryFineTuningDetails(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryFineTuningDetailsResponse(rsp)
}

// GetUserBillingFineTuningDetailsGraphWithResponse request returning *GetUserBillingFineTuningDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingFineTuningDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingFineTuningDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingFineTuningDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingFineTuningDetailsGraph(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingFineTuningDetailsGraphResponse(rsp)
}

// GetUserBillingHistoryModelEvaluationWithResponse request returning *GetUserBillingHistoryModelEvaluationResponse
func (c *ClientWithResponses) GetUserBillingHistoryModelEvaluationWithResponse(ctx context.Context, params *GetUserBillingHistoryModelEvaluationParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryModelEvaluationResponse, error) {
	rsp, err := c.GetUserBillingHistoryModelEvaluation(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryModelEvaluationResponse(rsp)
}

// GetUserBillingHistoryModelEvaluationDetailsWithResponse request returning *GetUserBillingHistoryModelEvaluationDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistoryModelEvaluationDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryModelEvaluationDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryModelEvaluationDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistoryModelEvaluationDetails(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryModelEvaluationDetailsResponse(rsp)
}

// GetUserBillingModelEvaluationDetailsGraphWithResponse request returning *GetUserBillingModelEvaluationDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingModelEvaluationDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingModelEvaluationDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingModelEvaluationDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingModelEvaluationDetailsGraph(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingModelEvaluationDetailsGraphResponse(rsp)
}

// GetUserBillingHistoryServerlessInferenceWithResponse request returning *GetUserBillingHistoryServerlessInferenceResponse
func (c *ClientWithResponses) GetUserBillingHistoryServerlessInferenceWithResponse(ctx context.Context, params *GetUserBillingHistoryServerlessInferenceParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryServerlessInferenceResponse, error) {
	rsp, err := c.GetUserBillingHistoryServerlessInference(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryServerlessInferenceResponse(rsp)
}

// GetUserBillingHistoryServerlessInferenceDetailsWithResponse request returning *GetUserBillingHistoryServerlessInferenceDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistoryServerlessInferenceDetailsWithResponse(ctx context.Context, resourceId int, params *GetUserBillingHistoryServerlessInferenceDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryServerlessInferenceDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistoryServerlessInferenceDetails(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryServerlessInferenceDetailsResponse(rsp)
}

// GetUserBillingServerlessInferenceDetailsGraphWithResponse request returning *GetUserBillingServerlessInferenceDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingServerlessInferenceDetailsGraphWithResponse(ctx context.Context, resourceId int, params *GetUserBillingServerlessInferenceDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingServerlessInferenceDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingServerlessInferenceDetailsGraph(ctx, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingServerlessInferenceDetailsGraphResponse(rsp)
}

// GetUserBillingHistorySnapshotWithResponse request returning *GetUserBillingHistorySnapshotResponse
func (c *ClientWithResponses) GetUserBillingHistorySnapshotWithResponse(ctx context.Context, params *GetUserBillingHistorySnapshotParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistorySnapshotResponse, error) {
	rsp, err := c.GetUserBillingHistorySnapshot(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistorySnapshotResponse(rsp)
}

// GetUserBillingHistorySnapshotDetailsWithResponse request returning *GetUserBillingHistorySnapshotDetailsResponse
func (c *ClientWithResponses) GetUserBillingHistorySnapshotDetailsWithResponse(ctx context.Context, snapshotId int, params *GetUserBillingHistorySnapshotDetailsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistorySnapshotDetailsResponse, error) {
	rsp, err := c.GetUserBillingHistorySnapshotDetails(ctx, snapshotId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistorySnapshotDetailsResponse(rsp)
}

// GetUserBillingSnapshotDetailsGraphWithResponse request returning *GetUserBillingSnapshotDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingSnapshotDetailsGraphWithResponse(ctx context.Context, snapshotId int, params *GetUserBillingSnapshotDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingSnapshotDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingSnapshotDetailsGraph(ctx, snapshotId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingSnapshotDetailsGraphResponse(rsp)
}

// GetUserBillingHistoryVm2WithResponse request returning *GetUserBillingHistoryVm2Response
func (c *ClientWithResponses) GetUserBillingHistoryVm2WithResponse(ctx context.Context, params *GetUserBillingHistoryVm2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVm2Response, error) {
	rsp, err := c.GetUserBillingHistoryVm2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryVm2Response(rsp)
}

// GetUserBillingHistoryVmDetails2WithResponse request returning *GetUserBillingHistoryVmDetails2Response
func (c *ClientWithResponses) GetUserBillingHistoryVmDetails2WithResponse(ctx context.Context, vmId int, params *GetUserBillingHistoryVmDetails2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVmDetails2Response, error) {
	rsp, err := c.GetUserBillingHistoryVmDetails2(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryVmDetails2Response(rsp)
}

// GetUserBillingVmDetailsGraph2WithResponse request returning *GetUserBillingVmDetailsGraph2Response
func (c *ClientWithResponses) GetUserBillingVmDetailsGraph2WithResponse(ctx context.Context, vmId int, params *GetUserBillingVmDetailsGraph2Params, reqEditors ...RequestEditorFn) (*GetUserBillingVmDetailsGraph2Response, error) {
	rsp, err := c.GetUserBillingVmDetailsGraph2(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingVmDetailsGraph2Response(rsp)
}

// GetUserBillingHistoryVolume2WithResponse request returning *GetUserBillingHistoryVolume2Response
func (c *ClientWithResponses) GetUserBillingHistoryVolume2WithResponse(ctx context.Context, params *GetUserBillingHistoryVolume2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVolume2Response, error) {
	rsp, err := c.GetUserBillingHistoryVolume2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryVolume2Response(rsp)
}

// GetUserBillingHistoryVolumeDetails2WithResponse request returning *GetUserBillingHistoryVolumeDetails2Response
func (c *ClientWithResponses) GetUserBillingHistoryVolumeDetails2WithResponse(ctx context.Context, volumeId int, params *GetUserBillingHistoryVolumeDetails2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVolumeDetails2Response, error) {
	rsp, err := c.GetUserBillingHistoryVolumeDetails2(ctx, volumeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryVolumeDetails2Response(rsp)
}

// GetUserBillingVolumeDetailsGraphWithResponse request returning *GetUserBillingVolumeDetailsGraphResponse
func (c *ClientWithResponses) GetUserBillingVolumeDetailsGraphWithResponse(ctx context.Context, volumeId int, params *GetUserBillingVolumeDetailsGraphParams, reqEditors ...RequestEditorFn) (*GetUserBillingVolumeDetailsGraphResponse, error) {
	rsp, err := c.GetUserBillingVolumeDetailsGraph(ctx, volumeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingVolumeDetailsGraphResponse(rsp)
}

// GetLastDayCostWithResponse request returning *GetLastDayCostResponse
func (c *ClientWithResponses) GetLastDayCostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLastDayCostResponse, error) {
	rsp, err := c.GetLastDayCost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLastDayCostResponse(rsp)
}

// GetOrganizationThresholdWithResponse request returning *GetOrganizationThresholdResponse
func (c *ClientWithResponses) GetOrganizationThresholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationThresholdResponse, error) {
	rsp, err := c.GetOrganizationThreshold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationThresholdResponse(rsp)
}

// PutOrganizationThresholdWithBodyWithResponse request with arbitrary body returning *PutOrganizationThresholdResponse
func (c *ClientWithResponses) PutOrganizationThresholdWithBodyWithResponse(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationThresholdResponse, error) {
	rsp, err := c.PutOrganizationThresholdWithBody(ctx, thresholdId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationThresholdResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationThresholdWithResponse(ctx context.Context, thresholdId int, body PutOrganizationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationThresholdResponse, error) {
	rsp, err := c.PutOrganizationThreshold(ctx, thresholdId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationThresholdResponse(rsp)
}

// GetUsage2WithResponse request returning *GetUsage2Response
func (c *ClientWithResponses) GetUsage2WithResponse(ctx context.Context, params *GetUsage2Params, reqEditors ...RequestEditorFn) (*GetUsage2Response, error) {
	rsp, err := c.GetUsage2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsage2Response(rsp)
}

// GetUserVmBillingEventsWithResponse request returning *GetUserVmBillingEventsResponse
func (c *ClientWithResponses) GetUserVmBillingEventsWithResponse(ctx context.Context, vmId int, params *GetUserVmBillingEventsParams, reqEditors ...RequestEditorFn) (*GetUserVmBillingEventsResponse, error) {
	rsp, err := c.GetUserVmBillingEvents(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserVmBillingEventsResponse(rsp)
}

// GetUserBillingHistoryVmTotalCostsWithResponse request returning *GetUserBillingHistoryVmTotalCostsResponse
func (c *ClientWithResponses) GetUserBillingHistoryVmTotalCostsWithResponse(ctx context.Context, vmId int, params *GetUserBillingHistoryVmTotalCostsParams, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVmTotalCostsResponse, error) {
	rsp, err := c.GetUserBillingHistoryVmTotalCosts(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryVmTotalCostsResponse(rsp)
}

// GetUserBillingHistoryVmSubResourceGraph2WithResponse request returning *GetUserBillingHistoryVmSubResourceGraph2Response
func (c *ClientWithResponses) GetUserBillingHistoryVmSubResourceGraph2WithResponse(ctx context.Context, vmId int, params *GetUserBillingHistoryVmSubResourceGraph2Params, reqEditors ...RequestEditorFn) (*GetUserBillingHistoryVmSubResourceGraph2Response, error) {
	rsp, err := c.GetUserBillingHistoryVmSubResourceGraph2(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBillingHistoryVmSubResourceGraph2Response(rsp)
}

// GetUserVolumeBillingEventsWithResponse request returning *GetUserVolumeBillingEventsResponse
func (c *ClientWithResponses) GetUserVolumeBillingEventsWithResponse(ctx context.Context, volumeId int, params *GetUserVolumeBillingEventsParams, reqEditors ...RequestEditorFn) (*GetUserVolumeBillingEventsResponse, error) {
	rsp, err := c.GetUserVolumeBillingEvents(ctx, volumeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserVolumeBillingEventsResponse(rsp)
}

// ParseGetUserBillingHistory2Response parses an HTTP response from a GetUserBillingHistory2WithResponse call
func ParseGetUserBillingHistory2Response(rsp *http.Response) (*GetUserBillingHistory2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistory2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationLevelBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryBucket2Response parses an HTTP response from a GetUserBillingHistoryBucket2WithResponse call
func ParseGetUserBillingHistoryBucket2Response(rsp *http.Response) (*GetUserBillingHistoryBucket2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryBucket2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelBucketBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryBucketDetailsResponse parses an HTTP response from a GetUserBillingHistoryBucketDetailsWithResponse call
func ParseGetUserBillingHistoryBucketDetailsResponse(rsp *http.Response) (*GetUserBillingHistoryBucketDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryBucketDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelBucketBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingBucketDetailsGraphResponse parses an HTTP response from a GetUserBillingBucketDetailsGraphWithResponse call
func ParseGetUserBillingBucketDetailsGraphResponse(rsp *http.Response) (*GetUserBillingBucketDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingBucketDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelGraphBillingDetailsBucket
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryClusterResponse parses an HTTP response from a GetUserBillingHistoryClusterWithResponse call
func ParseGetUserBillingHistoryClusterResponse(rsp *http.Response) (*GetUserBillingHistoryClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelClusterBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryClusterDetailsResponse parses an HTTP response from a GetUserBillingHistoryClusterDetailsWithResponse call
func ParseGetUserBillingHistoryClusterDetailsResponse(rsp *http.Response) (*GetUserBillingHistoryClusterDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryClusterDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelClusterBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingClusterDetailsGraphResponse parses an HTTP response from a GetUserBillingClusterDetailsGraphWithResponse call
func ParseGetUserBillingClusterDetailsGraphResponse(rsp *http.Response) (*GetUserBillingClusterDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingClusterDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelClusterGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryContractResponse parses an HTTP response from a GetUserBillingHistoryContractWithResponse call
func ParseGetUserBillingHistoryContractResponse(rsp *http.Response) (*GetUserBillingHistoryContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryDataSynthesisResponse parses an HTTP response from a GetUserBillingHistoryDataSynthesisWithResponse call
func ParseGetUserBillingHistoryDataSynthesisResponse(rsp *http.Response) (*GetUserBillingHistoryDataSynthesisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryDataSynthesisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenBasedBillingHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryDataSynthesisDetailsResponse parses an HTTP response from a GetUserBillingHistoryDataSynthesisDetailsWithResponse call
func ParseGetUserBillingHistoryDataSynthesisDetailsResponse(rsp *http.Response) (*GetUserBillingHistoryDataSynthesisDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryDataSynthesisDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataSynthesisBillingHistoryDetailsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingDataSynthesisDetailsGraphResponse parses an HTTP response from a GetUserBillingDataSynthesisDetailsGraphWithResponse call
func ParseGetUserBillingDataSynthesisDetailsGraphResponse(rsp *http.Response) (*GetUserBillingDataSynthesisDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingDataSynthesisDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DataSynthesisBillingHistoryDetailsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryFineTuningResponse parses an HTTP response from a GetUserBillingHistoryFineTuningWithResponse call
func ParseGetUserBillingHistoryFineTuningResponse(rsp *http.Response) (*GetUserBillingHistoryFineTuningResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryFineTuningResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadBillingHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryFineTuningDetailsResponse parses an HTTP response from a GetUserBillingHistoryFineTuningDetailsWithResponse call
func ParseGetUserBillingHistoryFineTuningDetailsResponse(rsp *http.Response) (*GetUserBillingHistoryFineTuningDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryFineTuningDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingFineTuningDetailsGraphResponse parses an HTTP response from a GetUserBillingFineTuningDetailsGraphWithResponse call
func ParseGetUserBillingFineTuningDetailsGraphResponse(rsp *http.Response) (*GetUserBillingFineTuningDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingFineTuningDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryModelEvaluationResponse parses an HTTP response from a GetUserBillingHistoryModelEvaluationWithResponse call
func ParseGetUserBillingHistoryModelEvaluationResponse(rsp *http.Response) (*GetUserBillingHistoryModelEvaluationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryModelEvaluationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenBasedBillingHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryModelEvaluationDetailsResponse parses an HTTP response from a GetUserBillingHistoryModelEvaluationDetailsWithResponse call
func ParseGetUserBillingHistoryModelEvaluationDetailsResponse(rsp *http.Response) (*GetUserBillingHistoryModelEvaluationDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryModelEvaluationDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelEvaluationBillingHistoryDetailsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingModelEvaluationDetailsGraphResponse parses an HTTP response from a GetUserBillingModelEvaluationDetailsGraphWithResponse call
func ParseGetUserBillingModelEvaluationDetailsGraphResponse(rsp *http.Response) (*GetUserBillingModelEvaluationDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingModelEvaluationDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModelEvaluationBillingHistoryDetailsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryServerlessInferenceResponse parses an HTTP response from a GetUserBillingHistoryServerlessInferenceWithResponse call
func ParseGetUserBillingHistoryServerlessInferenceResponse(rsp *http.Response) (*GetUserBillingHistoryServerlessInferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryServerlessInferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenBasedBillingHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryServerlessInferenceDetailsResponse parses an HTTP response from a GetUserBillingHistoryServerlessInferenceDetailsWithResponse call
func ParseGetUserBillingHistoryServerlessInferenceDetailsResponse(rsp *http.Response) (*GetUserBillingHistoryServerlessInferenceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryServerlessInferenceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerlessInferencedBillingHistoryDetailsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingServerlessInferenceDetailsGraphResponse parses an HTTP response from a GetUserBillingServerlessInferenceDetailsGraphWithResponse call
func ParseGetUserBillingServerlessInferenceDetailsGraphResponse(rsp *http.Response) (*GetUserBillingServerlessInferenceDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingServerlessInferenceDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServerlessInferencedBillingHistoryDetailsResponseSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistorySnapshotResponse parses an HTTP response from a GetUserBillingHistorySnapshotWithResponse call
func ParseGetUserBillingHistorySnapshotResponse(rsp *http.Response) (*GetUserBillingHistorySnapshotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistorySnapshotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistorySnapshotDetailsResponse parses an HTTP response from a GetUserBillingHistorySnapshotDetailsWithResponse call
func ParseGetUserBillingHistorySnapshotDetailsResponse(rsp *http.Response) (*GetUserBillingHistorySnapshotDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistorySnapshotDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingSnapshotDetailsGraphResponse parses an HTTP response from a GetUserBillingSnapshotDetailsGraphWithResponse call
func ParseGetUserBillingSnapshotDetailsGraphResponse(rsp *http.Response) (*GetUserBillingSnapshotDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingSnapshotDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryVm2Response parses an HTTP response from a GetUserBillingHistoryVm2WithResponse call
func ParseGetUserBillingHistoryVm2Response(rsp *http.Response) (*GetUserBillingHistoryVm2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryVm2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVmBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryVmDetails2Response parses an HTTP response from a GetUserBillingHistoryVmDetails2WithResponse call
func ParseGetUserBillingHistoryVmDetails2Response(rsp *http.Response) (*GetUserBillingHistoryVmDetails2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryVmDetails2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVMBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingVmDetailsGraph2Response parses an HTTP response from a GetUserBillingVmDetailsGraph2WithResponse call
func ParseGetUserBillingVmDetailsGraph2Response(rsp *http.Response) (*GetUserBillingVmDetailsGraph2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingVmDetailsGraph2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVmGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryVolume2Response parses an HTTP response from a GetUserBillingHistoryVolume2WithResponse call
func ParseGetUserBillingHistoryVolume2Response(rsp *http.Response) (*GetUserBillingHistoryVolume2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryVolume2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryVolumeDetails2Response parses an HTTP response from a GetUserBillingHistoryVolumeDetails2WithResponse call
func ParseGetUserBillingHistoryVolumeDetails2Response(rsp *http.Response) (*GetUserBillingHistoryVolumeDetails2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryVolumeDetails2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingVolumeDetailsGraphResponse parses an HTTP response from a GetUserBillingVolumeDetailsGraphWithResponse call
func ParseGetUserBillingVolumeDetailsGraphResponse(rsp *http.Response) (*GetUserBillingVolumeDetailsGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingVolumeDetailsGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLastDayCostResponse parses an HTTP response from a GetLastDayCostWithResponse call
func ParseGetLastDayCostResponse(rsp *http.Response) (*GetLastDayCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLastDayCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LastDayCostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrganizationThresholdResponse parses an HTTP response from a GetOrganizationThresholdWithResponse call
func ParseGetOrganizationThresholdResponse(rsp *http.Response) (*GetOrganizationThresholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationThresholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationThresholdsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutOrganizationThresholdResponse parses an HTTP response from a PutOrganizationThresholdWithResponse call
func ParsePutOrganizationThresholdResponse(rsp *http.Response) (*PutOrganizationThresholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationThresholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationThresholdUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsage2Response parses an HTTP response from a GetUsage2WithResponse call
func ParseGetUsage2Response(rsp *http.Response) (*GetUsage2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsage2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingMetricesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserVmBillingEventsResponse parses an HTTP response from a GetUserVmBillingEventsWithResponse call
func ParseGetUserVmBillingEventsResponse(rsp *http.Response) (*GetUserVmBillingEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserVmBillingEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceBillingEventsHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryVmTotalCostsResponse parses an HTTP response from a GetUserBillingHistoryVmTotalCostsWithResponse call
func ParseGetUserBillingHistoryVmTotalCostsResponse(rsp *http.Response) (*GetUserBillingHistoryVmTotalCostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryVmTotalCostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubResourcesCostsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserBillingHistoryVmSubResourceGraph2Response parses an HTTP response from a GetUserBillingHistoryVmSubResourceGraph2WithResponse call
func ParseGetUserBillingHistoryVmSubResourceGraph2Response(rsp *http.Response) (*GetUserBillingHistoryVmSubResourceGraph2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBillingHistoryVmSubResourceGraph2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubResourcesGraphResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserVolumeBillingEventsResponse parses an HTTP response from a GetUserVolumeBillingEventsWithResponse call
func ParseGetUserVolumeBillingEventsResponse(rsp *http.Response) (*GetUserVolumeBillingEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserVolumeBillingEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceBillingEventsHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
