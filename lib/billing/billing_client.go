// Package billing provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package billing

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// Billingmetricesfields defines model for Billingmetricesfields.
type Billingmetricesfields struct {
	Active         *bool      `json:"active,omitempty"`
	BillPerMinute  *float32   `json:"bill_per_minute,omitempty"`
	CreateTime     *time.CustomTime `json:"create_time,omitempty"`
	ExcludeBilling *bool      `json:"exclude_billing,omitempty"`
	Name           *string    `json:"name,omitempty"`
	OrganizationId *int       `json:"organization_id,omitempty"`
	ResourceId     *int       `json:"resource_id,omitempty"`
	ResourceType   *string    `json:"resource_type,omitempty"`
	TerminateTime  *time.CustomTime `json:"terminate_time,omitempty"`
	TotalBill      *float32   `json:"total_bill,omitempty"`
	TotalUpTime    *float32   `json:"total_up_time,omitempty"`
}

// Billingmetricesresponse defines model for Billingmetricesresponse.
type Billingmetricesresponse struct {
	Data    *[]Billingmetricesfields `json:"data,omitempty"`
	Message *string                  `json:"message,omitempty"`
	Status  *bool                    `json:"status,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// GraphDatetimeValueModel defines model for GraphDatetimeValueModel.
type GraphDatetimeValueModel struct {
	Datetime *string  `json:"datetime,omitempty"`
	Value    *float32 `json:"value,omitempty"`
}

// Lastdaycostfields defines model for Lastdaycostfields.
type Lastdaycostfields struct {
	ClustersCost  *float32 `json:"clusters_cost,omitempty"`
	InstancesCost *float32 `json:"instances_cost,omitempty"`
	TotalCost     *float32 `json:"total_cost,omitempty"`
	VolumesCost   *float32 `json:"volumes_cost,omitempty"`
}

// Lastdaycostresponse defines model for Lastdaycostresponse.
type Lastdaycostresponse struct {
	Data    *Lastdaycostfields `json:"data,omitempty"`
	Message *string            `json:"message,omitempty"`
	Status  *bool              `json:"status,omitempty"`
}

// OrganizationLevelBillingHistory defines model for OrganizationLevelBillingHistory.
type OrganizationLevelBillingHistory struct {
	BillingHistory *[]OrganizationLevelBillingHistoryResources `json:"billing_history,omitempty"`
	OrgId          *int                                        `json:"org_id,omitempty"`
	TotalCount     *int                                        `json:"total_count,omitempty"`
}

// OrganizationLevelBillingHistoryResources defines model for OrganizationLevelBillingHistoryResources.
type OrganizationLevelBillingHistoryResources struct {
	Attributes *OrganizationLevelBillingHistoryResponseAttributes `json:"attributes,omitempty"`
	Metrics    *OrganizationLevelBillingHistoryResponseMetrics    `json:"metrics,omitempty"`
}

// OrganizationLevelBillingHistoryResponseAttributes defines model for OrganizationLevelBillingHistoryResponseAttributes.
type OrganizationLevelBillingHistoryResponseAttributes struct {
	Id *string `json:"id,omitempty"`
}

// OrganizationLevelBillingHistoryResponseMetrics defines model for OrganizationLevelBillingHistoryResponseMetrics.
type OrganizationLevelBillingHistoryResponseMetrics struct {
	ContractCost      *float32 `json:"contract_cost,omitempty"`
	IncurredBill      *float32 `json:"incurred_bill,omitempty"`
	NonDiscountedBill *float32 `json:"non_discounted_bill,omitempty"`
	SnapshotCost      *float32 `json:"snapshot_cost,omitempty"`
	VmCost            *float32 `json:"vm_cost,omitempty"`
	VolumeCost        *float32 `json:"volume_cost,omitempty"`
}

// OrganizationLevelBillingHistoryResponseModel defines model for OrganizationLevelBillingHistoryResponseModel.
type OrganizationLevelBillingHistoryResponseModel struct {
	BillingHistory *OrganizationLevelBillingHistory `json:"billing_history,omitempty"`
	Message        *string                          `json:"message,omitempty"`
	Status         *bool                            `json:"status,omitempty"`
}

// OrganizationThresholdfields defines model for OrganizationThresholdfields.
type OrganizationThresholdfields struct {
	Id               *int    `json:"id,omitempty"`
	InterfaceTitle   *string `json:"interface_title,omitempty"`
	InterfaceTooltip *string `json:"interface_tooltip,omitempty"`
	Subscribed       *bool   `json:"subscribed,omitempty"`
	Threshold        *int    `json:"threshold,omitempty"`
}

// Organizationthresholdsresponse defines model for Organizationthresholdsresponse.
type Organizationthresholdsresponse struct {
	Message    *string                        `json:"message,omitempty"`
	Status     *bool                          `json:"status,omitempty"`
	Thresholds *[]OrganizationThresholdfields `json:"thresholds,omitempty"`
}

// Organizationthresholdupdateresponse defines model for Organizationthresholdupdateresponse.
type Organizationthresholdupdateresponse struct {
	Message   *string                      `json:"message,omitempty"`
	Status    *bool                        `json:"status,omitempty"`
	Threshold *OrganizationThresholdfields `json:"threshold,omitempty"`
}

// PaginationData defines model for PaginationData.
type PaginationData struct {
	Page    *int `json:"page,omitempty"`
	Pages   *int `json:"pages,omitempty"`
	PerPage *int `json:"per_page,omitempty"`
}

// ResourceBillingEventsHistoryMetrics defines model for ResourceBillingEventsHistoryMetrics.
type ResourceBillingEventsHistoryMetrics struct {
	Event         *string  `json:"event,omitempty"`
	EventDuration *float32 `json:"event_duration,omitempty"`
	PricePerHour  *float32 `json:"price_per_hour,omitempty"`
	Start         *string  `json:"start,omitempty"`
	TotalCost     *float32 `json:"total_cost,omitempty"`
}

// ResourceBillingEventsHistoryResponse defines model for ResourceBillingEventsHistoryResponse.
type ResourceBillingEventsHistoryResponse struct {
	BillingEventsHistory *[]ResourceBillingEventsHistoryMetrics `json:"billing_events_history,omitempty"`
	Message              *string                                `json:"message,omitempty"`
	Status               *bool                                  `json:"status,omitempty"`
}

// ResourceLevelBillingDetailsAttributes defines model for ResourceLevelBillingDetailsAttributes.
type ResourceLevelBillingDetailsAttributes struct {
	Id           *string `json:"id,omitempty"`
	InfrahubId   *int    `json:"infrahub_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
}

// ResourceLevelBillingDetailsMetrics defines model for ResourceLevelBillingDetailsMetrics.
type ResourceLevelBillingDetailsMetrics struct {
	IncurredBill              *float32 `json:"incurred_bill,omitempty"`
	NonDiscountedBill         *float32 `json:"non_discounted_bill,omitempty"`
	NonDiscountedPricePerHour *float32 `json:"non_discounted_price_per_hour,omitempty"`
	PricePerHour              *float32 `json:"price_per_hour,omitempty"`
	UsageTime                 *float32 `json:"usage_time,omitempty"`
	UsageTimeACTIVE           *float32 `json:"usage_time_ACTIVE,omitempty"`
	UsageTimeHIBERNATED       *float32 `json:"usage_time_HIBERNATED,omitempty"`
	UsageTimeSHUTOFF          *float32 `json:"usage_time_SHUTOFF,omitempty"`
}

// ResourceLevelBillingDetailsVM defines model for ResourceLevelBillingDetailsVM.
type ResourceLevelBillingDetailsVM struct {
	BillingHistory *[]ResourceLevelBillingVMDetailsResources `json:"billing_history,omitempty"`
	OrgId          *int                                      `json:"org_id,omitempty"`
	TotalCount     *int                                      `json:"total_count,omitempty"`
}

// ResourceLevelBillingDetailsVolume defines model for ResourceLevelBillingDetailsVolume.
type ResourceLevelBillingDetailsVolume struct {
	BillingHistory *[]ResourceLevelBillingVolumeDetailsResources `json:"billing_history,omitempty"`
	OrgId          *int                                          `json:"org_id,omitempty"`
	TotalCount     *int                                          `json:"total_count,omitempty"`
}

// ResourceLevelBillingDetailsVolumeAttributes defines model for ResourceLevelBillingDetailsVolumeAttributes.
type ResourceLevelBillingDetailsVolumeAttributes struct {
	Id                *string `json:"id,omitempty"`
	InfrahubId        *int    `json:"infrahub_id,omitempty"`
	ResourceName      *string `json:"resource_name,omitempty"`
	SubresourceAmount *int    `json:"subresource_amount,omitempty"`
	SubresourceType   *string `json:"subresource_type,omitempty"`
}

// ResourceLevelBillingDetailsVolumeMetrics defines model for ResourceLevelBillingDetailsVolumeMetrics.
type ResourceLevelBillingDetailsVolumeMetrics struct {
	IncurredBill              *float32 `json:"incurred_bill,omitempty"`
	NonDiscountedBill         *float32 `json:"non_discounted_bill,omitempty"`
	NonDiscountedPricePerHour *float32 `json:"non_discounted_price_per_hour,omitempty"`
	PricePerHour              *float32 `json:"price_per_hour,omitempty"`
	UsageTime                 *float32 `json:"usage_time,omitempty"`
}

// ResourceLevelBillingHistory defines model for ResourceLevelBillingHistory.
type ResourceLevelBillingHistory struct {
	BillingHistory *[]ResourceLevelBillingHistoryResources `json:"billing_history,omitempty"`
	OrgId          *int                                    `json:"org_id,omitempty"`
	Pagination     *PaginationData                         `json:"pagination,omitempty"`
	TotalCount     *int                                    `json:"total_count,omitempty"`
}

// ResourceLevelBillingHistoryResources defines model for ResourceLevelBillingHistoryResources.
type ResourceLevelBillingHistoryResources struct {
	Attributes *ResourceLevelBillingHistoryResponseAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingHistoryResponseMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelBillingHistoryResponseAttributes defines model for ResourceLevelBillingHistoryResponseAttributes.
type ResourceLevelBillingHistoryResponseAttributes struct {
	Id           *string `json:"id,omitempty"`
	InfrahubId   *int    `json:"infrahub_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
	Status       *string `json:"status,omitempty"`
}

// ResourceLevelBillingHistoryResponseMetrics defines model for ResourceLevelBillingHistoryResponseMetrics.
type ResourceLevelBillingHistoryResponseMetrics struct {
	IncurredBill *float32 `json:"incurred_bill,omitempty"`
	PricePerHour *float32 `json:"price_per_hour,omitempty"`
	UsageTime    *float32 `json:"usage_time,omitempty"`
}

// ResourceLevelBillingVMDetailsResources defines model for ResourceLevelBillingVMDetailsResources.
type ResourceLevelBillingVMDetailsResources struct {
	Attributes *ResourceLevelBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelBillingVolumeDetailsResources defines model for ResourceLevelBillingVolumeDetailsResources.
type ResourceLevelBillingVolumeDetailsResources struct {
	Attributes *ResourceLevelBillingDetailsVolumeAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelBillingDetailsVolumeMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelGraphBillingDetailVolume defines model for ResourceLevelGraphBillingDetailVolume.
type ResourceLevelGraphBillingDetailVolume struct {
	BillingHistory *[]ResourceLevelGraphBillingVolumeDetailsResources `json:"billing_history,omitempty"`
	Granularity    *int                                               `json:"granularity,omitempty"`
	OrgId          *int                                               `json:"org_id,omitempty"`
	TotalCount     *int                                               `json:"total_count,omitempty"`
}

// ResourceLevelGraphBillingDetailsAttributes defines model for ResourceLevelGraphBillingDetailsAttributes.
type ResourceLevelGraphBillingDetailsAttributes struct {
	Id           *string `json:"id,omitempty"`
	InfrahubId   *int    `json:"infrahub_id,omitempty"`
	ResourceName *string `json:"resource_name,omitempty"`
}

// ResourceLevelGraphBillingDetailsMetrics defines model for ResourceLevelGraphBillingDetailsMetrics.
type ResourceLevelGraphBillingDetailsMetrics struct {
	IncurredBill      *float32                   `json:"incurred_bill,omitempty"`
	IncurredBillGraph *[]GraphDatetimeValueModel `json:"incurred_bill_graph,omitempty"`
}

// ResourceLevelGraphBillingDetailsVM defines model for ResourceLevelGraphBillingDetailsVM.
type ResourceLevelGraphBillingDetailsVM struct {
	BillingHistory *[]ResourceLevelGraphBillingVMDetailsResources `json:"billing_history,omitempty"`
	Granularity    *int                                           `json:"granularity,omitempty"`
	OrgId          *int                                           `json:"org_id,omitempty"`
	TotalCount     *int                                           `json:"total_count,omitempty"`
}

// ResourceLevelGraphBillingVMDetailsResources defines model for ResourceLevelGraphBillingVMDetailsResources.
type ResourceLevelGraphBillingVMDetailsResources struct {
	Attributes *ResourceLevelGraphBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelGraphBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelGraphBillingVolumeDetailsResources defines model for ResourceLevelGraphBillingVolumeDetailsResources.
type ResourceLevelGraphBillingVolumeDetailsResources struct {
	Attributes *ResourceLevelGraphBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *ResourceLevelGraphBillingDetailsMetrics    `json:"metrics,omitempty"`
}

// ResourceLevelVMBillingDetailsResponseModel defines model for ResourceLevelVMBillingDetailsResponseModel.
type ResourceLevelVMBillingDetailsResponseModel struct {
	BillingHistoryVmDetails *ResourceLevelBillingDetailsVM `json:"billing_history_vm_details,omitempty"`
	Message                 *string                        `json:"message,omitempty"`
	Status                  *bool                          `json:"status,omitempty"`
}

// ResourceLevelVmBillingHistoryResponseModel defines model for ResourceLevelVmBillingHistoryResponseModel.
type ResourceLevelVmBillingHistoryResponseModel struct {
	BillingHistoryVm *ResourceLevelBillingHistory `json:"billing_history_vm,omitempty"`
	Message          *string                      `json:"message,omitempty"`
	Status           *bool                        `json:"status,omitempty"`
}

// ResourceLevelVmGraphBillingDetailsResponseModel defines model for ResourceLevelVmGraphBillingDetailsResponseModel.
type ResourceLevelVmGraphBillingDetailsResponseModel struct {
	BillingHistoryVmDetails *ResourceLevelGraphBillingDetailsVM `json:"billing_history_vm_details,omitempty"`
	Message                 *string                             `json:"message,omitempty"`
	Status                  *bool                               `json:"status,omitempty"`
}

// ResourceLevelVolumeBillingDetailsResponseModel defines model for ResourceLevelVolumeBillingDetailsResponseModel.
type ResourceLevelVolumeBillingDetailsResponseModel struct {
	BillingHistoryVolumeDetails *ResourceLevelBillingDetailsVolume `json:"billing_history_volume_details,omitempty"`
	Message                     *string                            `json:"message,omitempty"`
	Status                      *bool                              `json:"status,omitempty"`
}

// ResourceLevelVolumeBillingHistoryResponseModel defines model for ResourceLevelVolumeBillingHistoryResponseModel.
type ResourceLevelVolumeBillingHistoryResponseModel struct {
	BillingHistoryVolume *ResourceLevelBillingHistory `json:"billing_history_volume,omitempty"`
	Message              *string                      `json:"message,omitempty"`
	Status               *bool                        `json:"status,omitempty"`
}

// ResourceLevelVolumeGraphBillingDetailsResponseModel defines model for ResourceLevelVolumeGraphBillingDetailsResponseModel.
type ResourceLevelVolumeGraphBillingDetailsResponseModel struct {
	BillingHistorySnapshotDetails *ResourceLevelGraphBillingDetailVolume `json:"billing_history_snapshot_details,omitempty"`
	Message                       *string                                `json:"message,omitempty"`
	Status                        *bool                                  `json:"status,omitempty"`
}

// SubResourceGraphBillingDetailsMetrics defines model for SubResourceGraphBillingDetailsMetrics.
type SubResourceGraphBillingDetailsMetrics struct {
	CpuIncurredBill            *float32                   `json:"cpu_incurred_bill,omitempty"`
	CpuIncurredBillGraph       *[]GraphDatetimeValueModel `json:"cpu_incurred_bill_graph,omitempty"`
	DiskIncurredBill           *float32                   `json:"disk_incurred_bill,omitempty"`
	DiskIncurredBillGraph      *[]GraphDatetimeValueModel `json:"disk_incurred_bill_graph,omitempty"`
	EphemeralIncurredBill      *float32                   `json:"ephemeral_incurred_bill,omitempty"`
	EphemeralIncurredBillGraph *[]GraphDatetimeValueModel `json:"ephemeral_incurred_bill_graph,omitempty"`
	GpuIncurredBill            *float32                   `json:"gpu_incurred_bill,omitempty"`
	GpuIncurredBillGraph       *[]GraphDatetimeValueModel `json:"gpu_incurred_bill_graph,omitempty"`
	PublicipIncurredBill       *float32                   `json:"publicip_incurred_bill,omitempty"`
	PublicipIncurredBillGraph  *[]GraphDatetimeValueModel `json:"publicip_incurred_bill_graph,omitempty"`
	RamIncurredBill            *float32                   `json:"ram_incurred_bill,omitempty"`
	RamIncurredBillGraph       *[]GraphDatetimeValueModel `json:"ram_incurred_bill_graph,omitempty"`
}

// SubResourcesCostsResponseModel defines model for SubResourcesCostsResponseModel.
type SubResourcesCostsResponseModel struct {
	BillingHistory *[]SubResourcesGraphBillingHistoryFields `json:"billing_history,omitempty"`
	Granularity    *int                                     `json:"granularity,omitempty"`
	OrgId          *int                                     `json:"org_id,omitempty"`
	TotalCount     *int                                     `json:"total_count,omitempty"`
}

// SubResourcesGraphBillingHistoryFields defines model for SubResourcesGraphBillingHistoryFields.
type SubResourcesGraphBillingHistoryFields struct {
	Attributes *ResourceLevelBillingDetailsAttributes `json:"attributes,omitempty"`
	Metrics    *SubResourceGraphBillingDetailsMetrics `json:"metrics,omitempty"`
}

// SubResourcesGraphResponseModel defines model for SubResourcesGraphResponseModel.
type SubResourcesGraphResponseModel struct {
	Message           *string                         `json:"message,omitempty"`
	Status            *bool                           `json:"status,omitempty"`
	SubResourcesCosts *SubResourcesCostsResponseModel `json:"sub_resources_costs,omitempty"`
}

// Subscribeorunsubscribeupdatepayload defines model for Subscribeorunsubscribeupdatepayload.
type Subscribeorunsubscribeupdatepayload struct {
	// Subscribe `false` indicates that the user will no longer receive notifications for this specific threshold, whereas `true` signifies that the user will receive notification emails.
	Subscribe bool `json:"subscribe"`
}

// RetrieveBillingHistoryForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryForASpecificBillingCycle.
type RetrieveBillingHistoryForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Graph     *string `form:"graph,omitempty" json:"graph,omitempty"`
}

// RetrieveBillingHistoryOfContractForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfContractForASpecificBillingCycle.
type RetrieveBillingHistoryOfContractForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
}

// RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfSnapshotForASpecificBillingCycle.
type RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	Page      *string `form:"page,omitempty" json:"page,omitempty"`
	PerPage   *string `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle.
type RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams defines parameters for RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle.
type RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle.
type RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *string `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *string `form:"page,omitempty" json:"page,omitempty"`
}

// RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle.
type RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams defines parameters for RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle.
type RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfVolumeForASpecificBillingCycle.
type RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
	Search    *string `form:"search,omitempty" json:"search,omitempty"`
	PerPage   *string `form:"per_page,omitempty" json:"per_page,omitempty"`
	Page      *string `form:"page,omitempty" json:"page,omitempty"`
}

// RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams defines parameters for RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle.
type RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams defines parameters for RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle.
type RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetBillingUsageParams defines parameters for GetBillingUsage.
type GetBillingUsageParams struct {
	Deleted     *string `form:"deleted,omitempty" json:"deleted,omitempty"`
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// RetrieveVmBillingEventsHistoryParams defines parameters for RetrieveVmBillingEventsHistory.
type RetrieveVmBillingEventsHistoryParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams defines parameters for RetrieveTotalCostsAndNonDiscountCostsForSubResources.
type RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams defines parameters for RetrieveSubResourcesHistoricalCostDatapointsOfAVirtual.
type RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// RetrieveVolumeBillingEventsHistoryParams defines parameters for RetrieveVolumeBillingEventsHistory.
type RetrieveVolumeBillingEventsHistoryParams struct {
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`
	EndDate   *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody defines body for UpdateSubscribeOrUnsubscribeNotificationThreshold for application/json ContentType.
type UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody = Subscribeorunsubscribeupdatepayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RetrieveBillingHistoryForASpecificBillingCycle request
	RetrieveBillingHistoryForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfContractForASpecificBillingCycle request
	RetrieveBillingHistoryOfContractForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfContractForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfSnapshotForASpecificBillingCycle request
	RetrieveBillingHistoryOfSnapshotForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle request
	RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(ctx context.Context, snapshotId int, params *RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle request
	RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(ctx context.Context, snapshotId int, params *RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle request
	RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle request
	RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(ctx context.Context, vmId int, params *RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle request
	RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(ctx context.Context, vmId int, params *RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfVolumeForASpecificBillingCycle request
	RetrieveBillingHistoryOfVolumeForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle request
	RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(ctx context.Context, volumeId int, params *RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle request
	RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(ctx context.Context, volumeId int, params *RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLastDayCost request
	GetLastDayCost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllThresholdsForOrganization request
	GetAllThresholdsForOrganization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSubscribeOrUnsubscribeNotificationThresholdWithBody request with any body
	UpdateSubscribeOrUnsubscribeNotificationThresholdWithBody(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSubscribeOrUnsubscribeNotificationThreshold(ctx context.Context, thresholdId int, body UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingUsage request
	GetBillingUsage(ctx context.Context, params *GetBillingUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveVmBillingEventsHistory request
	RetrieveVmBillingEventsHistory(ctx context.Context, vmId int, params *RetrieveVmBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveTotalCostsAndNonDiscountCostsForSubResources request
	RetrieveTotalCostsAndNonDiscountCostsForSubResources(ctx context.Context, vmId int, params *RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveSubResourcesHistoricalCostDatapointsOfAVirtual request
	RetrieveSubResourcesHistoricalCostDatapointsOfAVirtual(ctx context.Context, vmId int, params *RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveVolumeBillingEventsHistory request
	RetrieveVolumeBillingEventsHistory(ctx context.Context, volumeId int, params *RetrieveVolumeBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RetrieveBillingHistoryForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryForASpecificBillingCycleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfContractForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfContractForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfContractForASpecificBillingCycleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfSnapshotForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfSnapshotForASpecificBillingCycleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(ctx context.Context, snapshotId int, params *RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(ctx context.Context, snapshotId int, params *RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleRequest(c.Server, snapshotId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(ctx context.Context, vmId int, params *RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(ctx context.Context, vmId int, params *RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfVolumeForASpecificBillingCycle(ctx context.Context, params *RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfVolumeForASpecificBillingCycleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(ctx context.Context, volumeId int, params *RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleRequest(c.Server, volumeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(ctx context.Context, volumeId int, params *RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleRequest(c.Server, volumeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLastDayCost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLastDayCostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllThresholdsForOrganization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllThresholdsForOrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSubscribeOrUnsubscribeNotificationThresholdWithBody(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequestWithBody(c.Server, thresholdId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSubscribeOrUnsubscribeNotificationThreshold(ctx context.Context, thresholdId int, body UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequest(c.Server, thresholdId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingUsage(ctx context.Context, params *GetBillingUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingUsageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveVmBillingEventsHistory(ctx context.Context, vmId int, params *RetrieveVmBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveVmBillingEventsHistoryRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveTotalCostsAndNonDiscountCostsForSubResources(ctx context.Context, vmId int, params *RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveTotalCostsAndNonDiscountCostsForSubResourcesRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveSubResourcesHistoricalCostDatapointsOfAVirtual(ctx context.Context, vmId int, params *RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveSubResourcesHistoricalCostDatapointsOfAVirtualRequest(c.Server, vmId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveVolumeBillingEventsHistory(ctx context.Context, volumeId int, params *RetrieveVolumeBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveVolumeBillingEventsHistoryRequest(c.Server, volumeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRetrieveBillingHistoryForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryForASpecificBillingCycle
func NewRetrieveBillingHistoryForASpecificBillingCycleRequest(server string, params *RetrieveBillingHistoryForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Graph != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "graph", runtime.ParamLocationQuery, *params.Graph); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfContractForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfContractForASpecificBillingCycle
func NewRetrieveBillingHistoryOfContractForASpecificBillingCycleRequest(server string, params *RetrieveBillingHistoryOfContractForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/contract")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfSnapshotForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfSnapshotForASpecificBillingCycle
func NewRetrieveBillingHistoryOfSnapshotForASpecificBillingCycleRequest(server string, params *RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/snapshot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle
func NewRetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleRequest(server string, snapshotId int, params *RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/snapshot/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleRequest generates requests for RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle
func NewRetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleRequest(server string, snapshotId int, params *RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snapshot_id", runtime.ParamLocationPath, snapshotId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/snapshot/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle
func NewRetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleRequest(server string, params *RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/virtual-machine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle
func NewRetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleRequest(server string, vmId int, params *RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/virtual-machine/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleRequest generates requests for RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle
func NewRetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleRequest(server string, vmId int, params *RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/virtual-machine/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfVolumeForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfVolumeForASpecificBillingCycle
func NewRetrieveBillingHistoryOfVolumeForASpecificBillingCycleRequest(server string, params *RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleRequest generates requests for RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle
func NewRetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleRequest(server string, volumeId int, params *RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_id", runtime.ParamLocationPath, volumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/volume/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleRequest generates requests for RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle
func NewRetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleRequest(server string, volumeId int, params *RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_id", runtime.ParamLocationPath, volumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/history/volume/%s/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLastDayCostRequest generates requests for GetLastDayCost
func NewGetLastDayCostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/last-day-cost")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllThresholdsForOrganizationRequest generates requests for GetAllThresholdsForOrganization
func NewGetAllThresholdsForOrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/threshold")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequest calls the generic UpdateSubscribeOrUnsubscribeNotificationThreshold builder with application/json body
func NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequest(server string, thresholdId int, body UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequestWithBody(server, thresholdId, "application/json", bodyReader)
}

// NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequestWithBody generates requests for UpdateSubscribeOrUnsubscribeNotificationThreshold with any type of body
func NewUpdateSubscribeOrUnsubscribeNotificationThresholdRequestWithBody(server string, thresholdId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "threshold_id", runtime.ParamLocationPath, thresholdId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/threshold/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBillingUsageRequest generates requests for GetBillingUsage
func NewGetBillingUsageRequest(server string, params *GetBillingUsageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Deleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted", runtime.ParamLocationQuery, *params.Deleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveVmBillingEventsHistoryRequest generates requests for RetrieveVmBillingEventsHistory
func NewRetrieveVmBillingEventsHistoryRequest(server string, vmId int, params *RetrieveVmBillingEventsHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/virtual-machine/%s/billing-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveTotalCostsAndNonDiscountCostsForSubResourcesRequest generates requests for RetrieveTotalCostsAndNonDiscountCostsForSubResources
func NewRetrieveTotalCostsAndNonDiscountCostsForSubResourcesRequest(server string, vmId int, params *RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/virtual-machine/%s/sub-resource", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveSubResourcesHistoricalCostDatapointsOfAVirtualRequest generates requests for RetrieveSubResourcesHistoricalCostDatapointsOfAVirtual
func NewRetrieveSubResourcesHistoricalCostDatapointsOfAVirtualRequest(server string, vmId int, params *RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vm_id", runtime.ParamLocationPath, vmId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/virtual-machine/%s/sub-resource/graph", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveVolumeBillingEventsHistoryRequest generates requests for RetrieveVolumeBillingEventsHistory
func NewRetrieveVolumeBillingEventsHistoryRequest(server string, volumeId int, params *RetrieveVolumeBillingEventsHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "volume_id", runtime.ParamLocationPath, volumeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/billing/volume/%s/billing-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RetrieveBillingHistoryForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfContractForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfContractForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfContractForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithResponse(ctx context.Context, snapshotId int, params *RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse, error)

	// RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithResponse request
	RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithResponse(ctx context.Context, snapshotId int, params *RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithResponse(ctx context.Context, vmId int, params *RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse, error)

	// RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithResponse request
	RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithResponse(ctx context.Context, vmId int, params *RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfVolumeForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfVolumeForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse, error)

	// RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithResponse request
	RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithResponse(ctx context.Context, volumeId int, params *RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse, error)

	// RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithResponse request
	RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithResponse(ctx context.Context, volumeId int, params *RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse, error)

	// GetLastDayCostWithResponse request
	GetLastDayCostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLastDayCostResponse, error)

	// GetAllThresholdsForOrganizationWithResponse request
	GetAllThresholdsForOrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllThresholdsForOrganizationResponse, error)

	// UpdateSubscribeOrUnsubscribeNotificationThresholdWithBodyWithResponse request with any body
	UpdateSubscribeOrUnsubscribeNotificationThresholdWithBodyWithResponse(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSubscribeOrUnsubscribeNotificationThresholdResponse, error)

	UpdateSubscribeOrUnsubscribeNotificationThresholdWithResponse(ctx context.Context, thresholdId int, body UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSubscribeOrUnsubscribeNotificationThresholdResponse, error)

	// GetBillingUsageWithResponse request
	GetBillingUsageWithResponse(ctx context.Context, params *GetBillingUsageParams, reqEditors ...RequestEditorFn) (*GetBillingUsageResponse, error)

	// RetrieveVmBillingEventsHistoryWithResponse request
	RetrieveVmBillingEventsHistoryWithResponse(ctx context.Context, vmId int, params *RetrieveVmBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*RetrieveVmBillingEventsHistoryResponse, error)

	// RetrieveTotalCostsAndNonDiscountCostsForSubResourcesWithResponse request
	RetrieveTotalCostsAndNonDiscountCostsForSubResourcesWithResponse(ctx context.Context, vmId int, params *RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams, reqEditors ...RequestEditorFn) (*RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse, error)

	// RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithResponse request
	RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithResponse(ctx context.Context, vmId int, params *RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams, reqEditors ...RequestEditorFn) (*RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse, error)

	// RetrieveVolumeBillingEventsHistoryWithResponse request
	RetrieveVolumeBillingEventsHistoryWithResponse(ctx context.Context, volumeId int, params *RetrieveVolumeBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*RetrieveVolumeBillingEventsHistoryResponse, error)
}

type RetrieveBillingHistoryForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationLevelBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVmBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVMBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVmGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingHistoryResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceLevelVolumeGraphBillingDetailsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLastDayCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Lastdaycostresponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetLastDayCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLastDayCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllThresholdsForOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organizationthresholdsresponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetAllThresholdsForOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllThresholdsForOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSubscribeOrUnsubscribeNotificationThresholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organizationthresholdupdateresponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r UpdateSubscribeOrUnsubscribeNotificationThresholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSubscribeOrUnsubscribeNotificationThresholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Billingmetricesresponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetBillingUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveVmBillingEventsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceBillingEventsHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveVmBillingEventsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveVmBillingEventsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubResourcesCostsResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubResourcesGraphResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveVolumeBillingEventsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceBillingEventsHistoryResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveVolumeBillingEventsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveVolumeBillingEventsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RetrieveBillingHistoryForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryForASpecificBillingCycle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfContractForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfContractForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfContractForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfContractForASpecificBillingCycle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfContractForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfSnapshotForASpecificBillingCycle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithResponse(ctx context.Context, snapshotId int, params *RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycle(ctx, snapshotId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse(rsp)
}

// RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithResponse request returning *RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithResponse(ctx context.Context, snapshotId int, params *RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycle(ctx, snapshotId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithResponse(ctx context.Context, vmId int, params *RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycle(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse(rsp)
}

// RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithResponse request returning *RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithResponse(ctx context.Context, vmId int, params *RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycle(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfVolumeForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfVolumeForASpecificBillingCycleWithResponse(ctx context.Context, params *RetrieveBillingHistoryOfVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfVolumeForASpecificBillingCycle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse(rsp)
}

// RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithResponse request returning *RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithResponse(ctx context.Context, volumeId int, params *RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycle(ctx, volumeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse(rsp)
}

// RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithResponse request returning *RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse
func (c *ClientWithResponses) RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithResponse(ctx context.Context, volumeId int, params *RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleParams, reqEditors ...RequestEditorFn) (*RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse, error) {
	rsp, err := c.RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycle(ctx, volumeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse(rsp)
}

// GetLastDayCostWithResponse request returning *GetLastDayCostResponse
func (c *ClientWithResponses) GetLastDayCostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLastDayCostResponse, error) {
	rsp, err := c.GetLastDayCost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLastDayCostResponse(rsp)
}

// GetAllThresholdsForOrganizationWithResponse request returning *GetAllThresholdsForOrganizationResponse
func (c *ClientWithResponses) GetAllThresholdsForOrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllThresholdsForOrganizationResponse, error) {
	rsp, err := c.GetAllThresholdsForOrganization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllThresholdsForOrganizationResponse(rsp)
}

// UpdateSubscribeOrUnsubscribeNotificationThresholdWithBodyWithResponse request with arbitrary body returning *UpdateSubscribeOrUnsubscribeNotificationThresholdResponse
func (c *ClientWithResponses) UpdateSubscribeOrUnsubscribeNotificationThresholdWithBodyWithResponse(ctx context.Context, thresholdId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSubscribeOrUnsubscribeNotificationThresholdResponse, error) {
	rsp, err := c.UpdateSubscribeOrUnsubscribeNotificationThresholdWithBody(ctx, thresholdId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSubscribeOrUnsubscribeNotificationThresholdResponse(rsp)
}

func (c *ClientWithResponses) UpdateSubscribeOrUnsubscribeNotificationThresholdWithResponse(ctx context.Context, thresholdId int, body UpdateSubscribeOrUnsubscribeNotificationThresholdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSubscribeOrUnsubscribeNotificationThresholdResponse, error) {
	rsp, err := c.UpdateSubscribeOrUnsubscribeNotificationThreshold(ctx, thresholdId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSubscribeOrUnsubscribeNotificationThresholdResponse(rsp)
}

// GetBillingUsageWithResponse request returning *GetBillingUsageResponse
func (c *ClientWithResponses) GetBillingUsageWithResponse(ctx context.Context, params *GetBillingUsageParams, reqEditors ...RequestEditorFn) (*GetBillingUsageResponse, error) {
	rsp, err := c.GetBillingUsage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingUsageResponse(rsp)
}

// RetrieveVmBillingEventsHistoryWithResponse request returning *RetrieveVmBillingEventsHistoryResponse
func (c *ClientWithResponses) RetrieveVmBillingEventsHistoryWithResponse(ctx context.Context, vmId int, params *RetrieveVmBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*RetrieveVmBillingEventsHistoryResponse, error) {
	rsp, err := c.RetrieveVmBillingEventsHistory(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveVmBillingEventsHistoryResponse(rsp)
}

// RetrieveTotalCostsAndNonDiscountCostsForSubResourcesWithResponse request returning *RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse
func (c *ClientWithResponses) RetrieveTotalCostsAndNonDiscountCostsForSubResourcesWithResponse(ctx context.Context, vmId int, params *RetrieveTotalCostsAndNonDiscountCostsForSubResourcesParams, reqEditors ...RequestEditorFn) (*RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse, error) {
	rsp, err := c.RetrieveTotalCostsAndNonDiscountCostsForSubResources(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse(rsp)
}

// RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithResponse request returning *RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse
func (c *ClientWithResponses) RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithResponse(ctx context.Context, vmId int, params *RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualParams, reqEditors ...RequestEditorFn) (*RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse, error) {
	rsp, err := c.RetrieveSubResourcesHistoricalCostDatapointsOfAVirtual(ctx, vmId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse(rsp)
}

// RetrieveVolumeBillingEventsHistoryWithResponse request returning *RetrieveVolumeBillingEventsHistoryResponse
func (c *ClientWithResponses) RetrieveVolumeBillingEventsHistoryWithResponse(ctx context.Context, volumeId int, params *RetrieveVolumeBillingEventsHistoryParams, reqEditors ...RequestEditorFn) (*RetrieveVolumeBillingEventsHistoryResponse, error) {
	rsp, err := c.RetrieveVolumeBillingEventsHistory(ctx, volumeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveVolumeBillingEventsHistoryResponse(rsp)
}

// ParseRetrieveBillingHistoryForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationLevelBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfContractForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfContractForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfContractForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfContractForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfSnapshotForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfASpecificSnapshotForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse parses an HTTP response from a RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleWithResponse call
func ParseRetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveHourlyCostDatapointsOfASpecificSnapshotForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfVirtualMachineForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVmBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfASpecificVirtualMachineForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVMBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse parses an HTTP response from a RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleWithResponse call
func ParseRetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveHourlyCostDatapointsOfASpecificVirtualMachineForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVmGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfVolumeForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfVolumeForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingHistoryResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse parses an HTTP response from a RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleWithResponse call
func ParseRetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveBillingHistoryOfASpecificVolumeForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse parses an HTTP response from a RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleWithResponse call
func ParseRetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse(rsp *http.Response) (*RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveHourlyCostDatapointsOfASpecificVolumeForASpecificBillingCycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceLevelVolumeGraphBillingDetailsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLastDayCostResponse parses an HTTP response from a GetLastDayCostWithResponse call
func ParseGetLastDayCostResponse(rsp *http.Response) (*GetLastDayCostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLastDayCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Lastdaycostresponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAllThresholdsForOrganizationResponse parses an HTTP response from a GetAllThresholdsForOrganizationWithResponse call
func ParseGetAllThresholdsForOrganizationResponse(rsp *http.Response) (*GetAllThresholdsForOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllThresholdsForOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organizationthresholdsresponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateSubscribeOrUnsubscribeNotificationThresholdResponse parses an HTTP response from a UpdateSubscribeOrUnsubscribeNotificationThresholdWithResponse call
func ParseUpdateSubscribeOrUnsubscribeNotificationThresholdResponse(rsp *http.Response) (*UpdateSubscribeOrUnsubscribeNotificationThresholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSubscribeOrUnsubscribeNotificationThresholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organizationthresholdupdateresponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBillingUsageResponse parses an HTTP response from a GetBillingUsageWithResponse call
func ParseGetBillingUsageResponse(rsp *http.Response) (*GetBillingUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Billingmetricesresponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveVmBillingEventsHistoryResponse parses an HTTP response from a RetrieveVmBillingEventsHistoryWithResponse call
func ParseRetrieveVmBillingEventsHistoryResponse(rsp *http.Response) (*RetrieveVmBillingEventsHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveVmBillingEventsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceBillingEventsHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse parses an HTTP response from a RetrieveTotalCostsAndNonDiscountCostsForSubResourcesWithResponse call
func ParseRetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse(rsp *http.Response) (*RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveTotalCostsAndNonDiscountCostsForSubResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubResourcesCostsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse parses an HTTP response from a RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualWithResponse call
func ParseRetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse(rsp *http.Response) (*RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveSubResourcesHistoricalCostDatapointsOfAVirtualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubResourcesGraphResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveVolumeBillingEventsHistoryResponse parses an HTTP response from a RetrieveVolumeBillingEventsHistoryWithResponse call
func ParseRetrieveVolumeBillingEventsHistoryResponse(rsp *http.Response) (*RetrieveVolumeBillingEventsHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveVolumeBillingEventsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceBillingEventsHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
