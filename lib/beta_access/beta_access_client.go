// Package beta_access provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package beta_access

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for BetaAccessRequestFieldsStatus.
const (
	BetaAccessRequestFieldsStatusApproved  BetaAccessRequestFieldsStatus = "approved"
	BetaAccessRequestFieldsStatusDenied    BetaAccessRequestFieldsStatus = "denied"
	BetaAccessRequestFieldsStatusRequested BetaAccessRequestFieldsStatus = "requested"
	BetaAccessRequestFieldsStatusRevoked   BetaAccessRequestFieldsStatus = "revoked"
)

// Defines values for BetaAccessStatusItemStatus.
const (
	BetaAccessStatusItemStatusApproved  BetaAccessStatusItemStatus = "approved"
	BetaAccessStatusItemStatusDenied    BetaAccessStatusItemStatus = "denied"
	BetaAccessStatusItemStatusRequested BetaAccessStatusItemStatus = "requested"
	BetaAccessStatusItemStatusRevoked   BetaAccessStatusItemStatus = "revoked"
)

// BetaAccessRequestFields defines model for BetaAccessRequestFields.
type BetaAccessRequestFields struct {
	// CreatedAt When the request was made
	CreatedAt *time.CustomTime `json:"created_at,omitempty"`

	// Id Unique identifier for the request
	Id *int `json:"id,omitempty"`

	// ProgramId ID of the beta program
	ProgramId *int `json:"program_id,omitempty"`

	// ProgramName Name of the beta program
	ProgramName *string `json:"program_name,omitempty"`

	// Status Status of the request
	Status *BetaAccessRequestFieldsStatus `json:"status,omitempty"`

	// UserId ID of the user who made the request
	UserId *int `json:"user_id,omitempty"`
}

// BetaAccessRequestFieldsStatus Status of the request
type BetaAccessRequestFieldsStatus string

// BetaAccessRequestPayload defines model for BetaAccessRequestPayload.
type BetaAccessRequestPayload struct {
	// Metadata Optional metadata for the request
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Program Name of the beta program
	Program string `json:"program"`
}

// BetaAccessRequestResponseModel defines model for BetaAccessRequestResponseModel.
type BetaAccessRequestResponseModel struct {
	BetaAccessRequest *BetaAccessRequestFields `json:"beta_access_request,omitempty"`
	Message           *string                  `json:"message,omitempty"`
	Status            *bool                    `json:"status,omitempty"`
}

// BetaAccessStatusItem defines model for BetaAccessStatusItem.
type BetaAccessStatusItem struct {
	// ProgramName Name of the beta program
	ProgramName *string `json:"program_name,omitempty"`

	// RequestDate When the request was made
	RequestDate *time.CustomTime `json:"request_date,omitempty"`

	// Status Status of the request (requested, approved, denied, revoked)
	Status *BetaAccessStatusItemStatus `json:"status,omitempty"`
}

// BetaAccessStatusItemStatus Status of the request (requested, approved, denied, revoked)
type BetaAccessStatusItemStatus string

// BetaAccessStatusResponseModel defines model for BetaAccessStatusResponseModel.
type BetaAccessStatusResponseModel struct {
	// BetaAccessRequests List of beta access requests
	BetaAccessRequests *[]BetaAccessStatusItem `json:"beta_access_requests,omitempty"`
	Message            *string                 `json:"message,omitempty"`
	Status             *bool                   `json:"status,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// CreateABetaAccessRequestJSONRequestBody defines body for CreateABetaAccessRequest for application/json ContentType.
type CreateABetaAccessRequestJSONRequestBody = BetaAccessRequestPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBetaAccessStatus request
	GetBetaAccessStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateABetaAccessRequestWithBody request with any body
	CreateABetaAccessRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateABetaAccessRequest(ctx context.Context, body CreateABetaAccessRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBetaAccessStatus2 request
	GetBetaAccessStatus2(ctx context.Context, program string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBetaAccessStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBetaAccessStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateABetaAccessRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateABetaAccessRequestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateABetaAccessRequest(ctx context.Context, body CreateABetaAccessRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateABetaAccessRequestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBetaAccessStatus2(ctx context.Context, program string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBetaAccessStatus2Request(c.Server, program)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBetaAccessStatusRequest generates requests for GetBetaAccessStatus
func NewGetBetaAccessStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/beta-access/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateABetaAccessRequestRequest calls the generic CreateABetaAccessRequest builder with application/json body
func NewCreateABetaAccessRequestRequest(server string, body CreateABetaAccessRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateABetaAccessRequestRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateABetaAccessRequestRequestWithBody generates requests for CreateABetaAccessRequest with any type of body
func NewCreateABetaAccessRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/beta-access/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBetaAccessStatus2Request generates requests for GetBetaAccessStatus2
func NewGetBetaAccessStatus2Request(server string, program string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "program", runtime.ParamLocationPath, program)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/beta-access/requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBetaAccessStatusWithResponse request
	GetBetaAccessStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBetaAccessStatusResponse, error)

	// CreateABetaAccessRequestWithBodyWithResponse request with any body
	CreateABetaAccessRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateABetaAccessRequestResponse, error)

	CreateABetaAccessRequestWithResponse(ctx context.Context, body CreateABetaAccessRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateABetaAccessRequestResponse, error)

	// GetBetaAccessStatus2WithResponse request
	GetBetaAccessStatus2WithResponse(ctx context.Context, program string, reqEditors ...RequestEditorFn) (*GetBetaAccessStatus2Response, error)
}

type GetBetaAccessStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAccessStatusResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetBetaAccessStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBetaAccessStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateABetaAccessRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BetaAccessRequestResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateABetaAccessRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateABetaAccessRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBetaAccessStatus2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BetaAccessStatusResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetBetaAccessStatus2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBetaAccessStatus2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBetaAccessStatusWithResponse request returning *GetBetaAccessStatusResponse
func (c *ClientWithResponses) GetBetaAccessStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBetaAccessStatusResponse, error) {
	rsp, err := c.GetBetaAccessStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBetaAccessStatusResponse(rsp)
}

// CreateABetaAccessRequestWithBodyWithResponse request with arbitrary body returning *CreateABetaAccessRequestResponse
func (c *ClientWithResponses) CreateABetaAccessRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateABetaAccessRequestResponse, error) {
	rsp, err := c.CreateABetaAccessRequestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateABetaAccessRequestResponse(rsp)
}

func (c *ClientWithResponses) CreateABetaAccessRequestWithResponse(ctx context.Context, body CreateABetaAccessRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateABetaAccessRequestResponse, error) {
	rsp, err := c.CreateABetaAccessRequest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateABetaAccessRequestResponse(rsp)
}

// GetBetaAccessStatus2WithResponse request returning *GetBetaAccessStatus2Response
func (c *ClientWithResponses) GetBetaAccessStatus2WithResponse(ctx context.Context, program string, reqEditors ...RequestEditorFn) (*GetBetaAccessStatus2Response, error) {
	rsp, err := c.GetBetaAccessStatus2(ctx, program, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBetaAccessStatus2Response(rsp)
}

// ParseGetBetaAccessStatusResponse parses an HTTP response from a GetBetaAccessStatusWithResponse call
func ParseGetBetaAccessStatusResponse(rsp *http.Response) (*GetBetaAccessStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBetaAccessStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAccessStatusResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateABetaAccessRequestResponse parses an HTTP response from a CreateABetaAccessRequestWithResponse call
func ParseCreateABetaAccessRequestResponse(rsp *http.Response) (*CreateABetaAccessRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateABetaAccessRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BetaAccessRequestResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBetaAccessStatus2Response parses an HTTP response from a GetBetaAccessStatus2WithResponse call
func ParseGetBetaAccessStatus2Response(rsp *http.Response) (*GetBetaAccessStatus2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBetaAccessStatus2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BetaAccessStatusResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
