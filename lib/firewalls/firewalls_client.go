// Package firewalls provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package firewalls

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for CreateFirewallRulePayloadProtocol.
const (
	Ah        CreateFirewallRulePayloadProtocol = "ah"
	Any       CreateFirewallRulePayloadProtocol = "any"
	Dccp      CreateFirewallRulePayloadProtocol = "dccp"
	Egp       CreateFirewallRulePayloadProtocol = "egp"
	Esp       CreateFirewallRulePayloadProtocol = "esp"
	Gre       CreateFirewallRulePayloadProtocol = "gre"
	Hopopt    CreateFirewallRulePayloadProtocol = "hopopt"
	Icmp      CreateFirewallRulePayloadProtocol = "icmp"
	Icmpv6    CreateFirewallRulePayloadProtocol = "icmpv6"
	Igmp      CreateFirewallRulePayloadProtocol = "igmp"
	Ip        CreateFirewallRulePayloadProtocol = "ip"
	Ipip      CreateFirewallRulePayloadProtocol = "ipip"
	Ipv6Encap CreateFirewallRulePayloadProtocol = "ipv6-encap"
	Ipv6Frag  CreateFirewallRulePayloadProtocol = "ipv6-frag"
	Ipv6Icmp  CreateFirewallRulePayloadProtocol = "ipv6-icmp"
	Ipv6Nonxt CreateFirewallRulePayloadProtocol = "ipv6-nonxt"
	Ipv6Opts  CreateFirewallRulePayloadProtocol = "ipv6-opts"
	Ipv6Route CreateFirewallRulePayloadProtocol = "ipv6-route"
	Ospf      CreateFirewallRulePayloadProtocol = "ospf"
	Pgm       CreateFirewallRulePayloadProtocol = "pgm"
	Rsvp      CreateFirewallRulePayloadProtocol = "rsvp"
	Sctp      CreateFirewallRulePayloadProtocol = "sctp"
	Tcp       CreateFirewallRulePayloadProtocol = "tcp"
	Udp       CreateFirewallRulePayloadProtocol = "udp"
	Udplite   CreateFirewallRulePayloadProtocol = "udplite"
	Vrrp      CreateFirewallRulePayloadProtocol = "vrrp"
)

// CreateFirewallPayload defines model for CreateFirewallPayload.
type CreateFirewallPayload struct {
	// Description Description of the firewall.
	Description *string `json:"description,omitempty"`

	// EnvironmentId ID of the environment.
	EnvironmentId int `json:"environment_id"`

	// Name Name of the firewall.
	Name string `json:"name"`
}

// CreateFirewallRulePayload defines model for CreateFirewallRulePayload.
type CreateFirewallRulePayload struct {
	// Direction The direction of traffic that the firewall rule applies to.
	Direction string `json:"direction"`

	// Ethertype The Ethernet type associated with the rule.
	Ethertype string `json:"ethertype"`

	// PortRangeMax The maximum port number in the range of ports to be allowed by the firewall rule.
	PortRangeMax *int `json:"port_range_max,omitempty"`

	// PortRangeMin The minimum port number in the range of ports to be allowed by the firewall rule.
	PortRangeMin *int `json:"port_range_min,omitempty"`

	// Protocol The network protocol associated with the rule. Call the [`GET /core/sg-rules-protocols`](https://infrahub-api-doc.nexgencloud.com/#get-/core/sg-rules-protocols) endpoint to retrieve a list of permitted network protocols.
	Protocol CreateFirewallRulePayloadProtocol `json:"protocol"`

	// RemoteIpPrefix The IP address range that is allowed to access the specified port. Use "0.0.0.0/0" to allow any IP address.
	RemoteIpPrefix string `json:"remote_ip_prefix"`
}

// CreateFirewallRulePayloadProtocol The network protocol associated with the rule. Call the [`GET /core/sg-rules-protocols`](https://infrahub-api-doc.nexgencloud.com/#get-/core/sg-rules-protocols) endpoint to retrieve a list of permitted network protocols.
type CreateFirewallRulePayloadProtocol string

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// FirewallAttachmentModel defines model for FirewallAttachmentModel.
type FirewallAttachmentModel struct {
	CreatedAt *time.CustomTime                 `json:"created_at,omitempty"`
	Id        *int                       `json:"id,omitempty"`
	Status    *string                    `json:"status,omitempty"`
	Vm        *FirewallAttachmentVMModel `json:"vm,omitempty"`
}

// FirewallAttachmentVMModel defines model for FirewallAttachmentVMModel.
type FirewallAttachmentVMModel struct {
	CreatedAt   *time.CustomTime `json:"created_at,omitempty"`
	Environment *string    `json:"environment,omitempty"`
	Flavor      *string    `json:"flavor,omitempty"`
	Id          *int       `json:"id,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Status      *string    `json:"status,omitempty"`
}

// FirewallDetailFields defines model for FirewallDetailFields.
type FirewallDetailFields struct {
	Attachments *[]FirewallAttachmentModel `json:"attachments,omitempty"`
	CreatedAt   *time.CustomTime                 `json:"created_at,omitempty"`
	Description *string                    `json:"description,omitempty"`
	Environment *FirewallEnvironmentFields `json:"environment,omitempty"`
	Id          *int                       `json:"id,omitempty"`
	Name        *string                    `json:"name,omitempty"`
	Rules       *[]SecurityGroupRuleFields `json:"rules,omitempty"`
	Status      *string                    `json:"status,omitempty"`
}

// FirewallDetailResponse defines model for FirewallDetailResponse.
type FirewallDetailResponse struct {
	Firewall *FirewallDetailFields `json:"firewall,omitempty"`
	Message  *string               `json:"message,omitempty"`
	Status   *bool                 `json:"status,omitempty"`
}

// FirewallEnvironmentFields defines model for FirewallEnvironmentFields.
type FirewallEnvironmentFields struct {
	Id     *int    `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Region *string `json:"region,omitempty"`
}

// FirewallFields defines model for FirewallFields.
type FirewallFields struct {
	CreatedAt   *time.CustomTime                 `json:"created_at,omitempty"`
	Description *string                    `json:"description,omitempty"`
	Environment *FirewallEnvironmentFields `json:"environment,omitempty"`
	Id          *int                       `json:"id,omitempty"`
	Name        *string                    `json:"name,omitempty"`
	Status      *string                    `json:"status,omitempty"`
}

// FirewallResponse defines model for FirewallResponse.
type FirewallResponse struct {
	Firewall *FirewallFields `json:"firewall,omitempty"`
	Message  *string         `json:"message,omitempty"`
	Status   *bool           `json:"status,omitempty"`
}

// FirewallRule defines model for FirewallRule.
type FirewallRule struct {
	FirewallRule *SecurityGroupRuleFields `json:"firewall_rule,omitempty"`
	Message      *string                  `json:"message,omitempty"`
	Status       *bool                    `json:"status,omitempty"`
}

// FirewallsListResponse defines model for FirewallsListResponse.
type FirewallsListResponse struct {
	Count     *int                    `json:"count,omitempty"`
	Firewalls *[]FirewallDetailFields `json:"firewalls,omitempty"`
	Message   *string                 `json:"message,omitempty"`
	Page      *int                    `json:"page,omitempty"`
	PageSize  *int                    `json:"page_size,omitempty"`
	Status    *bool                   `json:"status,omitempty"`
}

// ResponseModel defines model for ResponseModel.
type ResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// SecurityGroupRuleFields defines model for SecurityGroupRuleFields.
type SecurityGroupRuleFields struct {
	CreatedAt      *time.CustomTime `json:"created_at,omitempty"`
	Direction      *string    `json:"direction,omitempty"`
	Ethertype      *string    `json:"ethertype,omitempty"`
	Id             *int       `json:"id,omitempty"`
	PortRangeMax   *int       `json:"port_range_max,omitempty"`
	PortRangeMin   *int       `json:"port_range_min,omitempty"`
	Protocol       *string    `json:"protocol,omitempty"`
	RemoteIpPrefix *string    `json:"remote_ip_prefix,omitempty"`
	Status         *string    `json:"status,omitempty"`
}

// ListFirewallsParams defines parameters for ListFirewalls.
type ListFirewallsParams struct {
	Page        *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize    *int    `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	Search      *string `form:"search,omitempty" json:"search,omitempty"`
	Environment *string `form:"environment,omitempty" json:"environment,omitempty"`
}

// CreateFirewallJSONRequestBody defines body for CreateFirewall for application/json ContentType.
type CreateFirewallJSONRequestBody = CreateFirewallPayload

// AddFirewallRuleToFirewallJSONRequestBody defines body for AddFirewallRuleToFirewall for application/json ContentType.
type AddFirewallRuleToFirewallJSONRequestBody = CreateFirewallRulePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListFirewalls request
	ListFirewalls(ctx context.Context, params *ListFirewallsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFirewallWithBody request with any body
	CreateFirewallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFirewall(ctx context.Context, body CreateFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddFirewallRuleToFirewallWithBody request with any body
	AddFirewallRuleToFirewallWithBody(ctx context.Context, firewallId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddFirewallRuleToFirewall(ctx context.Context, firewallId int, body AddFirewallRuleToFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFirewallRulesFromFirewall request
	DeleteFirewallRulesFromFirewall(ctx context.Context, firewallId int, firewallRuleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFirewall request
	DeleteFirewall(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveFirewallDetails request
	RetrieveFirewallDetails(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListFirewalls(ctx context.Context, params *ListFirewallsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFirewallsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFirewallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFirewallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFirewall(ctx context.Context, body CreateFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFirewallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFirewallRuleToFirewallWithBody(ctx context.Context, firewallId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFirewallRuleToFirewallRequestWithBody(c.Server, firewallId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddFirewallRuleToFirewall(ctx context.Context, firewallId int, body AddFirewallRuleToFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddFirewallRuleToFirewallRequest(c.Server, firewallId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFirewallRulesFromFirewall(ctx context.Context, firewallId int, firewallRuleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFirewallRulesFromFirewallRequest(c.Server, firewallId, firewallRuleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFirewall(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFirewallRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveFirewallDetails(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveFirewallDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListFirewallsRequest generates requests for ListFirewalls
func NewListFirewallsRequest(server string, params *ListFirewallsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/firewalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Environment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, *params.Environment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFirewallRequest calls the generic CreateFirewall builder with application/json body
func NewCreateFirewallRequest(server string, body CreateFirewallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFirewallRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFirewallRequestWithBody generates requests for CreateFirewall with any type of body
func NewCreateFirewallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/firewalls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddFirewallRuleToFirewallRequest calls the generic AddFirewallRuleToFirewall builder with application/json body
func NewAddFirewallRuleToFirewallRequest(server string, firewallId int, body AddFirewallRuleToFirewallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddFirewallRuleToFirewallRequestWithBody(server, firewallId, "application/json", bodyReader)
}

// NewAddFirewallRuleToFirewallRequestWithBody generates requests for AddFirewallRuleToFirewall with any type of body
func NewAddFirewallRuleToFirewallRequestWithBody(server string, firewallId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewall_id", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/firewalls/%s/firewall-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFirewallRulesFromFirewallRequest generates requests for DeleteFirewallRulesFromFirewall
func NewDeleteFirewallRulesFromFirewallRequest(server string, firewallId int, firewallRuleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "firewall_id", runtime.ParamLocationPath, firewallId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "firewall_rule_id", runtime.ParamLocationPath, firewallRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/firewalls/%s/firewall-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFirewallRequest generates requests for DeleteFirewall
func NewDeleteFirewallRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/firewalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveFirewallDetailsRequest generates requests for RetrieveFirewallDetails
func NewRetrieveFirewallDetailsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/firewalls/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListFirewallsWithResponse request
	ListFirewallsWithResponse(ctx context.Context, params *ListFirewallsParams, reqEditors ...RequestEditorFn) (*ListFirewallsResponse, error)

	// CreateFirewallWithBodyWithResponse request with any body
	CreateFirewallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFirewallResponse, error)

	CreateFirewallWithResponse(ctx context.Context, body CreateFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFirewallResponse, error)

	// AddFirewallRuleToFirewallWithBodyWithResponse request with any body
	AddFirewallRuleToFirewallWithBodyWithResponse(ctx context.Context, firewallId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFirewallRuleToFirewallResponse, error)

	AddFirewallRuleToFirewallWithResponse(ctx context.Context, firewallId int, body AddFirewallRuleToFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFirewallRuleToFirewallResponse, error)

	// DeleteFirewallRulesFromFirewallWithResponse request
	DeleteFirewallRulesFromFirewallWithResponse(ctx context.Context, firewallId int, firewallRuleId int, reqEditors ...RequestEditorFn) (*DeleteFirewallRulesFromFirewallResponse, error)

	// DeleteFirewallWithResponse request
	DeleteFirewallWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFirewallResponse, error)

	// RetrieveFirewallDetailsWithResponse request
	RetrieveFirewallDetailsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RetrieveFirewallDetailsResponse, error)
}

type ListFirewallsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FirewallsListResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r ListFirewallsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFirewallsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFirewallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FirewallResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateFirewallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFirewallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddFirewallRuleToFirewallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FirewallRule
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r AddFirewallRuleToFirewallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddFirewallRuleToFirewallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFirewallRulesFromFirewallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteFirewallRulesFromFirewallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFirewallRulesFromFirewallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFirewallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteFirewallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFirewallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveFirewallDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FirewallDetailResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON403      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveFirewallDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveFirewallDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListFirewallsWithResponse request returning *ListFirewallsResponse
func (c *ClientWithResponses) ListFirewallsWithResponse(ctx context.Context, params *ListFirewallsParams, reqEditors ...RequestEditorFn) (*ListFirewallsResponse, error) {
	rsp, err := c.ListFirewalls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFirewallsResponse(rsp)
}

// CreateFirewallWithBodyWithResponse request with arbitrary body returning *CreateFirewallResponse
func (c *ClientWithResponses) CreateFirewallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFirewallResponse, error) {
	rsp, err := c.CreateFirewallWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFirewallResponse(rsp)
}

func (c *ClientWithResponses) CreateFirewallWithResponse(ctx context.Context, body CreateFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFirewallResponse, error) {
	rsp, err := c.CreateFirewall(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFirewallResponse(rsp)
}

// AddFirewallRuleToFirewallWithBodyWithResponse request with arbitrary body returning *AddFirewallRuleToFirewallResponse
func (c *ClientWithResponses) AddFirewallRuleToFirewallWithBodyWithResponse(ctx context.Context, firewallId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddFirewallRuleToFirewallResponse, error) {
	rsp, err := c.AddFirewallRuleToFirewallWithBody(ctx, firewallId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFirewallRuleToFirewallResponse(rsp)
}

func (c *ClientWithResponses) AddFirewallRuleToFirewallWithResponse(ctx context.Context, firewallId int, body AddFirewallRuleToFirewallJSONRequestBody, reqEditors ...RequestEditorFn) (*AddFirewallRuleToFirewallResponse, error) {
	rsp, err := c.AddFirewallRuleToFirewall(ctx, firewallId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddFirewallRuleToFirewallResponse(rsp)
}

// DeleteFirewallRulesFromFirewallWithResponse request returning *DeleteFirewallRulesFromFirewallResponse
func (c *ClientWithResponses) DeleteFirewallRulesFromFirewallWithResponse(ctx context.Context, firewallId int, firewallRuleId int, reqEditors ...RequestEditorFn) (*DeleteFirewallRulesFromFirewallResponse, error) {
	rsp, err := c.DeleteFirewallRulesFromFirewall(ctx, firewallId, firewallRuleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFirewallRulesFromFirewallResponse(rsp)
}

// DeleteFirewallWithResponse request returning *DeleteFirewallResponse
func (c *ClientWithResponses) DeleteFirewallWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteFirewallResponse, error) {
	rsp, err := c.DeleteFirewall(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFirewallResponse(rsp)
}

// RetrieveFirewallDetailsWithResponse request returning *RetrieveFirewallDetailsResponse
func (c *ClientWithResponses) RetrieveFirewallDetailsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RetrieveFirewallDetailsResponse, error) {
	rsp, err := c.RetrieveFirewallDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveFirewallDetailsResponse(rsp)
}

// ParseListFirewallsResponse parses an HTTP response from a ListFirewallsWithResponse call
func ParseListFirewallsResponse(rsp *http.Response) (*ListFirewallsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFirewallsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FirewallsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreateFirewallResponse parses an HTTP response from a CreateFirewallWithResponse call
func ParseCreateFirewallResponse(rsp *http.Response) (*CreateFirewallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFirewallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FirewallResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAddFirewallRuleToFirewallResponse parses an HTTP response from a AddFirewallRuleToFirewallWithResponse call
func ParseAddFirewallRuleToFirewallResponse(rsp *http.Response) (*AddFirewallRuleToFirewallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddFirewallRuleToFirewallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FirewallRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteFirewallRulesFromFirewallResponse parses an HTTP response from a DeleteFirewallRulesFromFirewallWithResponse call
func ParseDeleteFirewallRulesFromFirewallResponse(rsp *http.Response) (*DeleteFirewallRulesFromFirewallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFirewallRulesFromFirewallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteFirewallResponse parses an HTTP response from a DeleteFirewallWithResponse call
func ParseDeleteFirewallResponse(rsp *http.Response) (*DeleteFirewallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFirewallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRetrieveFirewallDetailsResponse parses an HTTP response from a RetrieveFirewallDetailsWithResponse call
func ParseRetrieveFirewallDetailsResponse(rsp *http.Response) (*RetrieveFirewallDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveFirewallDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FirewallDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
