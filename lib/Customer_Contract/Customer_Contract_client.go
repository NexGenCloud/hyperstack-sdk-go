// Package Customer_Contract provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package Customer_Contract

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// CustomerContractDetailResponseModel defines model for CustomerContractDetailResponseModel.
type CustomerContractDetailResponseModel struct {
	Contracts *CustomerContractFields `json:"contracts,omitempty"`
	Message   *string                 `json:"message,omitempty"`
	Status    *bool                   `json:"status,omitempty"`
}

// CustomerContractFields defines model for CustomerContractFields.
type CustomerContractFields struct {
	CreatedAt        *time.CustomTime            `json:"created_at,omitempty"`
	Description      *string               `json:"description,omitempty"`
	Discounts        *[]DiscountPlanFields `json:"discounts,omitempty"`
	EndDate          *time.CustomTime            `json:"end_date,omitempty"`
	ExpirationPolicy *int                  `json:"expiration_policy,omitempty"`
	Id               *int                  `json:"id,omitempty"`
	OrgId            *int                  `json:"org_id,omitempty"`
	StartDate        *time.CustomTime            `json:"start_date,omitempty"`
	Status           *string               `json:"status,omitempty"`
}

// DiscountPlanFields defines model for DiscountPlanFields.
type DiscountPlanFields struct {
	DiscountAmount  *float32 `json:"discount_amount,omitempty"`
	DiscountCode    *string  `json:"discount_code,omitempty"`
	DiscountPercent *float32 `json:"discount_percent,omitempty"`
	DiscountStatus  *string  `json:"discount_status,omitempty"`
	DiscountType    *string  `json:"discount_type,omitempty"`
	Id              *int     `json:"id,omitempty"`
	ResourceCount   *int     `json:"resource_count,omitempty"`
	ResourceId      *int     `json:"resource_id,omitempty"`
	ResourceName    *string  `json:"resource_name,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// GetCustomerContractsListResponseModel defines model for GetCustomerContractsListResponseModel.
type GetCustomerContractsListResponseModel struct {
	Contracts *[]CustomerContractFields `json:"contracts,omitempty"`
	Count     *int                      `json:"count,omitempty"`
	Message   *string                   `json:"message,omitempty"`
	Status    *bool                     `json:"status,omitempty"`
}

// GetCustomerContractParams defines parameters for GetCustomerContract.
type GetCustomerContractParams struct {
	Page    *int `form:"page,omitempty" json:"page,omitempty"`
	PerPage *int `form:"per_page,omitempty" json:"per_page,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCustomerContract request
	GetCustomerContract(ctx context.Context, params *GetCustomerContractParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DetailsOfContractByIDForCustomer request
	DetailsOfContractByIDForCustomer(ctx context.Context, contractId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCustomerContract(ctx context.Context, params *GetCustomerContractParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerContractRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetailsOfContractByIDForCustomer(ctx context.Context, contractId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetailsOfContractByIDForCustomerRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCustomerContractRequest generates requests for GetCustomerContract
func NewGetCustomerContractRequest(server string, params *GetCustomerContractParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pricebook/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDetailsOfContractByIDForCustomerRequest generates requests for DetailsOfContractByIDForCustomer
func NewDetailsOfContractByIDForCustomerRequest(server string, contractId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pricebook/contracts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCustomerContractWithResponse request
	GetCustomerContractWithResponse(ctx context.Context, params *GetCustomerContractParams, reqEditors ...RequestEditorFn) (*GetCustomerContractResponse, error)

	// DetailsOfContractByIDForCustomerWithResponse request
	DetailsOfContractByIDForCustomerWithResponse(ctx context.Context, contractId int, reqEditors ...RequestEditorFn) (*DetailsOfContractByIDForCustomerResponse, error)
}

type GetCustomerContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCustomerContractsListResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON405      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCustomerContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DetailsOfContractByIDForCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerContractDetailResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DetailsOfContractByIDForCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DetailsOfContractByIDForCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCustomerContractWithResponse request returning *GetCustomerContractResponse
func (c *ClientWithResponses) GetCustomerContractWithResponse(ctx context.Context, params *GetCustomerContractParams, reqEditors ...RequestEditorFn) (*GetCustomerContractResponse, error) {
	rsp, err := c.GetCustomerContract(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerContractResponse(rsp)
}

// DetailsOfContractByIDForCustomerWithResponse request returning *DetailsOfContractByIDForCustomerResponse
func (c *ClientWithResponses) DetailsOfContractByIDForCustomerWithResponse(ctx context.Context, contractId int, reqEditors ...RequestEditorFn) (*DetailsOfContractByIDForCustomerResponse, error) {
	rsp, err := c.DetailsOfContractByIDForCustomer(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetailsOfContractByIDForCustomerResponse(rsp)
}

// ParseGetCustomerContractResponse parses an HTTP response from a GetCustomerContractWithResponse call
func ParseGetCustomerContractResponse(rsp *http.Response) (*GetCustomerContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCustomerContractsListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDetailsOfContractByIDForCustomerResponse parses an HTTP response from a DetailsOfContractByIDForCustomerWithResponse call
func ParseDetailsOfContractByIDForCustomerResponse(rsp *http.Response) (*DetailsOfContractByIDForCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DetailsOfContractByIDForCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerContractDetailResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}
