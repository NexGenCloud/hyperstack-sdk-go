// Package rbac_role provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package rbac_role

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"

	"github.com/oapi-codegen/runtime"
)

// CommonResponseModel defines model for CommonResponseModel.
type CommonResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// CreateUpdateRbacRolePayload defines model for CreateUpdateRbacRolePayload.
type CreateUpdateRbacRolePayload struct {
	// Description Description of the role.
	Description string `json:"description"`

	// Name Name of the RBAC role.
	Name        string `json:"name"`
	Permissions *[]int `json:"permissions,omitempty"`
	Policies    *[]int `json:"policies,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// GetRbacRolesResponseModel defines model for GetRbacRolesResponseModel.
type GetRbacRolesResponseModel struct {
	Message *string           `json:"message,omitempty"`
	Roles   *[]RbacRoleFields `json:"roles,omitempty"`
	Status  *bool             `json:"status,omitempty"`
}

// RbacRoleDetailResponseModel defines model for RbacRoleDetailResponseModel.
type RbacRoleDetailResponseModel struct {
	Message *string         `json:"message,omitempty"`
	Role    *RbacRoleFields `json:"role,omitempty"`
	Status  *bool           `json:"status,omitempty"`
}

// RbacRoleDetailResponseModelFixed defines model for RbacRoleDetailResponseModelFixed.
type RbacRoleDetailResponseModelFixed struct {
	Message *string         `json:"message,omitempty"`
	Roles   *RbacRoleFields `json:"roles,omitempty"`
	Status  *bool           `json:"status,omitempty"`
}

// RbacRoleFields defines model for RbacRoleFields.
type RbacRoleFields struct {
	CreatedAt   *time.CustomTime              `json:"created_at,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Id          *int                    `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Permissions *[]RolePermissionFields `json:"permissions,omitempty"`
	Policies    *[]RolePolicyFields     `json:"policies,omitempty"`
}

// RolePermissionFields defines model for RolePermissionFields.
type RolePermissionFields struct {
	Id         *int    `json:"id,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Resource   *string `json:"resource,omitempty"`
}

// RolePolicyFields defines model for RolePolicyFields.
type RolePolicyFields struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// CreateRbacRoleJSONRequestBody defines body for CreateRbacRole for application/json ContentType.
type CreateRbacRoleJSONRequestBody = CreateUpdateRbacRolePayload

// UpdateRbacRoleJSONRequestBody defines body for UpdateRbacRole for application/json ContentType.
type UpdateRbacRoleJSONRequestBody = CreateUpdateRbacRolePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListRbacRoles request
	ListRbacRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRbacRoleWithBody request with any body
	CreateRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRbacRole(ctx context.Context, body CreateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRbacRole request
	DeleteRbacRole(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveRbacRoleDetails request
	RetrieveRbacRoleDetails(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRbacRoleWithBody request with any body
	UpdateRbacRoleWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRbacRole(ctx context.Context, id int, body UpdateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListRbacRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRbacRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRbacRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRbacRole(ctx context.Context, body CreateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRbacRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacRole(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacRoleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveRbacRoleDetails(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveRbacRoleDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRbacRoleWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRbacRoleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRbacRole(ctx context.Context, id int, body UpdateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRbacRoleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListRbacRolesRequest generates requests for ListRbacRoles
func NewListRbacRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRbacRoleRequest calls the generic CreateRbacRole builder with application/json body
func NewCreateRbacRoleRequest(server string, body CreateRbacRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRbacRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRbacRoleRequestWithBody generates requests for CreateRbacRole with any type of body
func NewCreateRbacRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRbacRoleRequest generates requests for DeleteRbacRole
func NewDeleteRbacRoleRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveRbacRoleDetailsRequest generates requests for RetrieveRbacRoleDetails
func NewRetrieveRbacRoleDetailsRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRbacRoleRequest calls the generic UpdateRbacRole builder with application/json body
func NewUpdateRbacRoleRequest(server string, id int, body UpdateRbacRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRbacRoleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateRbacRoleRequestWithBody generates requests for UpdateRbacRole with any type of body
func NewUpdateRbacRoleRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListRbacRolesWithResponse request
	ListRbacRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRbacRolesResponse, error)

	// CreateRbacRoleWithBodyWithResponse request with any body
	CreateRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRbacRoleResponse, error)

	CreateRbacRoleWithResponse(ctx context.Context, body CreateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRbacRoleResponse, error)

	// DeleteRbacRoleWithResponse request
	DeleteRbacRoleWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRbacRoleResponse, error)

	// RetrieveRbacRoleDetailsWithResponse request
	RetrieveRbacRoleDetailsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RetrieveRbacRoleDetailsResponse, error)

	// UpdateRbacRoleWithBodyWithResponse request with any body
	UpdateRbacRoleWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRbacRoleResponse, error)

	UpdateRbacRoleWithResponse(ctx context.Context, id int, body UpdateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRbacRoleResponse, error)
}

type ListRbacRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRbacRolesResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r ListRbacRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRbacRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RbacRoleDetailResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommonResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveRbacRoleDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RbacRoleDetailResponseModelFixed
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveRbacRoleDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveRbacRoleDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RbacRoleDetailResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r UpdateRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListRbacRolesWithResponse request returning *ListRbacRolesResponse
func (c *ClientWithResponses) ListRbacRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRbacRolesResponse, error) {
	rsp, err := c.ListRbacRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRbacRolesResponse(rsp)
}

// CreateRbacRoleWithBodyWithResponse request with arbitrary body returning *CreateRbacRoleResponse
func (c *ClientWithResponses) CreateRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRbacRoleResponse, error) {
	rsp, err := c.CreateRbacRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRbacRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRbacRoleWithResponse(ctx context.Context, body CreateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRbacRoleResponse, error) {
	rsp, err := c.CreateRbacRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRbacRoleResponse(rsp)
}

// DeleteRbacRoleWithResponse request returning *DeleteRbacRoleResponse
func (c *ClientWithResponses) DeleteRbacRoleWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteRbacRoleResponse, error) {
	rsp, err := c.DeleteRbacRole(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacRoleResponse(rsp)
}

// RetrieveRbacRoleDetailsWithResponse request returning *RetrieveRbacRoleDetailsResponse
func (c *ClientWithResponses) RetrieveRbacRoleDetailsWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*RetrieveRbacRoleDetailsResponse, error) {
	rsp, err := c.RetrieveRbacRoleDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveRbacRoleDetailsResponse(rsp)
}

// UpdateRbacRoleWithBodyWithResponse request with arbitrary body returning *UpdateRbacRoleResponse
func (c *ClientWithResponses) UpdateRbacRoleWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRbacRoleResponse, error) {
	rsp, err := c.UpdateRbacRoleWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRbacRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRbacRoleWithResponse(ctx context.Context, id int, body UpdateRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRbacRoleResponse, error) {
	rsp, err := c.UpdateRbacRole(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRbacRoleResponse(rsp)
}

// ParseListRbacRolesResponse parses an HTTP response from a ListRbacRolesWithResponse call
func ParseListRbacRolesResponse(rsp *http.Response) (*ListRbacRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRbacRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRbacRolesResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateRbacRoleResponse parses an HTTP response from a CreateRbacRoleWithResponse call
func ParseCreateRbacRoleResponse(rsp *http.Response) (*CreateRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RbacRoleDetailResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRbacRoleResponse parses an HTTP response from a DeleteRbacRoleWithResponse call
func ParseDeleteRbacRoleResponse(rsp *http.Response) (*DeleteRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommonResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetrieveRbacRoleDetailsResponse parses an HTTP response from a RetrieveRbacRoleDetailsWithResponse call
func ParseRetrieveRbacRoleDetailsResponse(rsp *http.Response) (*RetrieveRbacRoleDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveRbacRoleDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RbacRoleDetailResponseModelFixed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRbacRoleResponse parses an HTTP response from a UpdateRbacRoleWithResponse call
func ParseUpdateRbacRoleResponse(rsp *http.Response) (*UpdateRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RbacRoleDetailResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
