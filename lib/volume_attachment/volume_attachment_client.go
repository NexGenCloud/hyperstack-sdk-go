// Package volume_attachment provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package volume_attachment

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/NexGenCloud/hyperstack-sdk-go/lib/time"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// AttachVolumeFields defines model for AttachVolumeFields.
type AttachVolumeFields struct {
	CreatedAt  *time.CustomTime `json:"created_at,omitempty"`
	Id         *int             `json:"id,omitempty"`
	InstanceId *int             `json:"instance_id,omitempty"`
	Status     *string          `json:"status,omitempty"`
	VolumeId   *int             `json:"volume_id,omitempty"`
}

// AttachVolumes defines model for AttachVolumes.
type AttachVolumes struct {
	Message           *string               `json:"message,omitempty"`
	Status            *bool                 `json:"status,omitempty"`
	VolumeAttachments *[]AttachVolumeFields `json:"volume_attachments,omitempty"`
}

// AttachVolumesPayload defines model for AttachVolumesPayload.
type AttachVolumesPayload struct {
	VolumeIds *[]int `json:"volume_ids,omitempty"`
}

// DetachVolumes defines model for DetachVolumes.
type DetachVolumes struct {
	Message           *string               `json:"message,omitempty"`
	Status            *bool                 `json:"status,omitempty"`
	VolumeAttachments *[]AttachVolumeFields `json:"volume_attachments,omitempty"`
}

// DetachVolumesPayload defines model for DetachVolumesPayload.
type DetachVolumesPayload struct {
	VolumeIds *[]int `json:"volume_ids,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// AttachVolumesToVirtualMachineJSONRequestBody defines body for AttachVolumesToVirtualMachine for application/json ContentType.
type AttachVolumesToVirtualMachineJSONRequestBody = AttachVolumesPayload

// DetachVolumesFromVirtualMachineJSONRequestBody defines body for DetachVolumesFromVirtualMachine for application/json ContentType.
type DetachVolumesFromVirtualMachineJSONRequestBody = DetachVolumesPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AttachVolumesToVirtualMachineWithBody request with any body
	AttachVolumesToVirtualMachineWithBody(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AttachVolumesToVirtualMachine(ctx context.Context, virtualMachineId int, body AttachVolumesToVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DetachVolumesFromVirtualMachineWithBody request with any body
	DetachVolumesFromVirtualMachineWithBody(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DetachVolumesFromVirtualMachine(ctx context.Context, virtualMachineId int, body DetachVolumesFromVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AttachVolumesToVirtualMachineWithBody(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachVolumesToVirtualMachineRequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachVolumesToVirtualMachine(ctx context.Context, virtualMachineId int, body AttachVolumesToVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachVolumesToVirtualMachineRequest(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetachVolumesFromVirtualMachineWithBody(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetachVolumesFromVirtualMachineRequestWithBody(c.Server, virtualMachineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DetachVolumesFromVirtualMachine(ctx context.Context, virtualMachineId int, body DetachVolumesFromVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDetachVolumesFromVirtualMachineRequest(c.Server, virtualMachineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAttachVolumesToVirtualMachineRequest calls the generic AttachVolumesToVirtualMachine builder with application/json body
func NewAttachVolumesToVirtualMachineRequest(server string, virtualMachineId int, body AttachVolumesToVirtualMachineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAttachVolumesToVirtualMachineRequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewAttachVolumesToVirtualMachineRequestWithBody generates requests for AttachVolumesToVirtualMachine with any type of body
func NewAttachVolumesToVirtualMachineRequestWithBody(server string, virtualMachineId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/attach-volumes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDetachVolumesFromVirtualMachineRequest calls the generic DetachVolumesFromVirtualMachine builder with application/json body
func NewDetachVolumesFromVirtualMachineRequest(server string, virtualMachineId int, body DetachVolumesFromVirtualMachineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDetachVolumesFromVirtualMachineRequestWithBody(server, virtualMachineId, "application/json", bodyReader)
}

// NewDetachVolumesFromVirtualMachineRequestWithBody generates requests for DetachVolumesFromVirtualMachine with any type of body
func NewDetachVolumesFromVirtualMachineRequestWithBody(server string, virtualMachineId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "virtual_machine_id", runtime.ParamLocationPath, virtualMachineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/virtual-machines/%s/detach-volumes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AttachVolumesToVirtualMachineWithBodyWithResponse request with any body
	AttachVolumesToVirtualMachineWithBodyWithResponse(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachVolumesToVirtualMachineResponse, error)

	AttachVolumesToVirtualMachineWithResponse(ctx context.Context, virtualMachineId int, body AttachVolumesToVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachVolumesToVirtualMachineResponse, error)

	// DetachVolumesFromVirtualMachineWithBodyWithResponse request with any body
	DetachVolumesFromVirtualMachineWithBodyWithResponse(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetachVolumesFromVirtualMachineResponse, error)

	DetachVolumesFromVirtualMachineWithResponse(ctx context.Context, virtualMachineId int, body DetachVolumesFromVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*DetachVolumesFromVirtualMachineResponse, error)
}

type AttachVolumesToVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttachVolumes
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r AttachVolumesToVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachVolumesToVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DetachVolumesFromVirtualMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DetachVolumes
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DetachVolumesFromVirtualMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DetachVolumesFromVirtualMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AttachVolumesToVirtualMachineWithBodyWithResponse request with arbitrary body returning *AttachVolumesToVirtualMachineResponse
func (c *ClientWithResponses) AttachVolumesToVirtualMachineWithBodyWithResponse(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachVolumesToVirtualMachineResponse, error) {
	rsp, err := c.AttachVolumesToVirtualMachineWithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachVolumesToVirtualMachineResponse(rsp)
}

func (c *ClientWithResponses) AttachVolumesToVirtualMachineWithResponse(ctx context.Context, virtualMachineId int, body AttachVolumesToVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*AttachVolumesToVirtualMachineResponse, error) {
	rsp, err := c.AttachVolumesToVirtualMachine(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachVolumesToVirtualMachineResponse(rsp)
}

// DetachVolumesFromVirtualMachineWithBodyWithResponse request with arbitrary body returning *DetachVolumesFromVirtualMachineResponse
func (c *ClientWithResponses) DetachVolumesFromVirtualMachineWithBodyWithResponse(ctx context.Context, virtualMachineId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DetachVolumesFromVirtualMachineResponse, error) {
	rsp, err := c.DetachVolumesFromVirtualMachineWithBody(ctx, virtualMachineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetachVolumesFromVirtualMachineResponse(rsp)
}

func (c *ClientWithResponses) DetachVolumesFromVirtualMachineWithResponse(ctx context.Context, virtualMachineId int, body DetachVolumesFromVirtualMachineJSONRequestBody, reqEditors ...RequestEditorFn) (*DetachVolumesFromVirtualMachineResponse, error) {
	rsp, err := c.DetachVolumesFromVirtualMachine(ctx, virtualMachineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDetachVolumesFromVirtualMachineResponse(rsp)
}

// ParseAttachVolumesToVirtualMachineResponse parses an HTTP response from a AttachVolumesToVirtualMachineWithResponse call
func ParseAttachVolumesToVirtualMachineResponse(rsp *http.Response) (*AttachVolumesToVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachVolumesToVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttachVolumes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDetachVolumesFromVirtualMachineResponse parses an HTTP response from a DetachVolumesFromVirtualMachineWithResponse call
func ParseDetachVolumesFromVirtualMachineResponse(rsp *http.Response) (*DetachVolumesFromVirtualMachineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DetachVolumesFromVirtualMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetachVolumes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}
