// Package compliance provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package compliance

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// ComplianceFields defines model for ComplianceFields.
type ComplianceFields struct {
	Cpu      *[]int  `json:"cpu,omitempty"`
	GpuModel *string `json:"gpu_model,omitempty"`
	Hdd      *[]int  `json:"hdd,omitempty"`
	Ram      *[]int  `json:"ram,omitempty"`
}

// ComplianceModelFields defines model for ComplianceModelFields.
type ComplianceModelFields struct {
	BaseValue     *int    `json:"base_value,omitempty"`
	GpuModel      *string `json:"gpu_model,omitempty"`
	Id            *int    `json:"id,omitempty"`
	ResourceType  *string `json:"resource_type,omitempty"`
	VariationMax  *int    `json:"variation_max,omitempty"`
	VariationMin  *int    `json:"variation_min,omitempty"`
	VariationUnit *int    `json:"variation_unit,omitempty"`
}

// CompliancePayload defines model for CompliancePayload.
type CompliancePayload struct {
	BaseValue     int    `json:"base_value"`
	GpuModel      string `json:"gpu_model"`
	ResourceType  string `json:"resource_type"`
	VariationMax  int    `json:"variation_max"`
	VariationMin  int    `json:"variation_min"`
	VariationUnit int    `json:"variation_unit"`
}

// ComplianceResponse defines model for ComplianceResponse.
type ComplianceResponse struct {
	Compliance *ComplianceFields `json:"compliance,omitempty"`
	Message    *string           `json:"message,omitempty"`
	Status     *bool             `json:"status,omitempty"`
}

// CreateUpdateComplianceResponse defines model for CreateUpdateComplianceResponse.
type CreateUpdateComplianceResponse struct {
	Compliance *ComplianceModelFields `json:"compliance,omitempty"`
	Message    *string                `json:"message,omitempty"`
	Status     *bool                  `json:"status,omitempty"`
}

// ErrorResponseModel defines model for ErrorResponseModel.
type ErrorResponseModel struct {
	ErrorReason *string `json:"error_reason,omitempty"`
	Message     *string `json:"message,omitempty"`
	Status      *bool   `json:"status,omitempty"`
}

// ResponseModel defines model for ResponseModel.
type ResponseModel struct {
	Message *string `json:"message,omitempty"`
	Status  *bool   `json:"status,omitempty"`
}

// RetrieveComplianceParams defines parameters for RetrieveCompliance.
type RetrieveComplianceParams struct {
	Gpu *string `form:"gpu,omitempty" json:"gpu,omitempty"`
}

// CreateComplianceJSONRequestBody defines body for CreateCompliance for application/json ContentType.
type CreateComplianceJSONRequestBody = CompliancePayload

// UpdateAComplianceJSONRequestBody defines body for UpdateACompliance for application/json ContentType.
type UpdateAComplianceJSONRequestBody = CompliancePayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RetrieveCompliance request
	RetrieveCompliance(ctx context.Context, params *RetrieveComplianceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateComplianceWithBody request with any body
	CreateComplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCompliance(ctx context.Context, body CreateComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAComplianceWithBody request with any body
	UpdateAComplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateACompliance(ctx context.Context, body UpdateAComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteACompliance request
	DeleteACompliance(ctx context.Context, gpuModel string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RetrieveCompliance(ctx context.Context, params *RetrieveComplianceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveComplianceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateComplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateComplianceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCompliance(ctx context.Context, body CreateComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateComplianceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAComplianceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAComplianceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateACompliance(ctx context.Context, body UpdateAComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAComplianceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteACompliance(ctx context.Context, gpuModel string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAComplianceRequest(c.Server, gpuModel)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRetrieveComplianceRequest generates requests for RetrieveCompliance
func NewRetrieveComplianceRequest(server string, params *RetrieveComplianceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/compliance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Gpu != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gpu", runtime.ParamLocationQuery, *params.Gpu); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateComplianceRequest calls the generic CreateCompliance builder with application/json body
func NewCreateComplianceRequest(server string, body CreateComplianceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateComplianceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateComplianceRequestWithBody generates requests for CreateCompliance with any type of body
func NewCreateComplianceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/compliance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateAComplianceRequest calls the generic UpdateACompliance builder with application/json body
func NewUpdateAComplianceRequest(server string, body UpdateAComplianceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAComplianceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateAComplianceRequestWithBody generates requests for UpdateACompliance with any type of body
func NewUpdateAComplianceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/compliance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAComplianceRequest generates requests for DeleteACompliance
func NewDeleteAComplianceRequest(server string, gpuModel string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gpu_model", runtime.ParamLocationPath, gpuModel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/compliance/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RetrieveComplianceWithResponse request
	RetrieveComplianceWithResponse(ctx context.Context, params *RetrieveComplianceParams, reqEditors ...RequestEditorFn) (*RetrieveComplianceResponse, error)

	// CreateComplianceWithBodyWithResponse request with any body
	CreateComplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateComplianceResponse, error)

	CreateComplianceWithResponse(ctx context.Context, body CreateComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateComplianceResponse, error)

	// UpdateAComplianceWithBodyWithResponse request with any body
	UpdateAComplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAComplianceResponse, error)

	UpdateAComplianceWithResponse(ctx context.Context, body UpdateAComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAComplianceResponse, error)

	// DeleteAComplianceWithResponse request
	DeleteAComplianceWithResponse(ctx context.Context, gpuModel string, reqEditors ...RequestEditorFn) (*DeleteAComplianceResponse, error)
}

type RetrieveComplianceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComplianceResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON406      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r RetrieveComplianceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveComplianceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateComplianceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateUpdateComplianceResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
	JSON409      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r CreateComplianceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateComplianceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAComplianceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateUpdateComplianceResponse
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
	JSON405      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r UpdateAComplianceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAComplianceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAComplianceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseModel
	JSON400      *ErrorResponseModel
	JSON401      *ErrorResponseModel
	JSON404      *ErrorResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteAComplianceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAComplianceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RetrieveComplianceWithResponse request returning *RetrieveComplianceResponse
func (c *ClientWithResponses) RetrieveComplianceWithResponse(ctx context.Context, params *RetrieveComplianceParams, reqEditors ...RequestEditorFn) (*RetrieveComplianceResponse, error) {
	rsp, err := c.RetrieveCompliance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveComplianceResponse(rsp)
}

// CreateComplianceWithBodyWithResponse request with arbitrary body returning *CreateComplianceResponse
func (c *ClientWithResponses) CreateComplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateComplianceResponse, error) {
	rsp, err := c.CreateComplianceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateComplianceResponse(rsp)
}

func (c *ClientWithResponses) CreateComplianceWithResponse(ctx context.Context, body CreateComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateComplianceResponse, error) {
	rsp, err := c.CreateCompliance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateComplianceResponse(rsp)
}

// UpdateAComplianceWithBodyWithResponse request with arbitrary body returning *UpdateAComplianceResponse
func (c *ClientWithResponses) UpdateAComplianceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAComplianceResponse, error) {
	rsp, err := c.UpdateAComplianceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAComplianceResponse(rsp)
}

func (c *ClientWithResponses) UpdateAComplianceWithResponse(ctx context.Context, body UpdateAComplianceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAComplianceResponse, error) {
	rsp, err := c.UpdateACompliance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAComplianceResponse(rsp)
}

// DeleteAComplianceWithResponse request returning *DeleteAComplianceResponse
func (c *ClientWithResponses) DeleteAComplianceWithResponse(ctx context.Context, gpuModel string, reqEditors ...RequestEditorFn) (*DeleteAComplianceResponse, error) {
	rsp, err := c.DeleteACompliance(ctx, gpuModel, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAComplianceResponse(rsp)
}

// ParseRetrieveComplianceResponse parses an HTTP response from a RetrieveComplianceWithResponse call
func ParseRetrieveComplianceResponse(rsp *http.Response) (*RetrieveComplianceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveComplianceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseCreateComplianceResponse parses an HTTP response from a CreateComplianceWithResponse call
func ParseCreateComplianceResponse(rsp *http.Response) (*CreateComplianceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateComplianceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUpdateComplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseUpdateAComplianceResponse parses an HTTP response from a UpdateAComplianceWithResponse call
func ParseUpdateAComplianceResponse(rsp *http.Response) (*UpdateAComplianceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAComplianceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateUpdateComplianceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseDeleteAComplianceResponse parses an HTTP response from a DeleteAComplianceWithResponse call
func ParseDeleteAComplianceResponse(rsp *http.Response) (*DeleteAComplianceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAComplianceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
